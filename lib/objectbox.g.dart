// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/metadata/attribute.dart';
import 'models/metadata/attributeValue.dart';
import 'models/metadata/dataElement.dart';
import 'models/metadata/legend.dart';
import 'models/metadata/legendSet.dart';
import 'models/metadata/option.dart';
import 'models/metadata/optionSet.dart';
import 'models/metadata/organisationUnit.dart';
import 'models/metadata/organisationUnitGroup.dart';
import 'models/metadata/organisationUnitLevel.dart';
import 'models/metadata/program.dart';
import 'models/metadata/programRule.dart';
import 'models/metadata/programRuleAction.dart';
import 'models/metadata/programRuleVariable.dart';
import 'models/metadata/programSection.dart';
import 'models/metadata/programStage.dart';
import 'models/metadata/programStageSection.dart';
import 'models/metadata/relationshipConstraint.dart';
import 'models/metadata/relationshipType.dart';
import 'models/metadata/systemInfo.dart';
import 'models/metadata/trackedEntityAttributes.dart';
import 'models/metadata/trackedEntityType.dart';
import 'models/metadata/trackedEntityTypeAttribute.dart';
import 'models/metadata/user.dart';
import 'models/metadata/userGroup.dart';
import 'models/metadata/userRole.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3157304700124096846),
      name: 'OrganisationUnit',
      lastPropertyId: const IdUid(8, 5745814136480360495),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7778394961380106787),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6492232295611842729),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2721667509635852493),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2202927438804631493),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 699385692073055346)),
        ModelProperty(
            id: const IdUid(5, 1298814386914377053),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1001448372725749582),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6252541271763862655),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5745814136480360495),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 237539528438513958),
      name: 'OrganisationUnitGroup',
      lastPropertyId: const IdUid(5, 8840816767693680134),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7524869732918002550),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2042321883363497405),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8149287354897302411),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 1670748863137258552)),
        ModelProperty(
            id: const IdUid(4, 1114671843039616703),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8840816767693680134),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6900659298229635834),
            name: 'organisationUnits',
            targetId: const IdUid(1, 3157304700124096846))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 330940200820770746),
      name: 'OrganisationUnitLevel',
      lastPropertyId: const IdUid(6, 4038491512021710271),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7105230090558465040),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6683756563053641795),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6868096094096377695),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 801110034033103900)),
        ModelProperty(
            id: const IdUid(4, 9002833822897695057),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9199371862550189703),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4038491512021710271),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 4966942760818989276),
            name: 'organisationUnits',
            targetId: const IdUid(1, 3157304700124096846))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5746562288087590629),
      name: 'DHIS2Attribute',
      lastPropertyId: const IdUid(9, 7850464300548363043),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5179732917305871876),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6377042710121150527),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1873544617297222729),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3703449442706819745),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 7628889367295447108)),
        ModelProperty(
            id: const IdUid(5, 9076484895674357180),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 6259325880524263927)),
        ModelProperty(
            id: const IdUid(6, 7208687289250264075),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8993717799992782050),
            name: 'objectTypes',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2722049394428470543),
            name: 'mandatory',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7850464300548363043),
            name: 'unique',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1890676193673836562),
      name: 'SystemInfo',
      lastPropertyId: const IdUid(8, 6910308545814603590),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2029267228329315129),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5264812842849128249),
            name: 'version',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6713491974457484880),
            name: 'revision',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2858686366903286858),
            name: 'calendar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5554863321731916753),
            name: 'dateFormat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8053055960544215690),
            name: 'contextPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5561991190173699760),
            name: 'systemId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(6, 4857119152297246429)),
        ModelProperty(
            id: const IdUid(8, 6910308545814603590),
            name: 'systemName',
            type: 9,
            flags: 2048,
            indexId: const IdUid(7, 7548179625613315611))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 4682159138495939191),
      name: 'DHIS2AttributeValue',
      lastPropertyId: const IdUid(4, 8529443069058324952),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3287267681609999160),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6270168319196248471),
            name: 'attributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 2460665742992103097),
            relationTarget: 'DHIS2Attribute'),
        ModelProperty(
            id: const IdUid(3, 5790523148832597516),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 8597277955312187051),
            relationTarget: 'DataElement'),
        ModelProperty(
            id: const IdUid(4, 8529443069058324952),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 7943533425462088865),
            relationTarget: 'TrackedEntityAttribute')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 951536014289620099),
      name: 'DHIS2MeUser',
      lastPropertyId: const IdUid(8, 2297156150837807418),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7498367863798359120),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7904504124752273923),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3506207185042319304),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5076240480301039137),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3896267454910306894),
            name: 'authorities',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2455375250497227660),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(11, 6007481385327701377)),
        ModelProperty(
            id: const IdUid(8, 2297156150837807418),
            name: 'surname',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 4123498115819803584),
            name: 'userRoles',
            targetId: const IdUid(11, 1978420831454939557)),
        ModelRelation(
            id: const IdUid(4, 2434782697553525840),
            name: 'userGroups',
            targetId: const IdUid(10, 2915475660950608768)),
        ModelRelation(
            id: const IdUid(5, 3056061024851391692),
            name: 'organisationUnits',
            targetId: const IdUid(1, 3157304700124096846))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6966380446773749992),
      name: 'DHIS2Option',
      lastPropertyId: const IdUid(8, 5008967087979167828),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2197145987733448287),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3601531762971740140),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1399867337052049713),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 168172692336054715),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7430017917217714432),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2361760847988681468),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3775606183871942692),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5008967087979167828),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 7837653138915068179),
            relationTarget: 'DHIS2OptionSet')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 5874170899826926039),
      name: 'DHIS2OptionSet',
      lastPropertyId: const IdUid(7, 5083844055645166764),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3230927143394377745),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5375840053832032167),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 366642334865401877),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8970679747854789135),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 938015507868335795),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4982707860816127301),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5083844055645166764),
            name: 'valueType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(6, 9146650170576977834),
            name: 'options',
            targetId: const IdUid(8, 6966380446773749992))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 2915475660950608768),
      name: 'DHIS2UserGroup',
      lastPropertyId: const IdUid(6, 1286102686332120830),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7384986417088904271),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3939334856932525745),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(13, 2707531061137777322)),
        ModelProperty(
            id: const IdUid(4, 3216744724704235948),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const IdUid(15, 942431021170245756)),
        ModelProperty(
            id: const IdUid(5, 746197186595579849),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1286102686332120830),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 1978420831454939557),
      name: 'DHIS2UserRole',
      lastPropertyId: const IdUid(7, 8422053376859537120),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8739977781064343943),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3452461767046840135),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(16, 332822280872704035)),
        ModelProperty(
            id: const IdUid(4, 1451925082958681367),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8605322945724214622),
            name: 'authorities',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1931245622518880216),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8422053376859537120),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 8548529336902318249),
      name: 'DataElement',
      lastPropertyId: const IdUid(14, 6003243507206886547),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2950320049721240064),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 4476568711456095213),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1946577452860575016),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(17, 756011349301268535)),
        ModelProperty(
            id: const IdUid(4, 7607992391864126142),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 989648172677148850),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3768252674118506026),
            name: 'formName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3758445740994270495),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5178913974159846898),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7993021921152350411),
            name: 'aggregationType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6344708447471141133),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5448680695704199539),
            name: 'domainType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5938138383642929682),
            name: 'zeroIsSignificant',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2157323036423865416),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 5417634589666719209),
            relationTarget: 'DHIS2OptionSet'),
        ModelProperty(
            id: const IdUid(14, 6003243507206886547),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 1057043709914922110),
            name: 'attributeValues',
            targetId: const IdUid(6, 4682159138495939191)),
        ModelRelation(
            id: const IdUid(8, 1810305865487753088),
            name: 'legendSets',
            targetId: const IdUid(14, 1407655794943967659))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 3020524125395928760),
      name: 'Legend',
      lastPropertyId: const IdUid(9, 5475360347844038217),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5237937834125289524),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 2535836097331701091),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2681418256123158399),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8041216553375072674),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4621193480594969649),
            name: 'startValue',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4943575638748499688),
            name: 'endValue',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3684362386285474050),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1405462965726332195),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5475360347844038217),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 1407655794943967659),
      name: 'LegendSet',
      lastPropertyId: const IdUid(6, 5000923350987022046),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2383628197638702771),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3217763065701748771),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 841952445209763884),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4593574894166605846),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(19, 6351401570636041004)),
        ModelProperty(
            id: const IdUid(5, 7286444294635885090),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5000923350987022046),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 6326956477776142574),
            name: 'legends',
            targetId: const IdUid(13, 3020524125395928760))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 900010869586975097),
      name: 'Program',
      lastPropertyId: const IdUid(4, 2459398241364805894),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1114261887460256635),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4566544435840602736),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2599291002707701301),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2459398241364805894),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 7828433541350092890),
      name: 'ProgramRule',
      lastPropertyId: const IdUid(8, 4596175496504436089),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4722674754377328058),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9145402416712312117),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 146154362307388528),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7295951471130527335),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1425710328384433210),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5849191959009867970),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3870006738378911432),
            name: 'condition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4596175496504436089),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 8225616375226766870),
            relationTarget: 'Program')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 5553415640848727571),
            name: 'programRuleActions',
            targetId: const IdUid(17, 6235587652090588023))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 6235587652090588023),
      name: 'ProgramRuleAction',
      lastPropertyId: const IdUid(13, 2162201218574620295),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5032788779881530892),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7227271925168658450),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5419583755376326692),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8471469415156513490),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8616009002710068821),
            name: 'programRuleActionType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8435568219233091313),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1790157756534968889),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5538946093615325925),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5043608102327937481),
            name: 'programRuleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 9156874611618072498),
            relationTarget: 'ProgramRule'),
        ModelProperty(
            id: const IdUid(10, 3273867237847334791),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 4869739014432729703),
            relationTarget: 'DataElement'),
        ModelProperty(
            id: const IdUid(11, 5242855173580746779),
            name: 'programStageSectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(23, 1782017455477155345),
            relationTarget: 'ProgramStageSection'),
        ModelProperty(
            id: const IdUid(12, 1820638713782713345),
            name: 'programSectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 5716874700528927585),
            relationTarget: 'ProgramSection'),
        ModelProperty(
            id: const IdUid(13, 2162201218574620295),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 8774307487488549696),
            relationTarget: 'TrackedEntityAttribute')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 4084959408941274488),
      name: 'ProgramRuleVariable',
      lastPropertyId: const IdUid(12, 7166540533095467216),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6218624441072324881),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6944750135761012689),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2357155752046875505),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7794482751902920),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(26, 1695248266608157229)),
        ModelProperty(
            id: const IdUid(5, 3926068691182116413),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7665392560993937526),
            name: 'programRuleVariableSourceType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4453163740176389884),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3804757602977995483),
            name: 'useCodeForOptionSet',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2455647965954255329),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 7475789079064311663),
            relationTarget: 'TrackedEntityAttribute'),
        ModelProperty(
            id: const IdUid(10, 3153537616468481354),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(28, 3410288237879073727),
            relationTarget: 'DataElement'),
        ModelProperty(
            id: const IdUid(11, 1388970138298344838),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(29, 8445394614214995919),
            relationTarget: 'ProgramStage'),
        ModelProperty(
            id: const IdUid(12, 7166540533095467216),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(30, 4183065374477117207),
            relationTarget: 'Program')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 8998323607593693267),
      name: 'ProgramSection',
      lastPropertyId: const IdUid(4, 810653082250581587),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2266148421333834519),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8756873085833029779),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3287504464575145877),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 810653082250581587),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 1968701549855660850),
      name: 'ProgramStage',
      lastPropertyId: const IdUid(4, 5548880116506714433),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 617434412115760678),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2267359699024215515),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3740475897296642593),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5548880116506714433),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 6496719795622765387),
      name: 'ProgramStageSection',
      lastPropertyId: const IdUid(4, 5626280016940972506),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5132313766833593514),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7131877717865652277),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9208448860481717034),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5626280016940972506),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 4144499604677361893),
      name: 'RelationshipType',
      lastPropertyId: const IdUid(12, 6374128428311917756),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3681051067206930875),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2431434309650962270),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4130879412561088098),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1230413077417726071),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8154564375168382929),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2580827294357115359),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1474234612385014818),
            name: 'bidirectional',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2566599683033561367),
            name: 'referral',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 161242157200750945),
            name: 'fromToName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 914331836487107113),
            name: 'toFromName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 9191113453512339640),
            name: 'fromConstraintId',
            type: 11,
            flags: 520,
            indexId: const IdUid(31, 4943343298518238315),
            relationTarget: 'RelationshipConstraint'),
        ModelProperty(
            id: const IdUid(12, 6374128428311917756),
            name: 'toConstraintId',
            type: 11,
            flags: 520,
            indexId: const IdUid(32, 7955539201632284640),
            relationTarget: 'RelationshipConstraint')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(23, 2640479644037090191),
      name: 'TrackedEntityAttribute',
      lastPropertyId: const IdUid(13, 5697938382514020091),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2320398857072015923),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4493200662211744703),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1855169405427120883),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5333301862264972594),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(33, 477320925987229450)),
        ModelProperty(
            id: const IdUid(5, 2169587847350860774),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8659666314069188782),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5258683259509848527),
            name: 'formName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5060582612581327141),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3650169200936915799),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4820658848590174945),
            name: 'aggregationType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2485487627973959391),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7125293477854820653),
            name: 'zeroIsSignificant',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5697938382514020091),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(34, 911841268383280371),
            relationTarget: 'DHIS2OptionSet')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 2740652281233492510),
            name: 'attributeValues',
            targetId: const IdUid(6, 4682159138495939191)),
        ModelRelation(
            id: const IdUid(12, 349630473432731419),
            name: 'legendSets',
            targetId: const IdUid(14, 1407655794943967659))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(24, 1739967874137306785),
      name: 'TrackedEntityType',
      lastPropertyId: const IdUid(6, 6636905537691598511),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3581058671183033343),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4752546330920066857),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8864183082173667657),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2318729054995068157),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(35, 2585692370893144483)),
        ModelProperty(
            id: const IdUid(5, 7328645149766686972),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6636905537691598511),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(13, 920062547678254275),
            name: 'trackedEntityTypeAttributes',
            targetId: const IdUid(25, 8224540364192530902))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(25, 8224540364192530902),
      name: 'TrackedEntityTypeAttribute',
      lastPropertyId: const IdUid(10, 6565645919549780012),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1829808014553468662),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6678667406081247924),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 605202127560855051),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8781437333901562472),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3178920350625700000),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(36, 6746681908510274671),
            relationTarget: 'TrackedEntityType'),
        ModelProperty(
            id: const IdUid(6, 2743747458103961293),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(37, 6079947760883912791),
            relationTarget: 'TrackedEntityAttribute'),
        ModelProperty(
            id: const IdUid(7, 2403250058594915335),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 626449854648814964),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3922232190517425436),
            name: 'displayShortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6565645919549780012),
            name: 'mandatory',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 1594311483522671794),
      name: 'RelationshipConstraint',
      lastPropertyId: const IdUid(7, 7136213345804377941),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5359003994764421232),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1341947896388537381),
            name: 'relationshipEntity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4754234759964620515),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6610727248290263347),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(38, 2327862521981802113),
            relationTarget: 'TrackedEntityType'),
        ModelProperty(
            id: const IdUid(5, 6957144985565889535),
            name: 'relationshipTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(39, 4801487745142423174),
            relationTarget: 'RelationshipType'),
        ModelProperty(
            id: const IdUid(6, 1242716170531260502),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(40, 4106012477761887537),
            relationTarget: 'Program'),
        ModelProperty(
            id: const IdUid(7, 7136213345804377941),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(41, 183253394735194787),
            relationTarget: 'ProgramStage')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(26, 1594311483522671794),
      lastIndexId: const IdUid(41, 183253394735194787),
      lastRelationId: const IdUid(13, 920062547678254275),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [8961184502700425506],
      retiredPropertyUids: const [
        7325042414150286768,
        856433523957166225,
        4130433912790738396
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    OrganisationUnit: EntityDefinition<OrganisationUnit>(
        model: _entities[0],
        toOneRelations: (OrganisationUnit object) => [],
        toManyRelations: (OrganisationUnit object) => {},
        getId: (OrganisationUnit object) => object.id,
        setId: (OrganisationUnit object, int id) {
          object.id = id;
        },
        objectToFB: (OrganisationUnit object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final shortNameOffset = fbb.writeString(object.shortName);
          final uidOffset = fbb.writeString(object.uid);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, shortNameOffset);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, pathOffset);
          fbb.addInt64(5, object.level);
          fbb.addInt64(6, object.created.millisecondsSinceEpoch);
          fbb.addInt64(7, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = OrganisationUnit(idParam, nameParam, shortNameParam,
              uidParam, pathParam, levelParam, createdParam, lastUpdatedParam);

          return object;
        }),
    OrganisationUnitGroup: EntityDefinition<OrganisationUnitGroup>(
        model: _entities[1],
        toOneRelations: (OrganisationUnitGroup object) => [],
        toManyRelations: (OrganisationUnitGroup object) => {
              RelInfo<OrganisationUnitGroup>.toMany(1, object.id):
                  object.organisationUnits
            },
        getId: (OrganisationUnitGroup object) => object.id,
        setId: (OrganisationUnitGroup object, int id) {
          object.id = id;
        },
        objectToFB: (OrganisationUnitGroup object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.created.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = OrganisationUnitGroup(
              idParam, nameParam, uidParam, createdParam, lastUpdatedParam);
          InternalToManyAccess.setRelInfo<OrganisationUnitGroup>(
              object.organisationUnits,
              store,
              RelInfo<OrganisationUnitGroup>.toMany(1, object.id));
          return object;
        }),
    OrganisationUnitLevel: EntityDefinition<OrganisationUnitLevel>(
        model: _entities[2],
        toOneRelations: (OrganisationUnitLevel object) => [],
        toManyRelations: (OrganisationUnitLevel object) => {
              RelInfo<OrganisationUnitLevel>.toMany(2, object.id):
                  object.organisationUnits
            },
        getId: (OrganisationUnitLevel object) => object.id,
        setId: (OrganisationUnitLevel object, int id) {
          object.id = id;
        },
        objectToFB: (OrganisationUnitLevel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.level);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = OrganisationUnitLevel(idParam, nameParam, uidParam,
              levelParam, createdParam, lastUpdatedParam);
          InternalToManyAccess.setRelInfo<OrganisationUnitLevel>(
              object.organisationUnits,
              store,
              RelInfo<OrganisationUnitLevel>.toMany(2, object.id));
          return object;
        }),
    DHIS2Attribute: EntityDefinition<DHIS2Attribute>(
        model: _entities[3],
        toOneRelations: (DHIS2Attribute object) => [],
        toManyRelations: (DHIS2Attribute object) => {},
        getId: (DHIS2Attribute object) => object.id,
        setId: (DHIS2Attribute object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2Attribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final objectTypesOffset = fbb.writeList(
              object.objectTypes.map(fbb.writeString).toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, valueTypeOffset);
          fbb.addOffset(6, objectTypesOffset);
          fbb.addBool(7, object.mandatory);
          fbb.addBool(8, object.unique);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final objectTypesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final mandatoryParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final uniqueParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final object = DHIS2Attribute(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              valueTypeParam,
              objectTypesParam,
              mandatoryParam,
              uniqueParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SystemInfo: EntityDefinition<SystemInfo>(
        model: _entities[4],
        toOneRelations: (SystemInfo object) => [],
        toManyRelations: (SystemInfo object) => {},
        getId: (SystemInfo object) => object.id,
        setId: (SystemInfo object, int id) {
          object.id = id;
        },
        objectToFB: (SystemInfo object, fb.Builder fbb) {
          final versionOffset = fbb.writeString(object.version);
          final revisionOffset = fbb.writeString(object.revision);
          final calendarOffset = fbb.writeString(object.calendar);
          final dateFormatOffset = fbb.writeString(object.dateFormat);
          final contextPathOffset = fbb.writeString(object.contextPath);
          final systemIdOffset = fbb.writeString(object.systemId);
          final systemNameOffset = fbb.writeString(object.systemName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, versionOffset);
          fbb.addOffset(2, revisionOffset);
          fbb.addOffset(3, calendarOffset);
          fbb.addOffset(4, dateFormatOffset);
          fbb.addOffset(5, contextPathOffset);
          fbb.addOffset(6, systemIdOffset);
          fbb.addOffset(7, systemNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final versionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final revisionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final calendarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateFormatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final contextPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final systemIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final systemNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = SystemInfo(
              idParam,
              versionParam,
              revisionParam,
              calendarParam,
              dateFormatParam,
              contextPathParam,
              systemIdParam,
              systemNameParam);

          return object;
        }),
    DHIS2AttributeValue: EntityDefinition<DHIS2AttributeValue>(
        model: _entities[5],
        toOneRelations: (DHIS2AttributeValue object) => [
              object.attribute,
              object.dataElement,
              object.trackedEntityAttribute
            ],
        toManyRelations: (DHIS2AttributeValue object) => {},
        getId: (DHIS2AttributeValue object) => object.id,
        setId: (DHIS2AttributeValue object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2AttributeValue object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.attribute.targetId);
          fbb.addInt64(2, object.dataElement.targetId);
          fbb.addInt64(3, object.trackedEntityAttribute.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DHIS2AttributeValue()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.attribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.attribute.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.dataElement.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    DHIS2MeUser: EntityDefinition<DHIS2MeUser>(
        model: _entities[6],
        toOneRelations: (DHIS2MeUser object) => [],
        toManyRelations: (DHIS2MeUser object) => {
              RelInfo<DHIS2MeUser>.toMany(3, object.id): object.userRoles,
              RelInfo<DHIS2MeUser>.toMany(4, object.id): object.userGroups,
              RelInfo<DHIS2MeUser>.toMany(5, object.id):
                  object.organisationUnits
            },
        getId: (DHIS2MeUser object) => object.id,
        setId: (DHIS2MeUser object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2MeUser object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final firstNameOffset = fbb.writeString(object.firstName);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final authoritiesOffset = fbb.writeList(
              object.authorities.map(fbb.writeString).toList(growable: false));
          final uidOffset = fbb.writeString(object.uid);
          final surnameOffset = fbb.writeString(object.surname);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, authoritiesOffset);
          fbb.addOffset(6, uidOffset);
          fbb.addOffset(7, surnameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final surnameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final authoritiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = DHIS2MeUser(
              username: usernameParam,
              firstName: firstNameParam,
              surname: surnameParam,
              email: emailParam,
              authorities: authoritiesParam,
              uid: uidParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<DHIS2MeUser>(object.userRoles, store,
              RelInfo<DHIS2MeUser>.toMany(3, object.id));
          InternalToManyAccess.setRelInfo<DHIS2MeUser>(object.userGroups, store,
              RelInfo<DHIS2MeUser>.toMany(4, object.id));
          InternalToManyAccess.setRelInfo<DHIS2MeUser>(object.organisationUnits,
              store, RelInfo<DHIS2MeUser>.toMany(5, object.id));
          return object;
        }),
    DHIS2Option: EntityDefinition<DHIS2Option>(
        model: _entities[7],
        toOneRelations: (DHIS2Option object) => [object.optionSet],
        toManyRelations: (DHIS2Option object) => {},
        getId: (DHIS2Option object) => object.id,
        setId: (DHIS2Option object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2Option object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addInt64(6, object.sortOrder);
          fbb.addInt64(7, object.optionSet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = DHIS2Option(createdParam, lastUpdatedParam, uidParam,
              nameParam, codeParam, sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.optionSet.attach(store);
          return object;
        }),
    DHIS2OptionSet: EntityDefinition<DHIS2OptionSet>(
        model: _entities[8],
        toOneRelations: (DHIS2OptionSet object) => [],
        toManyRelations: (DHIS2OptionSet object) =>
            {RelInfo<DHIS2OptionSet>.toMany(6, object.id): object.options},
        getId: (DHIS2OptionSet object) => object.id,
        setId: (DHIS2OptionSet object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2OptionSet object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, valueTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = DHIS2OptionSet(createdParam, lastUpdatedParam,
              uidParam, nameParam, codeParam, valueTypeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<DHIS2OptionSet>(object.options, store,
              RelInfo<DHIS2OptionSet>.toMany(6, object.id));
          return object;
        }),
    DHIS2UserGroup: EntityDefinition<DHIS2UserGroup>(
        model: _entities[9],
        toOneRelations: (DHIS2UserGroup object) => [],
        toManyRelations: (DHIS2UserGroup object) => {},
        getId: (DHIS2UserGroup object) => object.id,
        setId: (DHIS2UserGroup object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2UserGroup object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = DHIS2UserGroup(
              uidParam, nameParam, createdParam, lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DHIS2UserRole: EntityDefinition<DHIS2UserRole>(
        model: _entities[10],
        toOneRelations: (DHIS2UserRole object) => [],
        toManyRelations: (DHIS2UserRole object) => {},
        getId: (DHIS2UserRole object) => object.id,
        setId: (DHIS2UserRole object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2UserRole object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final authoritiesOffset = fbb.writeList(
              object.authorities.map(fbb.writeString).toList(growable: false));
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, authoritiesOffset);
          fbb.addInt64(5, object.created.millisecondsSinceEpoch);
          fbb.addInt64(6, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final authoritiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final object = DHIS2UserRole(uidParam, nameParam, authoritiesParam,
              createdParam, lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DataElement: EntityDefinition<DataElement>(
        model: _entities[11],
        toOneRelations: (DataElement object) => [object.optionSet],
        toManyRelations: (DataElement object) => {
              RelInfo<DataElement>.toMany(7, object.id): object.attributeValues,
              RelInfo<DataElement>.toMany(8, object.id): object.legendSets
            },
        getId: (DataElement object) => object.id,
        setId: (DataElement object, int id) {
          object.id = id;
        },
        objectToFB: (DataElement object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          final formNameOffset = fbb.writeString(object.formName);
          final shortNameOffset = fbb.writeString(object.shortName);
          final descriptionOffset = fbb.writeString(object.description);
          final aggregationTypeOffset = fbb.writeString(object.aggregationType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final domainTypeOffset = fbb.writeString(object.domainType);
          fbb.startTable(15);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, codeOffset);
          fbb.addOffset(5, formNameOffset);
          fbb.addOffset(6, shortNameOffset);
          fbb.addOffset(7, descriptionOffset);
          fbb.addOffset(8, aggregationTypeOffset);
          fbb.addOffset(9, valueTypeOffset);
          fbb.addOffset(10, domainTypeOffset);
          fbb.addBool(11, object.zeroIsSignificant);
          fbb.addInt64(12, object.optionSet.targetId);
          fbb.addInt64(13, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final formNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final aggregationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final domainTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final zeroIsSignificantParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final object = DataElement(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              codeParam,
              formNameParam,
              shortNameParam,
              descriptionParam,
              aggregationTypeParam,
              valueTypeParam,
              domainTypeParam,
              zeroIsSignificantParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.optionSet.attach(store);
          InternalToManyAccess.setRelInfo<DataElement>(object.attributeValues,
              store, RelInfo<DataElement>.toMany(7, object.id));
          InternalToManyAccess.setRelInfo<DataElement>(object.legendSets, store,
              RelInfo<DataElement>.toMany(8, object.id));
          return object;
        }),
    Legend: EntityDefinition<Legend>(
        model: _entities[12],
        toOneRelations: (Legend object) => [],
        toManyRelations: (Legend object) => {},
        getId: (Legend object) => object.id,
        setId: (Legend object, int id) {
          object.id = id;
        },
        objectToFB: (Legend object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final colorOffset = fbb.writeString(object.color);
          final displayNameOffset = fbb.writeString(object.displayName);
          fbb.startTable(10);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.startValue);
          fbb.addInt64(5, object.endValue);
          fbb.addOffset(6, colorOffset);
          fbb.addOffset(7, displayNameOffset);
          fbb.addInt64(8, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final startValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final endValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final object = Legend(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              startValueParam,
              endValueParam,
              colorParam,
              displayNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);

          return object;
        }),
    LegendSet: EntityDefinition<LegendSet>(
        model: _entities[13],
        toOneRelations: (LegendSet object) => [],
        toManyRelations: (LegendSet object) =>
            {RelInfo<LegendSet>.toMany(9, object.id): object.legends},
        getId: (LegendSet object) => object.id,
        setId: (LegendSet object, int id) {
          object.id = id;
        },
        objectToFB: (LegendSet object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = LegendSet(
              createdParam, lastUpdatedParam, uidParam, nameParam, codeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<LegendSet>(
              object.legends, store, RelInfo<LegendSet>.toMany(9, object.id));
          return object;
        }),
    Program: EntityDefinition<Program>(
        model: _entities[14],
        toOneRelations: (Program object) => [],
        toManyRelations: (Program object) => {},
        getId: (Program object) => object.id,
        setId: (Program object, int id) {
          object.id = id;
        },
        objectToFB: (Program object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Program(createdParam, lastUpdatedParam, uidParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ProgramRule: EntityDefinition<ProgramRule>(
        model: _entities[15],
        toOneRelations: (ProgramRule object) => [object.program],
        toManyRelations: (ProgramRule object) => {
              RelInfo<ProgramRule>.toMany(10, object.id):
                  object.programRuleActions
            },
        getId: (ProgramRule object) => object.id,
        setId: (ProgramRule object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramRule object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final conditionOffset = fbb.writeString(object.condition);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, conditionOffset);
          fbb.addInt64(7, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final conditionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = ProgramRule(createdParam, lastUpdatedParam, uidParam,
              nameParam, descriptionParam, conditionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.program.attach(store);
          InternalToManyAccess.setRelInfo<ProgramRule>(
              object.programRuleActions,
              store,
              RelInfo<ProgramRule>.toMany(10, object.id));
          return object;
        }),
    ProgramRuleAction: EntityDefinition<ProgramRuleAction>(
        model: _entities[16],
        toOneRelations: (ProgramRuleAction object) => [
              object.programRule,
              object.dataElement,
              object.programStageSection,
              object.programSection,
              object.trackedEntityAttribute
            ],
        toManyRelations: (ProgramRuleAction object) => {},
        getId: (ProgramRuleAction object) => object.id,
        setId: (ProgramRuleAction object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramRuleAction object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final programRuleActionTypeOffset =
              fbb.writeString(object.programRuleActionType);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, programRuleActionTypeOffset);
          fbb.addOffset(5, contentOffset);
          fbb.addOffset(6, dataOffset);
          fbb.addOffset(7, locationOffset);
          fbb.addInt64(8, object.programRule.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addInt64(10, object.programStageSection.targetId);
          fbb.addInt64(11, object.programSection.targetId);
          fbb.addInt64(12, object.trackedEntityAttribute.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final programRuleActionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = ProgramRuleAction(
              createdParam,
              lastUpdatedParam,
              uidParam,
              programRuleActionTypeParam,
              contentParam,
              dataParam,
              locationParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.programRule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.programRule.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          object.programStageSection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.programStageSection.attach(store);
          object.programSection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.programSection.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    ProgramRuleVariable: EntityDefinition<ProgramRuleVariable>(
        model: _entities[17],
        toOneRelations: (ProgramRuleVariable object) => [
              object.trackedEntityAttribute,
              object.dataElement,
              object.programStage,
              object.program
            ],
        toManyRelations: (ProgramRuleVariable object) => {},
        getId: (ProgramRuleVariable object) => object.id,
        setId: (ProgramRuleVariable object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramRuleVariable object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final programRuleVariableSourceTypeOffset =
              fbb.writeString(object.programRuleVariableSourceType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, programRuleVariableSourceTypeOffset);
          fbb.addOffset(6, valueTypeOffset);
          fbb.addBool(7, object.useCodeForOptionSet);
          fbb.addInt64(8, object.trackedEntityAttribute.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addInt64(10, object.programStage.targetId);
          fbb.addInt64(11, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final programRuleVariableSourceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final useCodeForOptionSetParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = ProgramRuleVariable(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              programRuleVariableSourceTypeParam,
              valueTypeParam,
              useCodeForOptionSetParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.trackedEntityAttribute.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.programStage.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.program.attach(store);
          return object;
        }),
    ProgramSection: EntityDefinition<ProgramSection>(
        model: _entities[18],
        toOneRelations: (ProgramSection object) => [],
        toManyRelations: (ProgramSection object) => {},
        getId: (ProgramSection object) => object.id,
        setId: (ProgramSection object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramSection object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = ProgramSection(
              createdParam, lastUpdatedParam, uidParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ProgramStage: EntityDefinition<ProgramStage>(
        model: _entities[19],
        toOneRelations: (ProgramStage object) => [],
        toManyRelations: (ProgramStage object) => {},
        getId: (ProgramStage object) => object.id,
        setId: (ProgramStage object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramStage object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = ProgramStage(createdParam, lastUpdatedParam, uidParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ProgramStageSection: EntityDefinition<ProgramStageSection>(
        model: _entities[20],
        toOneRelations: (ProgramStageSection object) => [],
        toManyRelations: (ProgramStageSection object) => {},
        getId: (ProgramStageSection object) => object.id,
        setId: (ProgramStageSection object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramStageSection object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = ProgramStageSection(
              createdParam, lastUpdatedParam, uidParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    RelationshipType: EntityDefinition<RelationshipType>(
        model: _entities[21],
        toOneRelations: (RelationshipType object) =>
            [object.fromConstraint, object.toConstraint],
        toManyRelations: (RelationshipType object) => {},
        getId: (RelationshipType object) => object.id,
        setId: (RelationshipType object, int id) {
          object.id = id;
        },
        objectToFB: (RelationshipType object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          final fromToNameOffset = fbb.writeString(object.fromToName);
          final toFromNameOffset = fbb.writeString(object.toFromName);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addBool(6, object.bidirectional);
          fbb.addBool(7, object.referral);
          fbb.addOffset(8, fromToNameOffset);
          fbb.addOffset(9, toFromNameOffset);
          fbb.addInt64(10, object.fromConstraint.targetId);
          fbb.addInt64(11, object.toConstraint.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final bidirectionalParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final referralParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final fromToNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final toFromNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = RelationshipType(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              codeParam,
              bidirectionalParam,
              referralParam,
              fromToNameParam,
              toFromNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.fromConstraint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.fromConstraint.attach(store);
          object.toConstraint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.toConstraint.attach(store);
          return object;
        }),
    TrackedEntityAttribute: EntityDefinition<TrackedEntityAttribute>(
        model: _entities[22],
        toOneRelations: (TrackedEntityAttribute object) => [object.optionSet],
        toManyRelations: (TrackedEntityAttribute object) => {
              RelInfo<TrackedEntityAttribute>.toMany(11, object.id):
                  object.attributeValues,
              RelInfo<TrackedEntityAttribute>.toMany(12, object.id):
                  object.legendSets
            },
        getId: (TrackedEntityAttribute object) => object.id,
        setId: (TrackedEntityAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (TrackedEntityAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          final formNameOffset = fbb.writeString(object.formName);
          final shortNameOffset = fbb.writeString(object.shortName);
          final descriptionOffset = fbb.writeString(object.description);
          final aggregationTypeOffset = fbb.writeString(object.aggregationType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, formNameOffset);
          fbb.addOffset(7, shortNameOffset);
          fbb.addOffset(8, descriptionOffset);
          fbb.addOffset(9, aggregationTypeOffset);
          fbb.addOffset(10, valueTypeOffset);
          fbb.addBool(11, object.zeroIsSignificant);
          fbb.addInt64(12, object.optionSet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final formNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final aggregationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final zeroIsSignificantParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final object = TrackedEntityAttribute(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              codeParam,
              formNameParam,
              shortNameParam,
              descriptionParam,
              aggregationTypeParam,
              valueTypeParam,
              zeroIsSignificantParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.optionSet.attach(store);
          InternalToManyAccess.setRelInfo<TrackedEntityAttribute>(
              object.attributeValues,
              store,
              RelInfo<TrackedEntityAttribute>.toMany(11, object.id));
          InternalToManyAccess.setRelInfo<TrackedEntityAttribute>(
              object.legendSets,
              store,
              RelInfo<TrackedEntityAttribute>.toMany(12, object.id));
          return object;
        }),
    TrackedEntityType: EntityDefinition<TrackedEntityType>(
        model: _entities[23],
        toOneRelations: (TrackedEntityType object) => [],
        toManyRelations: (TrackedEntityType object) => {
              RelInfo<TrackedEntityType>.toMany(13, object.id):
                  object.trackedEntityTypeAttributes
            },
        getId: (TrackedEntityType object) => object.id,
        setId: (TrackedEntityType object, int id) {
          object.id = id;
        },
        objectToFB: (TrackedEntityType object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = TrackedEntityType(createdParam, lastUpdatedParam,
              uidParam, nameParam, descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<TrackedEntityType>(
              object.trackedEntityTypeAttributes,
              store,
              RelInfo<TrackedEntityType>.toMany(13, object.id));
          return object;
        }),
    TrackedEntityTypeAttribute: EntityDefinition<TrackedEntityTypeAttribute>(
        model: _entities[24],
        toOneRelations: (TrackedEntityTypeAttribute object) =>
            [object.trackedEntityType, object.trackedEntityAttribute],
        toManyRelations: (TrackedEntityTypeAttribute object) => {},
        getId: (TrackedEntityTypeAttribute object) => object.id,
        setId: (TrackedEntityTypeAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (TrackedEntityTypeAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final displayNameOffset = fbb.writeString(object.displayName);
          final displayShortNameOffset =
              fbb.writeString(object.displayShortName);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.trackedEntityType.targetId);
          fbb.addInt64(5, object.trackedEntityAttribute.targetId);
          fbb.addOffset(6, valueTypeOffset);
          fbb.addOffset(7, displayNameOffset);
          fbb.addOffset(8, displayShortNameOffset);
          fbb.addBool(9, object.mandatory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final displayShortNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final mandatoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final object = TrackedEntityTypeAttribute(
              createdParam,
              lastUpdatedParam,
              uidParam,
              valueTypeParam,
              displayNameParam,
              displayShortNameParam,
              mandatoryParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.trackedEntityType.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    RelationshipConstraint: EntityDefinition<RelationshipConstraint>(
        model: _entities[25],
        toOneRelations: (RelationshipConstraint object) => [
              object.trackedEntityType,
              object.relationshipType,
              object.program,
              object.programStage
            ],
        toManyRelations: (RelationshipConstraint object) => {},
        getId: (RelationshipConstraint object) => object.id,
        setId: (RelationshipConstraint object, int id) {
          object.id = id;
        },
        objectToFB: (RelationshipConstraint object, fb.Builder fbb) {
          final relationshipEntityOffset =
              fbb.writeString(object.relationshipEntity);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, relationshipEntityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.trackedEntityType.targetId);
          fbb.addInt64(4, object.relationshipType.targetId);
          fbb.addInt64(5, object.program.targetId);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final relationshipEntityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = RelationshipConstraint(
              relationshipEntityParam, nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.trackedEntityType.attach(store);
          object.relationshipType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.relationshipType.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.program.attach(store);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [OrganisationUnit] entity fields to define ObjectBox queries.
class OrganisationUnit_ {
  /// see [OrganisationUnit.id]
  static final id =
      QueryIntegerProperty<OrganisationUnit>(_entities[0].properties[0]);

  /// see [OrganisationUnit.name]
  static final name =
      QueryStringProperty<OrganisationUnit>(_entities[0].properties[1]);

  /// see [OrganisationUnit.shortName]
  static final shortName =
      QueryStringProperty<OrganisationUnit>(_entities[0].properties[2]);

  /// see [OrganisationUnit.uid]
  static final uid =
      QueryStringProperty<OrganisationUnit>(_entities[0].properties[3]);

  /// see [OrganisationUnit.path]
  static final path =
      QueryStringProperty<OrganisationUnit>(_entities[0].properties[4]);

  /// see [OrganisationUnit.level]
  static final level =
      QueryIntegerProperty<OrganisationUnit>(_entities[0].properties[5]);

  /// see [OrganisationUnit.created]
  static final created =
      QueryIntegerProperty<OrganisationUnit>(_entities[0].properties[6]);

  /// see [OrganisationUnit.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<OrganisationUnit>(_entities[0].properties[7]);
}

/// [OrganisationUnitGroup] entity fields to define ObjectBox queries.
class OrganisationUnitGroup_ {
  /// see [OrganisationUnitGroup.id]
  static final id =
      QueryIntegerProperty<OrganisationUnitGroup>(_entities[1].properties[0]);

  /// see [OrganisationUnitGroup.name]
  static final name =
      QueryStringProperty<OrganisationUnitGroup>(_entities[1].properties[1]);

  /// see [OrganisationUnitGroup.uid]
  static final uid =
      QueryStringProperty<OrganisationUnitGroup>(_entities[1].properties[2]);

  /// see [OrganisationUnitGroup.created]
  static final created =
      QueryIntegerProperty<OrganisationUnitGroup>(_entities[1].properties[3]);

  /// see [OrganisationUnitGroup.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<OrganisationUnitGroup>(_entities[1].properties[4]);

  /// see [OrganisationUnitGroup.organisationUnits]
  static final organisationUnits =
      QueryRelationToMany<OrganisationUnitGroup, OrganisationUnit>(
          _entities[1].relations[0]);
}

/// [OrganisationUnitLevel] entity fields to define ObjectBox queries.
class OrganisationUnitLevel_ {
  /// see [OrganisationUnitLevel.id]
  static final id =
      QueryIntegerProperty<OrganisationUnitLevel>(_entities[2].properties[0]);

  /// see [OrganisationUnitLevel.name]
  static final name =
      QueryStringProperty<OrganisationUnitLevel>(_entities[2].properties[1]);

  /// see [OrganisationUnitLevel.uid]
  static final uid =
      QueryStringProperty<OrganisationUnitLevel>(_entities[2].properties[2]);

  /// see [OrganisationUnitLevel.level]
  static final level =
      QueryIntegerProperty<OrganisationUnitLevel>(_entities[2].properties[3]);

  /// see [OrganisationUnitLevel.created]
  static final created =
      QueryIntegerProperty<OrganisationUnitLevel>(_entities[2].properties[4]);

  /// see [OrganisationUnitLevel.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<OrganisationUnitLevel>(_entities[2].properties[5]);

  /// see [OrganisationUnitLevel.organisationUnits]
  static final organisationUnits =
      QueryRelationToMany<OrganisationUnitLevel, OrganisationUnit>(
          _entities[2].relations[0]);
}

/// [DHIS2Attribute] entity fields to define ObjectBox queries.
class DHIS2Attribute_ {
  /// see [DHIS2Attribute.id]
  static final id =
      QueryIntegerProperty<DHIS2Attribute>(_entities[3].properties[0]);

  /// see [DHIS2Attribute.created]
  static final created =
      QueryIntegerProperty<DHIS2Attribute>(_entities[3].properties[1]);

  /// see [DHIS2Attribute.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2Attribute>(_entities[3].properties[2]);

  /// see [DHIS2Attribute.uid]
  static final uid =
      QueryStringProperty<DHIS2Attribute>(_entities[3].properties[3]);

  /// see [DHIS2Attribute.name]
  static final name =
      QueryStringProperty<DHIS2Attribute>(_entities[3].properties[4]);

  /// see [DHIS2Attribute.valueType]
  static final valueType =
      QueryStringProperty<DHIS2Attribute>(_entities[3].properties[5]);

  /// see [DHIS2Attribute.objectTypes]
  static final objectTypes =
      QueryStringVectorProperty<DHIS2Attribute>(_entities[3].properties[6]);

  /// see [DHIS2Attribute.mandatory]
  static final mandatory =
      QueryBooleanProperty<DHIS2Attribute>(_entities[3].properties[7]);

  /// see [DHIS2Attribute.unique]
  static final unique =
      QueryBooleanProperty<DHIS2Attribute>(_entities[3].properties[8]);
}

/// [SystemInfo] entity fields to define ObjectBox queries.
class SystemInfo_ {
  /// see [SystemInfo.id]
  static final id =
      QueryIntegerProperty<SystemInfo>(_entities[4].properties[0]);

  /// see [SystemInfo.version]
  static final version =
      QueryStringProperty<SystemInfo>(_entities[4].properties[1]);

  /// see [SystemInfo.revision]
  static final revision =
      QueryStringProperty<SystemInfo>(_entities[4].properties[2]);

  /// see [SystemInfo.calendar]
  static final calendar =
      QueryStringProperty<SystemInfo>(_entities[4].properties[3]);

  /// see [SystemInfo.dateFormat]
  static final dateFormat =
      QueryStringProperty<SystemInfo>(_entities[4].properties[4]);

  /// see [SystemInfo.contextPath]
  static final contextPath =
      QueryStringProperty<SystemInfo>(_entities[4].properties[5]);

  /// see [SystemInfo.systemId]
  static final systemId =
      QueryStringProperty<SystemInfo>(_entities[4].properties[6]);

  /// see [SystemInfo.systemName]
  static final systemName =
      QueryStringProperty<SystemInfo>(_entities[4].properties[7]);
}

/// [DHIS2AttributeValue] entity fields to define ObjectBox queries.
class DHIS2AttributeValue_ {
  /// see [DHIS2AttributeValue.id]
  static final id =
      QueryIntegerProperty<DHIS2AttributeValue>(_entities[5].properties[0]);

  /// see [DHIS2AttributeValue.attribute]
  static final attribute =
      QueryRelationToOne<DHIS2AttributeValue, DHIS2Attribute>(
          _entities[5].properties[1]);

  /// see [DHIS2AttributeValue.dataElement]
  static final dataElement =
      QueryRelationToOne<DHIS2AttributeValue, DataElement>(
          _entities[5].properties[2]);

  /// see [DHIS2AttributeValue.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<DHIS2AttributeValue, TrackedEntityAttribute>(
          _entities[5].properties[3]);
}

/// [DHIS2MeUser] entity fields to define ObjectBox queries.
class DHIS2MeUser_ {
  /// see [DHIS2MeUser.id]
  static final id =
      QueryIntegerProperty<DHIS2MeUser>(_entities[6].properties[0]);

  /// see [DHIS2MeUser.username]
  static final username =
      QueryStringProperty<DHIS2MeUser>(_entities[6].properties[1]);

  /// see [DHIS2MeUser.firstName]
  static final firstName =
      QueryStringProperty<DHIS2MeUser>(_entities[6].properties[2]);

  /// see [DHIS2MeUser.email]
  static final email =
      QueryStringProperty<DHIS2MeUser>(_entities[6].properties[3]);

  /// see [DHIS2MeUser.authorities]
  static final authorities =
      QueryStringVectorProperty<DHIS2MeUser>(_entities[6].properties[4]);

  /// see [DHIS2MeUser.uid]
  static final uid =
      QueryStringProperty<DHIS2MeUser>(_entities[6].properties[5]);

  /// see [DHIS2MeUser.surname]
  static final surname =
      QueryStringProperty<DHIS2MeUser>(_entities[6].properties[6]);

  /// see [DHIS2MeUser.userRoles]
  static final userRoles = QueryRelationToMany<DHIS2MeUser, DHIS2UserRole>(
      _entities[6].relations[0]);

  /// see [DHIS2MeUser.userGroups]
  static final userGroups = QueryRelationToMany<DHIS2MeUser, DHIS2UserGroup>(
      _entities[6].relations[1]);

  /// see [DHIS2MeUser.organisationUnits]
  static final organisationUnits =
      QueryRelationToMany<DHIS2MeUser, OrganisationUnit>(
          _entities[6].relations[2]);
}

/// [DHIS2Option] entity fields to define ObjectBox queries.
class DHIS2Option_ {
  /// see [DHIS2Option.id]
  static final id =
      QueryIntegerProperty<DHIS2Option>(_entities[7].properties[0]);

  /// see [DHIS2Option.created]
  static final created =
      QueryIntegerProperty<DHIS2Option>(_entities[7].properties[1]);

  /// see [DHIS2Option.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2Option>(_entities[7].properties[2]);

  /// see [DHIS2Option.uid]
  static final uid =
      QueryStringProperty<DHIS2Option>(_entities[7].properties[3]);

  /// see [DHIS2Option.name]
  static final name =
      QueryStringProperty<DHIS2Option>(_entities[7].properties[4]);

  /// see [DHIS2Option.code]
  static final code =
      QueryStringProperty<DHIS2Option>(_entities[7].properties[5]);

  /// see [DHIS2Option.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<DHIS2Option>(_entities[7].properties[6]);

  /// see [DHIS2Option.optionSet]
  static final optionSet = QueryRelationToOne<DHIS2Option, DHIS2OptionSet>(
      _entities[7].properties[7]);
}

/// [DHIS2OptionSet] entity fields to define ObjectBox queries.
class DHIS2OptionSet_ {
  /// see [DHIS2OptionSet.id]
  static final id =
      QueryIntegerProperty<DHIS2OptionSet>(_entities[8].properties[0]);

  /// see [DHIS2OptionSet.created]
  static final created =
      QueryIntegerProperty<DHIS2OptionSet>(_entities[8].properties[1]);

  /// see [DHIS2OptionSet.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2OptionSet>(_entities[8].properties[2]);

  /// see [DHIS2OptionSet.uid]
  static final uid =
      QueryStringProperty<DHIS2OptionSet>(_entities[8].properties[3]);

  /// see [DHIS2OptionSet.name]
  static final name =
      QueryStringProperty<DHIS2OptionSet>(_entities[8].properties[4]);

  /// see [DHIS2OptionSet.code]
  static final code =
      QueryStringProperty<DHIS2OptionSet>(_entities[8].properties[5]);

  /// see [DHIS2OptionSet.valueType]
  static final valueType =
      QueryStringProperty<DHIS2OptionSet>(_entities[8].properties[6]);

  /// see [DHIS2OptionSet.options]
  static final options = QueryRelationToMany<DHIS2OptionSet, DHIS2Option>(
      _entities[8].relations[0]);
}

/// [DHIS2UserGroup] entity fields to define ObjectBox queries.
class DHIS2UserGroup_ {
  /// see [DHIS2UserGroup.id]
  static final id =
      QueryIntegerProperty<DHIS2UserGroup>(_entities[9].properties[0]);

  /// see [DHIS2UserGroup.uid]
  static final uid =
      QueryStringProperty<DHIS2UserGroup>(_entities[9].properties[1]);

  /// see [DHIS2UserGroup.name]
  static final name =
      QueryStringProperty<DHIS2UserGroup>(_entities[9].properties[2]);

  /// see [DHIS2UserGroup.created]
  static final created =
      QueryIntegerProperty<DHIS2UserGroup>(_entities[9].properties[3]);

  /// see [DHIS2UserGroup.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2UserGroup>(_entities[9].properties[4]);
}

/// [DHIS2UserRole] entity fields to define ObjectBox queries.
class DHIS2UserRole_ {
  /// see [DHIS2UserRole.id]
  static final id =
      QueryIntegerProperty<DHIS2UserRole>(_entities[10].properties[0]);

  /// see [DHIS2UserRole.uid]
  static final uid =
      QueryStringProperty<DHIS2UserRole>(_entities[10].properties[1]);

  /// see [DHIS2UserRole.name]
  static final name =
      QueryStringProperty<DHIS2UserRole>(_entities[10].properties[2]);

  /// see [DHIS2UserRole.authorities]
  static final authorities =
      QueryStringVectorProperty<DHIS2UserRole>(_entities[10].properties[3]);

  /// see [DHIS2UserRole.created]
  static final created =
      QueryIntegerProperty<DHIS2UserRole>(_entities[10].properties[4]);

  /// see [DHIS2UserRole.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2UserRole>(_entities[10].properties[5]);
}

/// [DataElement] entity fields to define ObjectBox queries.
class DataElement_ {
  /// see [DataElement.created]
  static final created =
      QueryIntegerProperty<DataElement>(_entities[11].properties[0]);

  /// see [DataElement.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DataElement>(_entities[11].properties[1]);

  /// see [DataElement.uid]
  static final uid =
      QueryStringProperty<DataElement>(_entities[11].properties[2]);

  /// see [DataElement.name]
  static final name =
      QueryStringProperty<DataElement>(_entities[11].properties[3]);

  /// see [DataElement.code]
  static final code =
      QueryStringProperty<DataElement>(_entities[11].properties[4]);

  /// see [DataElement.formName]
  static final formName =
      QueryStringProperty<DataElement>(_entities[11].properties[5]);

  /// see [DataElement.shortName]
  static final shortName =
      QueryStringProperty<DataElement>(_entities[11].properties[6]);

  /// see [DataElement.description]
  static final description =
      QueryStringProperty<DataElement>(_entities[11].properties[7]);

  /// see [DataElement.aggregationType]
  static final aggregationType =
      QueryStringProperty<DataElement>(_entities[11].properties[8]);

  /// see [DataElement.valueType]
  static final valueType =
      QueryStringProperty<DataElement>(_entities[11].properties[9]);

  /// see [DataElement.domainType]
  static final domainType =
      QueryStringProperty<DataElement>(_entities[11].properties[10]);

  /// see [DataElement.zeroIsSignificant]
  static final zeroIsSignificant =
      QueryBooleanProperty<DataElement>(_entities[11].properties[11]);

  /// see [DataElement.optionSet]
  static final optionSet = QueryRelationToOne<DataElement, DHIS2OptionSet>(
      _entities[11].properties[12]);

  /// see [DataElement.id]
  static final id =
      QueryIntegerProperty<DataElement>(_entities[11].properties[13]);

  /// see [DataElement.attributeValues]
  static final attributeValues =
      QueryRelationToMany<DataElement, DHIS2AttributeValue>(
          _entities[11].relations[0]);

  /// see [DataElement.legendSets]
  static final legendSets =
      QueryRelationToMany<DataElement, LegendSet>(_entities[11].relations[1]);
}

/// [Legend] entity fields to define ObjectBox queries.
class Legend_ {
  /// see [Legend.created]
  static final created =
      QueryIntegerProperty<Legend>(_entities[12].properties[0]);

  /// see [Legend.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<Legend>(_entities[12].properties[1]);

  /// see [Legend.uid]
  static final uid = QueryStringProperty<Legend>(_entities[12].properties[2]);

  /// see [Legend.name]
  static final name = QueryStringProperty<Legend>(_entities[12].properties[3]);

  /// see [Legend.startValue]
  static final startValue =
      QueryIntegerProperty<Legend>(_entities[12].properties[4]);

  /// see [Legend.endValue]
  static final endValue =
      QueryIntegerProperty<Legend>(_entities[12].properties[5]);

  /// see [Legend.color]
  static final color = QueryStringProperty<Legend>(_entities[12].properties[6]);

  /// see [Legend.displayName]
  static final displayName =
      QueryStringProperty<Legend>(_entities[12].properties[7]);

  /// see [Legend.id]
  static final id = QueryIntegerProperty<Legend>(_entities[12].properties[8]);
}

/// [LegendSet] entity fields to define ObjectBox queries.
class LegendSet_ {
  /// see [LegendSet.id]
  static final id =
      QueryIntegerProperty<LegendSet>(_entities[13].properties[0]);

  /// see [LegendSet.created]
  static final created =
      QueryIntegerProperty<LegendSet>(_entities[13].properties[1]);

  /// see [LegendSet.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<LegendSet>(_entities[13].properties[2]);

  /// see [LegendSet.uid]
  static final uid =
      QueryStringProperty<LegendSet>(_entities[13].properties[3]);

  /// see [LegendSet.name]
  static final name =
      QueryStringProperty<LegendSet>(_entities[13].properties[4]);

  /// see [LegendSet.code]
  static final code =
      QueryStringProperty<LegendSet>(_entities[13].properties[5]);

  /// see [LegendSet.legends]
  static final legends =
      QueryRelationToMany<LegendSet, Legend>(_entities[13].relations[0]);
}

/// [Program] entity fields to define ObjectBox queries.
class Program_ {
  /// see [Program.id]
  static final id = QueryIntegerProperty<Program>(_entities[14].properties[0]);

  /// see [Program.created]
  static final created =
      QueryIntegerProperty<Program>(_entities[14].properties[1]);

  /// see [Program.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<Program>(_entities[14].properties[2]);

  /// see [Program.uid]
  static final uid = QueryStringProperty<Program>(_entities[14].properties[3]);
}

/// [ProgramRule] entity fields to define ObjectBox queries.
class ProgramRule_ {
  /// see [ProgramRule.id]
  static final id =
      QueryIntegerProperty<ProgramRule>(_entities[15].properties[0]);

  /// see [ProgramRule.created]
  static final created =
      QueryIntegerProperty<ProgramRule>(_entities[15].properties[1]);

  /// see [ProgramRule.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramRule>(_entities[15].properties[2]);

  /// see [ProgramRule.uid]
  static final uid =
      QueryStringProperty<ProgramRule>(_entities[15].properties[3]);

  /// see [ProgramRule.name]
  static final name =
      QueryStringProperty<ProgramRule>(_entities[15].properties[4]);

  /// see [ProgramRule.description]
  static final description =
      QueryStringProperty<ProgramRule>(_entities[15].properties[5]);

  /// see [ProgramRule.condition]
  static final condition =
      QueryStringProperty<ProgramRule>(_entities[15].properties[6]);

  /// see [ProgramRule.program]
  static final program =
      QueryRelationToOne<ProgramRule, Program>(_entities[15].properties[7]);

  /// see [ProgramRule.programRuleActions]
  static final programRuleActions =
      QueryRelationToMany<ProgramRule, ProgramRuleAction>(
          _entities[15].relations[0]);
}

/// [ProgramRuleAction] entity fields to define ObjectBox queries.
class ProgramRuleAction_ {
  /// see [ProgramRuleAction.id]
  static final id =
      QueryIntegerProperty<ProgramRuleAction>(_entities[16].properties[0]);

  /// see [ProgramRuleAction.created]
  static final created =
      QueryIntegerProperty<ProgramRuleAction>(_entities[16].properties[1]);

  /// see [ProgramRuleAction.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramRuleAction>(_entities[16].properties[2]);

  /// see [ProgramRuleAction.uid]
  static final uid =
      QueryStringProperty<ProgramRuleAction>(_entities[16].properties[3]);

  /// see [ProgramRuleAction.programRuleActionType]
  static final programRuleActionType =
      QueryStringProperty<ProgramRuleAction>(_entities[16].properties[4]);

  /// see [ProgramRuleAction.content]
  static final content =
      QueryStringProperty<ProgramRuleAction>(_entities[16].properties[5]);

  /// see [ProgramRuleAction.data]
  static final data =
      QueryStringProperty<ProgramRuleAction>(_entities[16].properties[6]);

  /// see [ProgramRuleAction.location]
  static final location =
      QueryStringProperty<ProgramRuleAction>(_entities[16].properties[7]);

  /// see [ProgramRuleAction.programRule]
  static final programRule = QueryRelationToOne<ProgramRuleAction, ProgramRule>(
      _entities[16].properties[8]);

  /// see [ProgramRuleAction.dataElement]
  static final dataElement = QueryRelationToOne<ProgramRuleAction, DataElement>(
      _entities[16].properties[9]);

  /// see [ProgramRuleAction.programStageSection]
  static final programStageSection =
      QueryRelationToOne<ProgramRuleAction, ProgramStageSection>(
          _entities[16].properties[10]);

  /// see [ProgramRuleAction.programSection]
  static final programSection =
      QueryRelationToOne<ProgramRuleAction, ProgramSection>(
          _entities[16].properties[11]);

  /// see [ProgramRuleAction.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<ProgramRuleAction, TrackedEntityAttribute>(
          _entities[16].properties[12]);
}

/// [ProgramRuleVariable] entity fields to define ObjectBox queries.
class ProgramRuleVariable_ {
  /// see [ProgramRuleVariable.id]
  static final id =
      QueryIntegerProperty<ProgramRuleVariable>(_entities[17].properties[0]);

  /// see [ProgramRuleVariable.created]
  static final created =
      QueryIntegerProperty<ProgramRuleVariable>(_entities[17].properties[1]);

  /// see [ProgramRuleVariable.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramRuleVariable>(_entities[17].properties[2]);

  /// see [ProgramRuleVariable.uid]
  static final uid =
      QueryStringProperty<ProgramRuleVariable>(_entities[17].properties[3]);

  /// see [ProgramRuleVariable.name]
  static final name =
      QueryStringProperty<ProgramRuleVariable>(_entities[17].properties[4]);

  /// see [ProgramRuleVariable.programRuleVariableSourceType]
  static final programRuleVariableSourceType =
      QueryStringProperty<ProgramRuleVariable>(_entities[17].properties[5]);

  /// see [ProgramRuleVariable.valueType]
  static final valueType =
      QueryStringProperty<ProgramRuleVariable>(_entities[17].properties[6]);

  /// see [ProgramRuleVariable.useCodeForOptionSet]
  static final useCodeForOptionSet =
      QueryBooleanProperty<ProgramRuleVariable>(_entities[17].properties[7]);

  /// see [ProgramRuleVariable.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<ProgramRuleVariable, TrackedEntityAttribute>(
          _entities[17].properties[8]);

  /// see [ProgramRuleVariable.dataElement]
  static final dataElement =
      QueryRelationToOne<ProgramRuleVariable, DataElement>(
          _entities[17].properties[9]);

  /// see [ProgramRuleVariable.programStage]
  static final programStage =
      QueryRelationToOne<ProgramRuleVariable, ProgramStage>(
          _entities[17].properties[10]);

  /// see [ProgramRuleVariable.program]
  static final program = QueryRelationToOne<ProgramRuleVariable, Program>(
      _entities[17].properties[11]);
}

/// [ProgramSection] entity fields to define ObjectBox queries.
class ProgramSection_ {
  /// see [ProgramSection.id]
  static final id =
      QueryIntegerProperty<ProgramSection>(_entities[18].properties[0]);

  /// see [ProgramSection.created]
  static final created =
      QueryIntegerProperty<ProgramSection>(_entities[18].properties[1]);

  /// see [ProgramSection.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramSection>(_entities[18].properties[2]);

  /// see [ProgramSection.uid]
  static final uid =
      QueryStringProperty<ProgramSection>(_entities[18].properties[3]);
}

/// [ProgramStage] entity fields to define ObjectBox queries.
class ProgramStage_ {
  /// see [ProgramStage.id]
  static final id =
      QueryIntegerProperty<ProgramStage>(_entities[19].properties[0]);

  /// see [ProgramStage.created]
  static final created =
      QueryIntegerProperty<ProgramStage>(_entities[19].properties[1]);

  /// see [ProgramStage.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramStage>(_entities[19].properties[2]);

  /// see [ProgramStage.uid]
  static final uid =
      QueryStringProperty<ProgramStage>(_entities[19].properties[3]);
}

/// [ProgramStageSection] entity fields to define ObjectBox queries.
class ProgramStageSection_ {
  /// see [ProgramStageSection.id]
  static final id =
      QueryIntegerProperty<ProgramStageSection>(_entities[20].properties[0]);

  /// see [ProgramStageSection.created]
  static final created =
      QueryIntegerProperty<ProgramStageSection>(_entities[20].properties[1]);

  /// see [ProgramStageSection.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramStageSection>(_entities[20].properties[2]);

  /// see [ProgramStageSection.uid]
  static final uid =
      QueryStringProperty<ProgramStageSection>(_entities[20].properties[3]);
}

/// [RelationshipType] entity fields to define ObjectBox queries.
class RelationshipType_ {
  /// see [RelationshipType.id]
  static final id =
      QueryIntegerProperty<RelationshipType>(_entities[21].properties[0]);

  /// see [RelationshipType.created]
  static final created =
      QueryIntegerProperty<RelationshipType>(_entities[21].properties[1]);

  /// see [RelationshipType.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<RelationshipType>(_entities[21].properties[2]);

  /// see [RelationshipType.uid]
  static final uid =
      QueryStringProperty<RelationshipType>(_entities[21].properties[3]);

  /// see [RelationshipType.name]
  static final name =
      QueryStringProperty<RelationshipType>(_entities[21].properties[4]);

  /// see [RelationshipType.code]
  static final code =
      QueryStringProperty<RelationshipType>(_entities[21].properties[5]);

  /// see [RelationshipType.bidirectional]
  static final bidirectional =
      QueryBooleanProperty<RelationshipType>(_entities[21].properties[6]);

  /// see [RelationshipType.referral]
  static final referral =
      QueryBooleanProperty<RelationshipType>(_entities[21].properties[7]);

  /// see [RelationshipType.fromToName]
  static final fromToName =
      QueryStringProperty<RelationshipType>(_entities[21].properties[8]);

  /// see [RelationshipType.toFromName]
  static final toFromName =
      QueryStringProperty<RelationshipType>(_entities[21].properties[9]);

  /// see [RelationshipType.fromConstraint]
  static final fromConstraint =
      QueryRelationToOne<RelationshipType, RelationshipConstraint>(
          _entities[21].properties[10]);

  /// see [RelationshipType.toConstraint]
  static final toConstraint =
      QueryRelationToOne<RelationshipType, RelationshipConstraint>(
          _entities[21].properties[11]);
}

/// [TrackedEntityAttribute] entity fields to define ObjectBox queries.
class TrackedEntityAttribute_ {
  /// see [TrackedEntityAttribute.id]
  static final id =
      QueryIntegerProperty<TrackedEntityAttribute>(_entities[22].properties[0]);

  /// see [TrackedEntityAttribute.created]
  static final created =
      QueryIntegerProperty<TrackedEntityAttribute>(_entities[22].properties[1]);

  /// see [TrackedEntityAttribute.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<TrackedEntityAttribute>(_entities[22].properties[2]);

  /// see [TrackedEntityAttribute.uid]
  static final uid =
      QueryStringProperty<TrackedEntityAttribute>(_entities[22].properties[3]);

  /// see [TrackedEntityAttribute.name]
  static final name =
      QueryStringProperty<TrackedEntityAttribute>(_entities[22].properties[4]);

  /// see [TrackedEntityAttribute.code]
  static final code =
      QueryStringProperty<TrackedEntityAttribute>(_entities[22].properties[5]);

  /// see [TrackedEntityAttribute.formName]
  static final formName =
      QueryStringProperty<TrackedEntityAttribute>(_entities[22].properties[6]);

  /// see [TrackedEntityAttribute.shortName]
  static final shortName =
      QueryStringProperty<TrackedEntityAttribute>(_entities[22].properties[7]);

  /// see [TrackedEntityAttribute.description]
  static final description =
      QueryStringProperty<TrackedEntityAttribute>(_entities[22].properties[8]);

  /// see [TrackedEntityAttribute.aggregationType]
  static final aggregationType =
      QueryStringProperty<TrackedEntityAttribute>(_entities[22].properties[9]);

  /// see [TrackedEntityAttribute.valueType]
  static final valueType =
      QueryStringProperty<TrackedEntityAttribute>(_entities[22].properties[10]);

  /// see [TrackedEntityAttribute.zeroIsSignificant]
  static final zeroIsSignificant = QueryBooleanProperty<TrackedEntityAttribute>(
      _entities[22].properties[11]);

  /// see [TrackedEntityAttribute.optionSet]
  static final optionSet =
      QueryRelationToOne<TrackedEntityAttribute, DHIS2OptionSet>(
          _entities[22].properties[12]);

  /// see [TrackedEntityAttribute.attributeValues]
  static final attributeValues =
      QueryRelationToMany<TrackedEntityAttribute, DHIS2AttributeValue>(
          _entities[22].relations[0]);

  /// see [TrackedEntityAttribute.legendSets]
  static final legendSets =
      QueryRelationToMany<TrackedEntityAttribute, LegendSet>(
          _entities[22].relations[1]);
}

/// [TrackedEntityType] entity fields to define ObjectBox queries.
class TrackedEntityType_ {
  /// see [TrackedEntityType.id]
  static final id =
      QueryIntegerProperty<TrackedEntityType>(_entities[23].properties[0]);

  /// see [TrackedEntityType.created]
  static final created =
      QueryIntegerProperty<TrackedEntityType>(_entities[23].properties[1]);

  /// see [TrackedEntityType.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<TrackedEntityType>(_entities[23].properties[2]);

  /// see [TrackedEntityType.uid]
  static final uid =
      QueryStringProperty<TrackedEntityType>(_entities[23].properties[3]);

  /// see [TrackedEntityType.name]
  static final name =
      QueryStringProperty<TrackedEntityType>(_entities[23].properties[4]);

  /// see [TrackedEntityType.description]
  static final description =
      QueryStringProperty<TrackedEntityType>(_entities[23].properties[5]);

  /// see [TrackedEntityType.trackedEntityTypeAttributes]
  static final trackedEntityTypeAttributes =
      QueryRelationToMany<TrackedEntityType, TrackedEntityTypeAttribute>(
          _entities[23].relations[0]);
}

/// [TrackedEntityTypeAttribute] entity fields to define ObjectBox queries.
class TrackedEntityTypeAttribute_ {
  /// see [TrackedEntityTypeAttribute.id]
  static final id = QueryIntegerProperty<TrackedEntityTypeAttribute>(
      _entities[24].properties[0]);

  /// see [TrackedEntityTypeAttribute.created]
  static final created = QueryIntegerProperty<TrackedEntityTypeAttribute>(
      _entities[24].properties[1]);

  /// see [TrackedEntityTypeAttribute.lastUpdated]
  static final lastUpdated = QueryIntegerProperty<TrackedEntityTypeAttribute>(
      _entities[24].properties[2]);

  /// see [TrackedEntityTypeAttribute.uid]
  static final uid = QueryStringProperty<TrackedEntityTypeAttribute>(
      _entities[24].properties[3]);

  /// see [TrackedEntityTypeAttribute.trackedEntityType]
  static final trackedEntityType =
      QueryRelationToOne<TrackedEntityTypeAttribute, TrackedEntityType>(
          _entities[24].properties[4]);

  /// see [TrackedEntityTypeAttribute.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<TrackedEntityTypeAttribute, TrackedEntityAttribute>(
          _entities[24].properties[5]);

  /// see [TrackedEntityTypeAttribute.valueType]
  static final valueType = QueryStringProperty<TrackedEntityTypeAttribute>(
      _entities[24].properties[6]);

  /// see [TrackedEntityTypeAttribute.displayName]
  static final displayName = QueryStringProperty<TrackedEntityTypeAttribute>(
      _entities[24].properties[7]);

  /// see [TrackedEntityTypeAttribute.displayShortName]
  static final displayShortName =
      QueryStringProperty<TrackedEntityTypeAttribute>(
          _entities[24].properties[8]);

  /// see [TrackedEntityTypeAttribute.mandatory]
  static final mandatory = QueryBooleanProperty<TrackedEntityTypeAttribute>(
      _entities[24].properties[9]);
}

/// [RelationshipConstraint] entity fields to define ObjectBox queries.
class RelationshipConstraint_ {
  /// see [RelationshipConstraint.id]
  static final id =
      QueryIntegerProperty<RelationshipConstraint>(_entities[25].properties[0]);

  /// see [RelationshipConstraint.relationshipEntity]
  static final relationshipEntity =
      QueryStringProperty<RelationshipConstraint>(_entities[25].properties[1]);

  /// see [RelationshipConstraint.name]
  static final name =
      QueryStringProperty<RelationshipConstraint>(_entities[25].properties[2]);

  /// see [RelationshipConstraint.trackedEntityType]
  static final trackedEntityType =
      QueryRelationToOne<RelationshipConstraint, TrackedEntityType>(
          _entities[25].properties[3]);

  /// see [RelationshipConstraint.relationshipType]
  static final relationshipType =
      QueryRelationToOne<RelationshipConstraint, RelationshipType>(
          _entities[25].properties[4]);

  /// see [RelationshipConstraint.program]
  static final program = QueryRelationToOne<RelationshipConstraint, Program>(
      _entities[25].properties[5]);

  /// see [RelationshipConstraint.programStage]
  static final programStage =
      QueryRelationToOne<RelationshipConstraint, ProgramStage>(
          _entities[25].properties[6]);
}
