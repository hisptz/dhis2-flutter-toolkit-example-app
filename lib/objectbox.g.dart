// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/data/attributeValue.dart';
import 'models/data/dataValue.dart';
import 'models/data/enrollment.dart';
import 'models/data/event.dart';
import 'models/data/relationship.dart';
import 'models/data/trackedEntity.dart';
import 'models/data/trackedEntityAttributeValue.dart';
import 'models/metadata/dataElement.dart';
import 'models/metadata/legend.dart';
import 'models/metadata/legendSet.dart';
import 'models/metadata/option.dart';
import 'models/metadata/optionSet.dart';
import 'models/metadata/organisationUnit.dart';
import 'models/metadata/organisationUnitGroup.dart';
import 'models/metadata/organisationUnitLevel.dart';
import 'models/metadata/program.dart';
import 'models/metadata/programRule.dart';
import 'models/metadata/programRuleAction.dart';
import 'models/metadata/programRuleVariable.dart';
import 'models/metadata/programSection.dart';
import 'models/metadata/programStage.dart';
import 'models/metadata/programStageDataElement.dart';
import 'models/metadata/programStageSection.dart';
import 'models/metadata/programTrackedEntityAttribute.dart';
import 'models/metadata/relationshipType.dart';
import 'models/metadata/systemInfo.dart';
import 'models/metadata/trackedEntityAttributes.dart';
import 'models/metadata/trackedEntityType.dart';
import 'models/metadata/trackedEntityTypeAttribute.dart';
import 'models/metadata/user.dart';
import 'models/metadata/userGroup.dart';
import 'models/metadata/userRole.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8708970595268413618),
      name: 'D2DataElement',
      lastPropertyId: const obx_int.IdUid(16, 4836163895395678300),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3237143281358775906),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 434965704531564608),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6912955523811649739),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 7345459301800807822)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4942181839412036064),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8874484159216155061),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8452083374837790374),
            name: 'formName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3433045981788632619),
            name: 'shortName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7467472690786655049),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2445540139887459168),
            name: 'aggregationType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6770523857001569109),
            name: 'valueType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7274340409714428568),
            name: 'domainType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2166316622938733051),
            name: 'zeroIsSignificant',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5110958918846567987),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8826259395392223757),
            relationTarget: 'D2OptionSet'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8043615298797374071),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8383206712724766067),
            name: 'displayFormName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 4836163895395678300),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 1762720854348797057),
            name: 'legendSets',
            targetId: const obx_int.IdUid(6, 2955999403549660979)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(26, 6214499177878275374),
            name: 'dataValues',
            targetId: const obx_int.IdUid(2, 3504265121944180400))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3504265121944180400),
      name: 'D2DataValue',
      lastPropertyId: const obx_int.IdUid(12, 5363133612749926742),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4330892306127644960),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7987492290956622251),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5575741047040270512),
            name: 'providedElsewhere',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5049937474500015005),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6971087132134275671),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6487529269312034587),
            name: 'eventId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(60, 7328732501564717582),
            relationTarget: 'D2Event'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7461732206814233176),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(61, 6638229285257689023),
            relationTarget: 'D2DataElement'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1220524326799596339),
            name: 'synced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5363133612749926742),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(104, 284297753282438866))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1663155969181960685),
      name: 'D2Enrollment',
      lastPropertyId: const obx_int.IdUid(25, 4473541613204756299),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6865999552311029022),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6943217339877337460),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 6967472152991746614)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7809385819915414280),
            name: 'deleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2322420653650055531),
            name: 'followup',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7897016218120950420),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7135934054899877270),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 9217879222393053297),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 3059014037600028457),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3734544599732808140),
            name: 'enrolledAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 4452062834423069906),
            name: 'occurredAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 305389044243354768),
            name: 'trackedEntityId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(62, 8899505281667102012),
            relationTarget: 'D2TrackedEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6168278436642439702),
            name: 'synced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 3522904329757222728),
            name: 'orgUnitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(89, 1213347873640978773),
            relationTarget: 'D2OrgUnit'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 4473541613204756299),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(90, 8868934273064290758),
            relationTarget: 'D2Program')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'events', srcEntity: 'D2Event', srcField: 'enrollment')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6304522207734519244),
      name: 'D2Event',
      lastPropertyId: const obx_int.IdUid(31, 9036212427080013200),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8877117605298822242),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7744788388990533124),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1621039495650608533),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5549719876901838578),
            name: 'attributeCategoryOptions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3386585754622661754),
            name: 'deleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5060500567608924429),
            name: 'followup',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2653412457443655749),
            name: 'attributeOptionCombo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 4736871008878128768),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 447471941863827908),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 559547397789783184),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7055390795260780260),
            name: 'scheduledAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 2181809668711792958),
            name: 'occurredAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 5818177495342814815),
            name: 'enrollmentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(63, 4526079622760701607),
            relationTarget: 'D2Enrollment'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 2727133570442573470),
            name: 'trackedEntityId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(64, 5245700874655458143),
            relationTarget: 'D2TrackedEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 8385328007045080925),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(65, 3483869521855658132),
            relationTarget: 'D2Program'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 1632560480152006133),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(66, 7060712807550520167),
            relationTarget: 'D2ProgramStage'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 618151849287962582),
            name: 'synced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 9036212427080013200),
            name: 'orgUnitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(91, 2302575302614259228),
            relationTarget: 'D2OrgUnit')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'dataValues', srcEntity: 'D2DataValue', srcField: 'event')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 6463845131632959574),
      name: 'D2Legend',
      lastPropertyId: const obx_int.IdUid(10, 3998163050136893883),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3055664669660913544),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1770053850035357230),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6488122551454591548),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5816975881721256687),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6456817722346328758),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8312526739515968583),
            name: 'startValue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6862300563026126447),
            name: 'endValue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6200245502871153177),
            name: 'color',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2027385740244780475),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3998163050136893883),
            name: 'legendSetId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(93, 4802588394710860707),
            relationTarget: 'D2LegendSet')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2955999403549660979),
      name: 'D2LegendSet',
      lastPropertyId: const obx_int.IdUid(7, 5783770404677488417),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1179782904140110368),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 914893575012111987),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5777250540747655488),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5733302279720076),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(6, 1641527638955592268)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5694383871882496717),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1231552271507134270),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5783770404677488417),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'legends', srcEntity: 'D2Legend', srcField: 'legendSet')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 6934215928104773852),
      name: 'D2Option',
      lastPropertyId: const obx_int.IdUid(9, 3726387586992051689),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4977787569817290701),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3678646481513907750),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 761541648359501070),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1482591165018911060),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4792458806405533440),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1181762902404244627),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5878829284474657443),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6138354265934847757),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 4897148520981117290),
            relationTarget: 'D2OptionSet'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3726387586992051689),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 8856427146926107122),
      name: 'D2OptionSet',
      lastPropertyId: const obx_int.IdUid(8, 2841815581299527373),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 509989377691650149),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1986314777110439433),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5650057610515948133),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4346996772019057148),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8715412258946732420),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5993380243057190596),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6195241322698639644),
            name: 'valueType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2841815581299527373),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(8, 8138111384171345109),
            name: 'options',
            targetId: const obx_int.IdUid(7, 6934215928104773852))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 8833208346821772019),
      name: 'D2OrganisationUnitLevel',
      lastPropertyId: const obx_int.IdUid(7, 5415752639359467953),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3536222465697845149),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3094163874575161369),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6741540014078763877),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(10, 5576612002691735497)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7152484996235814059),
            name: 'level',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8959288526343196454),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7932141835164997351),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5415752639359467953),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 3213498343638079503),
      name: 'D2Program',
      lastPropertyId: const obx_int.IdUid(12, 4906739870145554603),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8867924904758611921),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2119710796412118215),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8064360552060863010),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 142504705893208190),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(11, 7432120324060255125)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8110827743349472859),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5567583720269357659),
            name: 'shortName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7307207946394191157),
            name: 'accessLevel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6660584091701722049),
            name: 'programType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6528448053756187874),
            name: 'onlyEnrollOnce',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7046240337664989244),
            name: 'selectEnrollmentDatesInFuture',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8830853787814593461),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4906739870145554603),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(102, 426424824265261228),
            relationTarget: 'D2TrackedEntityType')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(10, 6872592540898873191),
            name: 'organisationUnits',
            targetId: const obx_int.IdUid(39, 5609228543918958463))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'programStages',
            srcEntity: 'D2ProgramStage',
            srcField: 'program'),
        obx_int.ModelBacklink(
            name: 'programSections',
            srcEntity: 'D2ProgramSection',
            srcField: 'program'),
        obx_int.ModelBacklink(
            name: 'programTrackedEntityAttributes',
            srcEntity: 'D2ProgramTrackedEntityAttribute',
            srcField: 'program'),
        obx_int.ModelBacklink(
            name: 'events', srcEntity: 'D2Event', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 2367137945950500402),
      name: 'D2ProgramRule',
      lastPropertyId: const obx_int.IdUid(9, 870335153590470176),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2546115261831800624),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5403686562432861088),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2843220474758493960),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3355726687600788684),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6407673983458294646),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8051404718686976427),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2143501073004752871),
            name: 'condition',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 603859881864897823),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(12, 4251073284836997742),
            relationTarget: 'D2Program'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 870335153590470176),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'programRuleActions',
            srcEntity: 'D2ProgramRuleAction',
            srcField: 'programRule')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 2339021624932543244),
      name: 'D2ProgramRuleAction',
      lastPropertyId: const obx_int.IdUid(14, 2122707057759774216),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5135837708084021588),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2512718973611431877),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8635835787247465181),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7595672314220983379),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2878782120129633971),
            name: 'programRuleActionType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5458743814781542397),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2759276477208832076),
            name: 'data',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8536706041744127543),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4081756604814277708),
            name: 'programRuleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(13, 4225163318158489660),
            relationTarget: 'D2ProgramRule'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1430286420205814690),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(14, 170228637912838738),
            relationTarget: 'D2DataElement'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7930074986214773952),
            name: 'programStageSectionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(15, 2284093448820766458),
            relationTarget: 'D2ProgramStageSection'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1765325643296542),
            name: 'programSectionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(16, 1359577945723726563),
            relationTarget: 'D2ProgramSection'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7555783452385566788),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(17, 4343443457032499324),
            relationTarget: 'D2TrackedEntityAttribute'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2122707057759774216),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 6086917195342334991),
      name: 'D2ProgramRuleVariable',
      lastPropertyId: const obx_int.IdUid(13, 3411441796216373867),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4892314500556719914),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3961647840981266922),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4500438061722253123),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2255783209130304197),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(18, 1217131482766603077)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 958210285407864445),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3346497609673430648),
            name: 'programRuleVariableSourceType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8012841888800937879),
            name: 'valueType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4679349859112133151),
            name: 'useCodeForOptionSet',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5116524755179602086),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(19, 8375962032597929731),
            relationTarget: 'D2TrackedEntityAttribute'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 825766741702681779),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(20, 1387381809605127812),
            relationTarget: 'D2DataElement'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5634741378229416198),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(21, 5844824785750845436),
            relationTarget: 'D2ProgramStage'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4219759031956130197),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(22, 7104348412728946398),
            relationTarget: 'D2Program'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3411441796216373867),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 3228057035992079370),
      name: 'D2ProgramSection',
      lastPropertyId: const obx_int.IdUid(8, 2719475611108593476),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3470393100108891322),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2067268455309271628),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5126779053722608935),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5280069311083705821),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(23, 6213552541516803716)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 323861984424689298),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 817276033432982040),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7533098286445593429),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(24, 3689205267722051604),
            relationTarget: 'D2Program'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2719475611108593476),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(15, 1866127529336583761),
            name: 'trackedEntityAttributes',
            targetId: const obx_int.IdUid(24, 1209156614428117453))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 6440952646582337145),
      name: 'D2ProgramStage',
      lastPropertyId: const obx_int.IdUid(12, 7568424595656788983),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1304971085427548252),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6184724012796045391),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7674493367162410022),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8022620871834039862),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(25, 3656401387176399174)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 739382660334322170),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3471035325377575174),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8294565230846673565),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1766217513568997925),
            name: 'validationStrategy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4830515709320031785),
            name: 'featureType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1468179122096405077),
            name: 'reportDateToUse',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6862469578719765065),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(26, 900287166005392790),
            relationTarget: 'D2Program'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7568424595656788983),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'programStageDataElements',
            srcEntity: 'D2ProgramStageDataElement',
            srcField: 'programStage'),
        obx_int.ModelBacklink(
            name: 'programStageSections',
            srcEntity: 'D2ProgramStageSection',
            srcField: 'programStage'),
        obx_int.ModelBacklink(
            name: 'events', srcEntity: 'D2Event', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 7728703971167968062),
      name: 'D2ProgramStageDataElement',
      lastPropertyId: const obx_int.IdUid(9, 428453946537295249),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2772914491620902408),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5638112800884677247),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 891778317125087054),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4985507909945930654),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2087539349417465502),
            name: 'compulsory',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5241525823468833065),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2795392664645363383),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(27, 4777797607736294467),
            relationTarget: 'D2ProgramStage'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2824649010322955435),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(28, 7054656792331284714),
            relationTarget: 'D2DataElement'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 428453946537295249),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(19, 3609130320680178626),
      name: 'D2ProgramStageSection',
      lastPropertyId: const obx_int.IdUid(8, 3744298980611173602),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4933882894455704864),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9122967518570129475),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6484241135809858372),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7980576706494064701),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(29, 9080959096129877498)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8864002850035382096),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1434881570034964533),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3651135674661225270),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(30, 2227328944950754396),
            relationTarget: 'D2ProgramStage'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3744298980611173602),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(18, 3316806563538886883),
            name: 'dataElements',
            targetId: const obx_int.IdUid(1, 8708970595268413618))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(20, 563733550334038655),
      name: 'D2ProgramTrackedEntityAttribute',
      lastPropertyId: const obx_int.IdUid(12, 8543228547559920396),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 543329502247133395),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8289307539518046949),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1944781943241533638),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5742374197617558003),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9153833274590737674),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 686048214795695416),
            name: 'displayInList',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5209660474941641703),
            name: 'mandatory',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7361624611921743300),
            name: 'searchable',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2324025457843680269),
            name: 'renderOptionAsRadio',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3665127392579465367),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(31, 6793417418398885178),
            relationTarget: 'D2Program'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6871476654524959986),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(32, 8526849754806683379),
            relationTarget: 'D2TrackedEntityAttribute'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8543228547559920396),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(22, 4073851612336976734),
      name: 'D2RelationshipType',
      lastPropertyId: const obx_int.IdUid(25, 2387371551949892258),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3440911624722136536),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1114387405263899596),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8998454295311135938),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5795395756859124088),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(37, 5149343105344816979)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1209449138849847597),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1856910721529840249),
            name: 'referral',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 936955428884693687),
            name: 'fromToName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3403906523932786365),
            name: 'toFromName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 7437280439870745491),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 6222139543883694786),
            name: 'fromTrackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(96, 6826346541461422382),
            relationTarget: 'D2TrackedEntityType'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2194186015867167545),
            name: 'fromProgramId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(97, 2262036699966929336),
            relationTarget: 'D2Program'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5946816016694084211),
            name: 'fromProgramStageId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(98, 314042465260419107),
            relationTarget: 'D2ProgramStage'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 7402141046645379731),
            name: 'toTrackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(99, 1213775019729281911),
            relationTarget: 'D2TrackedEntityType'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 8715616613745194617),
            name: 'toProgramId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(100, 3856567653072129428),
            relationTarget: 'D2Program'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7087577013035862361),
            name: 'toProgramStageId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(101, 435121403601169335),
            relationTarget: 'D2ProgramStage'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 1909599994057002426),
            name: 'fromRelationshipEntity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6679297122752289912),
            name: 'toRelationshipEntity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 2018133732371442111),
            name: 'displayFromToName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 2387371551949892258),
            name: 'displayToFromName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(23, 1440142639369401750),
      name: 'D2SystemInfo',
      lastPropertyId: const obx_int.IdUid(8, 1872353239169765292),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1454739475998985814),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8500404170148987247),
            name: 'version',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2008674721984818787),
            name: 'revision',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6411167258102877076),
            name: 'calendar',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3744787814295218256),
            name: 'dateFormat',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8137256838097052388),
            name: 'contextPath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3427842096550198022),
            name: 'systemId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(40, 1272085853801991155)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1872353239169765292),
            name: 'systemName',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(41, 1700695271518527536))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(24, 1209156614428117453),
      name: 'D2TrackedEntityAttribute',
      lastPropertyId: const obx_int.IdUid(15, 140510034646605740),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 761145623669876410),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3875171361257556958),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1942481354588695697),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4216444653061911168),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(42, 7777535559804659998)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8633038858224865070),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 488625162671014489),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5980111193930058679),
            name: 'formName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6775180113428702973),
            name: 'shortName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3213866536884655255),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5108490721531589674),
            name: 'aggregationType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5025577473397299853),
            name: 'valueType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6649855399931819062),
            name: 'zeroIsSignificant',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 331018019231518042),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(43, 4013023362587489746),
            relationTarget: 'D2OptionSet'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 2298758489590604478),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 140510034646605740),
            name: 'displayFormName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(19, 3010181393623971935),
            name: 'legendSets',
            targetId: const obx_int.IdUid(6, 2955999403549660979))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(25, 3195768304427450112),
      name: 'D2TrackedEntityAttributeValue',
      lastPropertyId: const obx_int.IdUid(14, 5805946939219195029),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3087114695372548124),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 151020069063884121),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 499050349582592626),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5087401904435646722),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4118654015134521588),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(67, 4694609698882090412),
            relationTarget: 'D2TrackedEntityAttribute'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7565238440618531892),
            name: 'trackedEntityId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(68, 4564061379773709081),
            relationTarget: 'D2TrackedEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4391847928270235023),
            name: 'synced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5805946939219195029),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(26, 3342733218272400527),
      name: 'D2TrackedEntityType',
      lastPropertyId: const obx_int.IdUid(7, 1519552249541258890),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 67183381099929108),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7673540452873614486),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9180920751977248250),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3316763523802475405),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(45, 8878629030193758735)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2457767831362859695),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7952085484595042943),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1519552249541258890),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(20, 8477432839712982135),
            name: 'trackedEntityTypeAttributes',
            targetId: const obx_int.IdUid(27, 6525493507282150530))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(27, 6525493507282150530),
      name: 'D2TrackedEntityTypeAttribute',
      lastPropertyId: const obx_int.IdUid(10, 3183660546642781445),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1432974807055998306),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2828325909279044332),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5132752418751131883),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1680905343347859231),
            name: 'uid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3600506353701158903),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(46, 1673994406059642726),
            relationTarget: 'D2TrackedEntityType'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6830137122159267740),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(47, 566479155782397544),
            relationTarget: 'D2TrackedEntityAttribute'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3239977016437758191),
            name: 'valueType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4589202579068815382),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4599870665989326572),
            name: 'displayShortName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3183660546642781445),
            name: 'mandatory',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(28, 141229966601969012),
      name: 'D2User',
      lastPropertyId: const obx_int.IdUid(9, 1641911585758489742),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7324048697589841190),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7263105685918556329),
            name: 'username',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4363810940850321008),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2046683302136337207),
            name: 'surname',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2505965449881121884),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5334866505312413743),
            name: 'authorities',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1913825490907226970),
            name: 'programs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3951140668026135536),
            name: 'organisationUnits',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1641911585758489742),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(48, 320836077181200231))
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(21, 8145947041263212819),
            name: 'userRoles',
            targetId: const obx_int.IdUid(30, 559213160195182761)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(22, 5828123738605355997),
            name: 'userGroups',
            targetId: const obx_int.IdUid(29, 7910983801485920217))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(29, 7910983801485920217),
      name: 'D2UserGroup',
      lastPropertyId: const obx_int.IdUid(6, 7010889518962685756),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5317162278120858583),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7051550108451112101),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(49, 6087506715610913581)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 159403127374018375),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(50, 4186311981690327010)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5193329792991577549),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4424427291853948477),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7010889518962685756),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(30, 559213160195182761),
      name: 'D2UserRole',
      lastPropertyId: const obx_int.IdUid(7, 3465246161658626319),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3610009612195423640),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4877091444850609247),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(51, 4270447790286237483)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3812750890843868179),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 359214617906982748),
            name: 'authorities',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5182550289999807156),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5690422923705857854),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3465246161658626319),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(36, 7927845931794900705),
      name: 'D2AttributeValue',
      lastPropertyId: const obx_int.IdUid(3, 6551756914912340541),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5746148389652170866),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7633221146472298370),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(85, 8496734553892720487),
            relationTarget: 'D2DataElement'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6551756914912340541),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(86, 6968556734957516659),
            relationTarget: 'D2TrackedEntityAttribute')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(37, 7421924221224556190),
      name: 'D2Relationship',
      lastPropertyId: const obx_int.IdUid(12, 8409185421240647208),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5641383225596669508),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8776747660037368835),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 702354750220485716),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5838902563737615730),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(87, 8738803727960393744)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6256879344191089140),
            name: 'relationshipName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7759059706114073185),
            name: 'bidirectional',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4206381192218562351),
            name: 'relationshipType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1863844038251043395),
            name: 'fromType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6426185960558680115),
            name: 'fromId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6703890080160585391),
            name: 'toType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2627170903828435516),
            name: 'toId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8409185421240647208),
            name: 'synced',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(38, 1373460908356869576),
      name: 'D2TrackedEntity',
      lastPropertyId: const obx_int.IdUid(14, 5049054988691460903),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7410975402037063228),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3185731573438858896),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6914901524919976994),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4303590529516644006),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(88, 7001122776610672884)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7734083470715492788),
            name: 'potentialDuplicate',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4732023465734578448),
            name: 'deleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 792141173574313391),
            name: 'inactive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3196558629111098065),
            name: 'synced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4311274317218372080),
            name: 'orgUnitId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(92, 8348706797632181549),
            relationTarget: 'D2OrgUnit'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5049054988691460903),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(103, 8479977822172307133),
            relationTarget: 'D2TrackedEntityType')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'enrollments',
            srcEntity: 'D2Enrollment',
            srcField: 'trackedEntity'),
        obx_int.ModelBacklink(
            name: 'attributes',
            srcEntity: 'D2TrackedEntityAttributeValue',
            srcField: 'trackedEntity'),
        obx_int.ModelBacklink(
            name: 'events', srcEntity: 'D2Event', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(39, 5609228543918958463),
      name: 'D2OrgUnit',
      lastPropertyId: const obx_int.IdUid(9, 6039904786605240373),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2878973780575292230),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4357229808803306143),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2488961119446239908),
            name: 'shortName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1309514244057765819),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(94, 2297540620566351073)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6018613193717307107),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1155235020667129984),
            name: 'level',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5973528905845306515),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5172720474700777847),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6039904786605240373),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(40, 4438887848042100616),
      name: 'D2OrgUnitGroup',
      lastPropertyId: const obx_int.IdUid(6, 2429661936750521605),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4709611923185983039),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2155544460097830634),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8853889079915705877),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(95, 1518516759550183383)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5970091648941404944),
            name: 'created',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8261345202896613863),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2429661936750521605),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(29, 4443409743887074129),
            name: 'organisationUnits',
            targetId: const obx_int.IdUid(39, 5609228543918958463))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(40, 4438887848042100616),
      lastIndexId: const obx_int.IdUid(104, 284297753282438866),
      lastRelationId: const obx_int.IdUid(29, 4443409743887074129),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        7762875921749888060,
        6642671730047329437,
        1950555748216824811,
        2389714016099780980,
        5685057996273379050,
        4543984519905234311,
        6915836513319234812,
        9207217032104140019
      ],
      retiredIndexUids: const [
        4342976014228701150,
        6954985060894839179,
        7425502513311282148,
        5693855032075461858,
        2776772408156024632,
        1415120183143656452,
        5425911845188328464,
        5761334449350551316,
        2000181402574178394,
        3484978538090580841,
        415363511025461184,
        3901348611241202563,
        5608235184790383898,
        4413628903678143178,
        5172954086412795156,
        6194277782992654402,
        3590571779487741156,
        3865246362274815717,
        5062409783438786624
      ],
      retiredPropertyUids: const [
        640663780519544382,
        8240349012653603499,
        305501785527956602,
        8768769990704014381,
        489587703066096403,
        43563933498397924,
        6166764898820776133,
        3422186013666351030,
        397631970935096653,
        7680770794996873273,
        4429919222818758330,
        7769564136782138055,
        51590930681791870,
        4803439368334783350,
        6664998143902873458,
        1496665903628359405,
        516052576367376841,
        6475544678198117302,
        291005896213248420,
        4452888213431156868,
        6034823280496118074,
        4785675219869915866,
        6482304931493871068,
        4154023990484895259,
        5128498759260619520,
        3095759703109361183,
        1631143691260079959,
        2136624110965097486,
        3201082011873749560,
        8650283323339541865,
        2729469548044609812,
        3609570913173358015,
        933880678327404570,
        796968129092296748,
        1879163670997772369,
        7798497278143472099,
        333911854445555521,
        5555639661162417481,
        535862573152675789,
        3820175658032604606,
        4452387469782644429,
        3662083485185160906,
        5688641459870621206,
        5832479130040771725,
        6263109348462774413,
        7841891143317287399,
        2677848091201363147,
        1959954803864509963,
        4369043332416227179,
        713225359819263091,
        2503959074594191253,
        8488264359237383272,
        8796114370569263164,
        7549188776151658187,
        4046825531936178190,
        8837022442682319755,
        3884739214059828484,
        728139221694710482,
        9051162778208595655,
        3083240602611988442,
        3918193849015213840,
        4354329426403309722,
        6671946046750356365,
        6060292385701169610,
        4130759143681541526,
        5078181212350736252,
        5476296751144679833,
        8912528255139581523,
        8038983291310662721,
        7507047721000755530,
        1945099070100715767,
        613895253510243976,
        3561674341253462146,
        3631353664430662917,
        8407163552694724171,
        2504752897804572738,
        8453420416935974719,
        2716010193377614723,
        4433930543704613761,
        8355035083546886852,
        3746109662932558515,
        3973816791637689143,
        8983796542616132055,
        7821959015073596816,
        8956596001832128904,
        11867750021801536,
        8926818229992673157,
        3329837506930604511,
        729257947861019304,
        4184516321023167142,
        6178217052160760338,
        108075845871462933,
        1397573248803007676,
        3697726145278571564,
        3345906194793719403,
        6456436141491513094,
        1885122739776680256,
        1529249219506375227,
        9013897867608743451,
        8859858054639662811,
        1162278754027618343,
        7538566222141083158,
        7349461465269057066,
        1709648437305770172,
        8483597781873109485,
        8283834417454707520,
        662644740625578489,
        5872169389505894670,
        8849677971131034832,
        8703352410903628113,
        4713838509211956277,
        677584511719110522,
        6722383960871463825,
        8169649373673759501,
        2450615786460859343
      ],
      retiredRelationUids: const [
        1443067466517591468,
        6374321285365871346,
        4913428903465204334,
        24484946896862319,
        5783147081460964782,
        7053966055083793025,
        6703153274877028882,
        276019404732129211,
        4290133851120675811,
        4748488664597894263,
        5137975099450215402,
        8741056730089980939,
        2549562181531477861,
        4750695779070416988,
        2783620968812190578
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    D2DataElement: obx_int.EntityDefinition<D2DataElement>(
        model: _entities[0],
        toOneRelations: (D2DataElement object) => [object.optionSet],
        toManyRelations: (D2DataElement object) => {
              obx_int.RelInfo<D2DataElement>.toMany(1, object.id):
                  object.legendSets,
              obx_int.RelInfo<D2DataElement>.toMany(26, object.id):
                  object.dataValues
            },
        getId: (D2DataElement object) => object.id,
        setId: (D2DataElement object, int id) {
          object.id = id;
        },
        objectToFB: (D2DataElement object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final formNameOffset = object.formName == null
              ? null
              : fbb.writeString(object.formName!);
          final shortNameOffset = fbb.writeString(object.shortName);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final aggregationTypeOffset = fbb.writeString(object.aggregationType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final domainTypeOffset = fbb.writeString(object.domainType);
          final displayFormNameOffset = object.displayFormName == null
              ? null
              : fbb.writeString(object.displayFormName!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(17);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, codeOffset);
          fbb.addOffset(5, formNameOffset);
          fbb.addOffset(6, shortNameOffset);
          fbb.addOffset(7, descriptionOffset);
          fbb.addOffset(8, aggregationTypeOffset);
          fbb.addOffset(9, valueTypeOffset);
          fbb.addOffset(10, domainTypeOffset);
          fbb.addBool(11, object.zeroIsSignificant);
          fbb.addInt64(12, object.optionSet.targetId);
          fbb.addInt64(13, object.id);
          fbb.addOffset(14, displayFormNameOffset);
          fbb.addOffset(15, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final formNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final aggregationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final domainTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final zeroIsSignificantParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final displayFormNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final object = D2DataElement(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              codeParam,
              formNameParam,
              shortNameParam,
              descriptionParam,
              aggregationTypeParam,
              valueTypeParam,
              domainTypeParam,
              zeroIsSignificantParam,
              displayFormNameParam,
              displayNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.optionSet.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2DataElement>(
              object.legendSets,
              store,
              obx_int.RelInfo<D2DataElement>.toMany(1, object.id));
          obx_int.InternalToManyAccess.setRelInfo<D2DataElement>(
              object.dataValues,
              store,
              obx_int.RelInfo<D2DataElement>.toMany(26, object.id));
          return object;
        }),
    D2DataValue: obx_int.EntityDefinition<D2DataValue>(
        model: _entities[1],
        toOneRelations: (D2DataValue object) =>
            [object.event, object.dataElement],
        toManyRelations: (D2DataValue object) => {},
        getId: (D2DataValue object) => object.id,
        setId: (D2DataValue object, int id) {
          object.id = id;
        },
        objectToFB: (D2DataValue object, fb.Builder fbb) {
          final valueOffset =
              object.value == null ? null : fbb.writeString(object.value!);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(4, valueOffset);
          fbb.addBool(5, object.providedElsewhere);
          fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.event.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addBool(10, object.synced);
          fbb.addOffset(11, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final providedElsewhereParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final syncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final object = D2DataValue(uidParam, idParam, createdAtParam,
              updatedAtParam, valueParam, providedElsewhereParam, syncedParam);
          object.event.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.event.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          return object;
        }),
    D2Enrollment: obx_int.EntityDefinition<D2Enrollment>(
        model: _entities[2],
        toOneRelations: (D2Enrollment object) =>
            [object.trackedEntity, object.orgUnit, object.program],
        toManyRelations: (D2Enrollment object) => {
              obx_int.RelInfo<D2Event>.toOneBacklink(26, object.id,
                  (D2Event srcObject) => srcObject.enrollment): object.events
            },
        getId: (D2Enrollment object) => object.id,
        setId: (D2Enrollment object, int id) {
          object.id = id;
        },
        objectToFB: (D2Enrollment object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final statusOffset = fbb.writeString(object.status);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          fbb.startTable(26);
          fbb.addInt64(0, object.id);
          fbb.addOffset(4, uidOffset);
          fbb.addBool(11, object.deleted);
          fbb.addBool(12, object.followup);
          fbb.addOffset(14, statusOffset);
          fbb.addOffset(15, notesOffset);
          fbb.addInt64(16, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(17, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(19, object.enrolledAt.millisecondsSinceEpoch);
          fbb.addInt64(20, object.occurredAt.millisecondsSinceEpoch);
          fbb.addInt64(21, object.trackedEntity.targetId);
          fbb.addBool(22, object.synced);
          fbb.addInt64(23, object.orgUnit.targetId);
          fbb.addInt64(24, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0));
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0));
          final enrolledAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0));
          final followupParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final occurredAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0));
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 34);
          final syncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 48, false);
          final object = D2Enrollment(
              uidParam,
              updatedAtParam,
              createdAtParam,
              enrolledAtParam,
              followupParam,
              deletedParam,
              occurredAtParam,
              statusParam,
              notesParam,
              syncedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntity.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
          object.trackedEntity.attach(store);
          object.orgUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          object.orgUnit.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          object.program.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2Enrollment>(
              object.events,
              store,
              obx_int.RelInfo<D2Event>.toOneBacklink(
                  26, object.id, (D2Event srcObject) => srcObject.enrollment));
          return object;
        }),
    D2Event: obx_int.EntityDefinition<D2Event>(
        model: _entities[3],
        toOneRelations: (D2Event object) => [
              object.enrollment,
              object.trackedEntity,
              object.program,
              object.programStage,
              object.orgUnit
            ],
        toManyRelations: (D2Event object) => {
              obx_int.RelInfo<D2DataValue>.toOneBacklink(
                      9, object.id, (D2DataValue srcObject) => srcObject.event):
                  object.dataValues
            },
        getId: (D2Event object) => object.id,
        setId: (D2Event object, int id) {
          object.id = id;
        },
        objectToFB: (D2Event object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final statusOffset = fbb.writeString(object.status);
          final attributeCategoryOptionsOffset =
              fbb.writeString(object.attributeCategoryOptions);
          final attributeOptionComboOffset =
              fbb.writeString(object.attributeOptionCombo);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          fbb.startTable(32);
          fbb.addInt64(0, object.id);
          fbb.addOffset(4, uidOffset);
          fbb.addOffset(14, statusOffset);
          fbb.addOffset(15, attributeCategoryOptionsOffset);
          fbb.addBool(16, object.deleted);
          fbb.addBool(17, object.followup);
          fbb.addOffset(18, attributeOptionComboOffset);
          fbb.addOffset(19, notesOffset);
          fbb.addInt64(20, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(21, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(22, object.scheduledAt?.millisecondsSinceEpoch);
          fbb.addInt64(24, object.occurredAt?.millisecondsSinceEpoch);
          fbb.addInt64(25, object.enrollment.targetId);
          fbb.addInt64(26, object.trackedEntity.targetId);
          fbb.addInt64(27, object.program.targetId);
          fbb.addInt64(28, object.programStage.targetId);
          fbb.addBool(29, object.synced);
          fbb.addInt64(30, object.orgUnit.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final scheduledAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 48);
          final occurredAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 52);
          final attributeCategoryOptionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final attributeOptionComboParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, '');
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0));
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0));
          final followupParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 38, false);
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 42);
          final scheduledAtParam = scheduledAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(scheduledAtValue);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final occurredAtParam = occurredAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(occurredAtValue);
          final syncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 62, false);
          final object = D2Event(
              attributeCategoryOptionsParam,
              attributeOptionComboParam,
              updatedAtParam,
              createdAtParam,
              followupParam,
              deletedParam,
              statusParam,
              notesParam,
              scheduledAtParam,
              uidParam,
              occurredAtParam,
              syncedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.enrollment.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0);
          object.enrollment.attach(store);
          object.trackedEntity.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
          object.trackedEntity.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0);
          object.program.attach(store);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0);
          object.programStage.attach(store);
          object.orgUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0);
          object.orgUnit.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2Event>(
              object.dataValues,
              store,
              obx_int.RelInfo<D2DataValue>.toOneBacklink(
                  9, object.id, (D2DataValue srcObject) => srcObject.event));
          return object;
        }),
    D2Legend: obx_int.EntityDefinition<D2Legend>(
        model: _entities[4],
        toOneRelations: (D2Legend object) => [object.legendSet],
        toManyRelations: (D2Legend object) => {},
        getId: (D2Legend object) => object.id,
        setId: (D2Legend object, int id) {
          object.id = id;
        },
        objectToFB: (D2Legend object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final colorOffset = fbb.writeString(object.color);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addFloat64(5, object.startValue);
          fbb.addFloat64(6, object.endValue);
          fbb.addOffset(7, colorOffset);
          fbb.addOffset(8, displayNameOffset);
          fbb.addInt64(9, object.legendSet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final startValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final endValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final object = D2Legend(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              startValueParam,
              endValueParam,
              colorParam,
              displayNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.legendSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.legendSet.attach(store);
          return object;
        }),
    D2LegendSet: obx_int.EntityDefinition<D2LegendSet>(
        model: _entities[5],
        toOneRelations: (D2LegendSet object) => [],
        toManyRelations: (D2LegendSet object) => {
              obx_int.RelInfo<D2Legend>.toOneBacklink(10, object.id,
                  (D2Legend srcObject) => srcObject.legendSet): object.legends
            },
        getId: (D2LegendSet object) => object.id,
        setId: (D2LegendSet object, int id) {
          object.id = id;
        },
        objectToFB: (D2LegendSet object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final object = D2LegendSet(idParam, createdParam, lastUpdatedParam,
              uidParam, nameParam, codeParam, displayNameParam);
          obx_int.InternalToManyAccess.setRelInfo<D2LegendSet>(
              object.legends,
              store,
              obx_int.RelInfo<D2Legend>.toOneBacklink(
                  10, object.id, (D2Legend srcObject) => srcObject.legendSet));
          return object;
        }),
    D2Option: obx_int.EntityDefinition<D2Option>(
        model: _entities[6],
        toOneRelations: (D2Option object) => [object.optionSet],
        toManyRelations: (D2Option object) => {},
        getId: (D2Option object) => object.id,
        setId: (D2Option object, int id) {
          object.id = id;
        },
        objectToFB: (D2Option object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addInt64(6, object.sortOrder);
          fbb.addInt64(7, object.optionSet.targetId);
          fbb.addOffset(8, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final object = D2Option(idParam, createdParam, lastUpdatedParam,
              uidParam, nameParam, codeParam, sortOrderParam, displayNameParam);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.optionSet.attach(store);
          return object;
        }),
    D2OptionSet: obx_int.EntityDefinition<D2OptionSet>(
        model: _entities[7],
        toOneRelations: (D2OptionSet object) => [],
        toManyRelations: (D2OptionSet object) =>
            {obx_int.RelInfo<D2OptionSet>.toMany(8, object.id): object.options},
        getId: (D2OptionSet object) => object.id,
        setId: (D2OptionSet object, int id) {
          object.id = id;
        },
        objectToFB: (D2OptionSet object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, valueTypeOffset);
          fbb.addOffset(7, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = D2OptionSet(idParam, displayNameParam, createdParam,
              lastUpdatedParam, uidParam, nameParam, codeParam, valueTypeParam);
          obx_int.InternalToManyAccess.setRelInfo<D2OptionSet>(object.options,
              store, obx_int.RelInfo<D2OptionSet>.toMany(8, object.id));
          return object;
        }),
    D2OrganisationUnitLevel: obx_int.EntityDefinition<D2OrganisationUnitLevel>(
        model: _entities[8],
        toOneRelations: (D2OrganisationUnitLevel object) => [],
        toManyRelations: (D2OrganisationUnitLevel object) => {},
        getId: (D2OrganisationUnitLevel object) => object.id,
        setId: (D2OrganisationUnitLevel object, int id) {
          object.id = id;
        },
        objectToFB: (D2OrganisationUnitLevel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.level);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(6, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = D2OrganisationUnitLevel(idParam, displayNameParam,
              nameParam, uidParam, levelParam, createdParam, lastUpdatedParam);

          return object;
        }),
    D2Program: obx_int.EntityDefinition<D2Program>(
        model: _entities[9],
        toOneRelations: (D2Program object) => [object.trackedEntityType],
        toManyRelations: (D2Program object) => {
              obx_int.RelInfo<D2Program>.toMany(10, object.id):
                  object.organisationUnits,
              obx_int.RelInfo<D2ProgramStage>.toOneBacklink(11, object.id,
                      (D2ProgramStage srcObject) => srcObject.program):
                  object.programStages,
              obx_int.RelInfo<D2ProgramSection>.toOneBacklink(7, object.id,
                      (D2ProgramSection srcObject) => srcObject.program):
                  object.programSections,
              obx_int.RelInfo<D2ProgramTrackedEntityAttribute>.toOneBacklink(
                  10,
                  object.id,
                  (D2ProgramTrackedEntityAttribute srcObject) =>
                      srcObject.program): object.programTrackedEntityAttributes,
              obx_int.RelInfo<D2Event>.toOneBacklink(
                      28, object.id, (D2Event srcObject) => srcObject.program):
                  object.events
            },
        getId: (D2Program object) => object.id,
        setId: (D2Program object, int id) {
          object.id = id;
        },
        objectToFB: (D2Program object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final shortNameOffset = fbb.writeString(object.shortName);
          final accessLevelOffset = fbb.writeString(object.accessLevel);
          final programTypeOffset = fbb.writeString(object.programType);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, shortNameOffset);
          fbb.addOffset(6, accessLevelOffset);
          fbb.addOffset(7, programTypeOffset);
          fbb.addBool(8, object.onlyEnrollOnce);
          fbb.addBool(9, object.selectEnrollmentDatesInFuture);
          fbb.addOffset(10, displayNameOffset);
          fbb.addInt64(11, object.trackedEntityType.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final accessLevelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final programTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final onlyEnrollOnceParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final object = D2Program(
              createdParam,
              lastUpdatedParam,
              uidParam,
              accessLevelParam,
              nameParam,
              shortNameParam,
              programTypeParam,
              onlyEnrollOnceParam,
              displayNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..selectEnrollmentDatesInFuture =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22);
          object.trackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.trackedEntityType.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2Program>(
              object.organisationUnits,
              store,
              obx_int.RelInfo<D2Program>.toMany(10, object.id));
          obx_int.InternalToManyAccess.setRelInfo<D2Program>(
              object.programStages,
              store,
              obx_int.RelInfo<D2ProgramStage>.toOneBacklink(11, object.id,
                  (D2ProgramStage srcObject) => srcObject.program));
          obx_int.InternalToManyAccess.setRelInfo<D2Program>(
              object.programSections,
              store,
              obx_int.RelInfo<D2ProgramSection>.toOneBacklink(7, object.id,
                  (D2ProgramSection srcObject) => srcObject.program));
          obx_int.InternalToManyAccess.setRelInfo<D2Program>(
              object.programTrackedEntityAttributes,
              store,
              obx_int.RelInfo<D2ProgramTrackedEntityAttribute>.toOneBacklink(
                  10,
                  object.id,
                  (D2ProgramTrackedEntityAttribute srcObject) =>
                      srcObject.program));
          obx_int.InternalToManyAccess.setRelInfo<D2Program>(
              object.events,
              store,
              obx_int.RelInfo<D2Event>.toOneBacklink(
                  28, object.id, (D2Event srcObject) => srcObject.program));
          return object;
        }),
    D2ProgramRule: obx_int.EntityDefinition<D2ProgramRule>(
        model: _entities[10],
        toOneRelations: (D2ProgramRule object) => [object.program],
        toManyRelations: (D2ProgramRule object) => {
              obx_int.RelInfo<D2ProgramRuleAction>.toOneBacklink(9, object.id,
                      (D2ProgramRuleAction srcObject) => srcObject.programRule):
                  object.programRuleActions
            },
        getId: (D2ProgramRule object) => object.id,
        setId: (D2ProgramRule object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramRule object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final conditionOffset = fbb.writeString(object.condition);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, conditionOffset);
          fbb.addInt64(7, object.program.targetId);
          fbb.addOffset(8, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final conditionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = D2ProgramRule(
              idParam,
              displayNameParam,
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              descriptionParam,
              conditionParam);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.program.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2ProgramRule>(
              object.programRuleActions,
              store,
              obx_int.RelInfo<D2ProgramRuleAction>.toOneBacklink(9, object.id,
                  (D2ProgramRuleAction srcObject) => srcObject.programRule));
          return object;
        }),
    D2ProgramRuleAction: obx_int.EntityDefinition<D2ProgramRuleAction>(
        model: _entities[11],
        toOneRelations: (D2ProgramRuleAction object) => [
              object.programRule,
              object.dataElement,
              object.programStageSection,
              object.programSection,
              object.trackedEntityAttribute
            ],
        toManyRelations: (D2ProgramRuleAction object) => {},
        getId: (D2ProgramRuleAction object) => object.id,
        setId: (D2ProgramRuleAction object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramRuleAction object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final programRuleActionTypeOffset =
              fbb.writeString(object.programRuleActionType);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, programRuleActionTypeOffset);
          fbb.addOffset(5, contentOffset);
          fbb.addOffset(6, dataOffset);
          fbb.addOffset(7, locationOffset);
          fbb.addInt64(8, object.programRule.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addInt64(10, object.programStageSection.targetId);
          fbb.addInt64(11, object.programSection.targetId);
          fbb.addInt64(12, object.trackedEntityAttribute.targetId);
          fbb.addOffset(13, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final programRuleActionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = D2ProgramRuleAction(
              idParam,
              displayNameParam,
              createdParam,
              lastUpdatedParam,
              uidParam,
              programRuleActionTypeParam,
              contentParam,
              dataParam,
              locationParam);
          object.programRule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.programRule.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          object.programStageSection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.programStageSection.attach(store);
          object.programSection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.programSection.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    D2ProgramRuleVariable: obx_int.EntityDefinition<D2ProgramRuleVariable>(
        model: _entities[12],
        toOneRelations: (D2ProgramRuleVariable object) => [
              object.trackedEntityAttribute,
              object.dataElement,
              object.programStage,
              object.program
            ],
        toManyRelations: (D2ProgramRuleVariable object) => {},
        getId: (D2ProgramRuleVariable object) => object.id,
        setId: (D2ProgramRuleVariable object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramRuleVariable object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final programRuleVariableSourceTypeOffset =
              fbb.writeString(object.programRuleVariableSourceType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, programRuleVariableSourceTypeOffset);
          fbb.addOffset(6, valueTypeOffset);
          fbb.addBool(7, object.useCodeForOptionSet);
          fbb.addInt64(8, object.trackedEntityAttribute.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addInt64(10, object.programStage.targetId);
          fbb.addInt64(11, object.program.targetId);
          fbb.addOffset(12, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final programRuleVariableSourceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final useCodeForOptionSetParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = D2ProgramRuleVariable(
              displayNameParam,
              idParam,
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              programRuleVariableSourceTypeParam,
              valueTypeParam,
              useCodeForOptionSetParam);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.trackedEntityAttribute.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.programStage.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.program.attach(store);
          return object;
        }),
    D2ProgramSection: obx_int.EntityDefinition<D2ProgramSection>(
        model: _entities[13],
        toOneRelations: (D2ProgramSection object) => [object.program],
        toManyRelations: (D2ProgramSection object) => {
              obx_int.RelInfo<D2ProgramSection>.toMany(15, object.id):
                  object.trackedEntityAttributes
            },
        getId: (D2ProgramSection object) => object.id,
        setId: (D2ProgramSection object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramSection object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.sortOrder);
          fbb.addOffset(5, nameOffset);
          fbb.addInt64(6, object.program.targetId);
          fbb.addOffset(7, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = D2ProgramSection(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              sortOrder: sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..displayName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.program.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2ProgramSection>(
              object.trackedEntityAttributes,
              store,
              obx_int.RelInfo<D2ProgramSection>.toMany(15, object.id));
          return object;
        }),
    D2ProgramStage: obx_int.EntityDefinition<D2ProgramStage>(
        model: _entities[14],
        toOneRelations: (D2ProgramStage object) => [object.program],
        toManyRelations: (D2ProgramStage object) => {
              obx_int.RelInfo<D2ProgramStageDataElement>.toOneBacklink(
                  7,
                  object.id,
                  (D2ProgramStageDataElement srcObject) =>
                      srcObject.programStage): object.programStageDataElements,
              obx_int.RelInfo<D2ProgramStageSection>.toOneBacklink(
                  7,
                  object.id,
                  (D2ProgramStageSection srcObject) =>
                      srcObject.programStage): object.programStageSections,
              obx_int.RelInfo<D2Event>.toOneBacklink(29, object.id,
                  (D2Event srcObject) => srcObject.programStage): object.events
            },
        getId: (D2ProgramStage object) => object.id,
        setId: (D2ProgramStage object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramStage object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final validationStrategyOffset = object.validationStrategy == null
              ? null
              : fbb.writeString(object.validationStrategy!);
          final featureTypeOffset = object.featureType == null
              ? null
              : fbb.writeString(object.featureType!);
          final reportDateToUseOffset = object.reportDateToUse == null
              ? null
              : fbb.writeString(object.reportDateToUse!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.sortOrder);
          fbb.addOffset(7, validationStrategyOffset);
          fbb.addOffset(8, featureTypeOffset);
          fbb.addOffset(9, reportDateToUseOffset);
          fbb.addInt64(10, object.program.targetId);
          fbb.addOffset(11, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final validationStrategyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final reportDateToUseParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final featureTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = D2ProgramStage(
              createdParam,
              displayNameParam,
              idParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              sortOrderParam,
              validationStrategyParam,
              reportDateToUseParam,
              featureTypeParam,
              descriptionParam);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.program.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2ProgramStage>(
              object.programStageDataElements,
              store,
              obx_int.RelInfo<D2ProgramStageDataElement>.toOneBacklink(
                  7,
                  object.id,
                  (D2ProgramStageDataElement srcObject) =>
                      srcObject.programStage));
          obx_int.InternalToManyAccess.setRelInfo<D2ProgramStage>(
              object.programStageSections,
              store,
              obx_int.RelInfo<D2ProgramStageSection>.toOneBacklink(7, object.id,
                  (D2ProgramStageSection srcObject) => srcObject.programStage));
          obx_int.InternalToManyAccess.setRelInfo<D2ProgramStage>(
              object.events,
              store,
              obx_int.RelInfo<D2Event>.toOneBacklink(29, object.id,
                  (D2Event srcObject) => srcObject.programStage));
          return object;
        }),
    D2ProgramStageDataElement: obx_int.EntityDefinition<
            D2ProgramStageDataElement>(
        model: _entities[15],
        toOneRelations: (D2ProgramStageDataElement object) =>
            [object.programStage, object.dataElement],
        toManyRelations: (D2ProgramStageDataElement object) => {},
        getId: (D2ProgramStageDataElement object) => object.id,
        setId: (D2ProgramStageDataElement object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramStageDataElement object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(10);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.id);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addBool(4, object.compulsory);
          fbb.addInt64(5, object.sortOrder);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.addInt64(7, object.dataElement.targetId);
          fbb.addOffset(8, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final compulsoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final sortOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = D2ProgramStageDataElement(createdParam, idParam,
              lastUpdatedParam, uidParam, compulsoryParam, sortOrderParam)
            ..displayName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.dataElement.attach(store);
          return object;
        }),
    D2ProgramStageSection: obx_int.EntityDefinition<D2ProgramStageSection>(
        model: _entities[16],
        toOneRelations: (D2ProgramStageSection object) => [object.programStage],
        toManyRelations: (D2ProgramStageSection object) => {
              obx_int.RelInfo<D2ProgramStageSection>.toMany(18, object.id):
                  object.dataElements
            },
        getId: (D2ProgramStageSection object) => object.id,
        setId: (D2ProgramStageSection object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramStageSection object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addInt64(5, object.sortOrder);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.addOffset(7, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = D2ProgramStageSection(createdParam, lastUpdatedParam,
              uidParam, nameParam, sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..displayName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2ProgramStageSection>(
              object.dataElements,
              store,
              obx_int.RelInfo<D2ProgramStageSection>.toMany(18, object.id));
          return object;
        }),
    D2ProgramTrackedEntityAttribute: obx_int.EntityDefinition<
            D2ProgramTrackedEntityAttribute>(
        model: _entities[17],
        toOneRelations: (D2ProgramTrackedEntityAttribute object) =>
            [object.program, object.trackedEntityAttribute],
        toManyRelations: (D2ProgramTrackedEntityAttribute object) => {},
        getId: (D2ProgramTrackedEntityAttribute object) => object.id,
        setId: (D2ProgramTrackedEntityAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramTrackedEntityAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(13);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.id);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.sortOrder);
          fbb.addBool(5, object.displayInList);
          fbb.addBool(6, object.mandatory);
          fbb.addBool(7, object.searchable);
          fbb.addBool(8, object.renderOptionAsRadio);
          fbb.addInt64(9, object.program.targetId);
          fbb.addInt64(10, object.trackedEntityAttribute.targetId);
          fbb.addOffset(11, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final displayInListParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final mandatoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final searchableParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final renderOptionAsRadioParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final object = D2ProgramTrackedEntityAttribute(
              createdParam,
              idParam,
              lastUpdatedParam,
              uidParam,
              sortOrderParam,
              displayInListParam,
              mandatoryParam,
              searchableParam,
              renderOptionAsRadioParam)
            ..displayName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.program.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    D2RelationshipType: obx_int.EntityDefinition<D2RelationshipType>(
        model: _entities[18],
        toOneRelations: (D2RelationshipType object) => [
              object.fromTrackedEntityType,
              object.fromProgram,
              object.fromProgramStage,
              object.toTrackedEntityType,
              object.toProgram,
              object.toProgramStage
            ],
        toManyRelations: (D2RelationshipType object) => {},
        getId: (D2RelationshipType object) => object.id,
        setId: (D2RelationshipType object, int id) {
          object.id = id;
        },
        objectToFB: (D2RelationshipType object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final fromToNameOffset = object.fromToName == null
              ? null
              : fbb.writeString(object.fromToName!);
          final toFromNameOffset = object.toFromName == null
              ? null
              : fbb.writeString(object.toFromName!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          final fromRelationshipEntityOffset =
              fbb.writeString(object.fromRelationshipEntity);
          final toRelationshipEntityOffset =
              fbb.writeString(object.toRelationshipEntity);
          final displayFromToNameOffset = object.displayFromToName == null
              ? null
              : fbb.writeString(object.displayFromToName!);
          final displayToFromNameOffset = object.displayToFromName == null
              ? null
              : fbb.writeString(object.displayToFromName!);
          fbb.startTable(26);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addBool(7, object.referral);
          fbb.addOffset(8, fromToNameOffset);
          fbb.addOffset(9, toFromNameOffset);
          fbb.addOffset(12, displayNameOffset);
          fbb.addInt64(15, object.fromTrackedEntityType.targetId);
          fbb.addInt64(16, object.fromProgram.targetId);
          fbb.addInt64(17, object.fromProgramStage.targetId);
          fbb.addInt64(18, object.toTrackedEntityType.targetId);
          fbb.addInt64(19, object.toProgram.targetId);
          fbb.addInt64(20, object.toProgramStage.targetId);
          fbb.addOffset(21, fromRelationshipEntityOffset);
          fbb.addOffset(22, toRelationshipEntityOffset);
          fbb.addOffset(23, displayFromToNameOffset);
          fbb.addOffset(24, displayToFromNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final fromToNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final toFromNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final displayFromToNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final displayToFromNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 52);
          final referralParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final fromRelationshipEntityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 46, '');
          final toRelationshipEntityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 48, '');
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = D2RelationshipType(
              idParam,
              nameParam,
              displayNameParam,
              fromToNameParam,
              toFromNameParam,
              displayFromToNameParam,
              displayToFromNameParam,
              referralParam,
              fromRelationshipEntityParam,
              toRelationshipEntityParam,
              lastUpdatedParam,
              createdParam,
              uidParam);
          object.fromTrackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.fromTrackedEntityType.attach(store);
          object.fromProgram.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.fromProgram.attach(store);
          object.fromProgramStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
          object.fromProgramStage.attach(store);
          object.toTrackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0);
          object.toTrackedEntityType.attach(store);
          object.toProgram.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.toProgram.attach(store);
          object.toProgramStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          object.toProgramStage.attach(store);
          return object;
        }),
    D2SystemInfo: obx_int.EntityDefinition<D2SystemInfo>(
        model: _entities[19],
        toOneRelations: (D2SystemInfo object) => [],
        toManyRelations: (D2SystemInfo object) => {},
        getId: (D2SystemInfo object) => object.id,
        setId: (D2SystemInfo object, int id) {
          object.id = id;
        },
        objectToFB: (D2SystemInfo object, fb.Builder fbb) {
          final versionOffset = fbb.writeString(object.version);
          final revisionOffset = fbb.writeString(object.revision);
          final calendarOffset = fbb.writeString(object.calendar);
          final dateFormatOffset = fbb.writeString(object.dateFormat);
          final contextPathOffset = fbb.writeString(object.contextPath);
          final systemIdOffset = fbb.writeString(object.systemId);
          final systemNameOffset = fbb.writeString(object.systemName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, versionOffset);
          fbb.addOffset(2, revisionOffset);
          fbb.addOffset(3, calendarOffset);
          fbb.addOffset(4, dateFormatOffset);
          fbb.addOffset(5, contextPathOffset);
          fbb.addOffset(6, systemIdOffset);
          fbb.addOffset(7, systemNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final versionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final revisionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final calendarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateFormatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final contextPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final systemIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final systemNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = D2SystemInfo(
              idParam,
              versionParam,
              revisionParam,
              calendarParam,
              dateFormatParam,
              contextPathParam,
              systemIdParam,
              systemNameParam);

          return object;
        }),
    D2TrackedEntityAttribute: obx_int.EntityDefinition<
            D2TrackedEntityAttribute>(
        model: _entities[20],
        toOneRelations: (D2TrackedEntityAttribute object) => [object.optionSet],
        toManyRelations: (D2TrackedEntityAttribute object) => {
              obx_int.RelInfo<D2TrackedEntityAttribute>.toMany(19, object.id):
                  object.legendSets
            },
        getId: (D2TrackedEntityAttribute object) => object.id,
        setId: (D2TrackedEntityAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (D2TrackedEntityAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final formNameOffset = object.formName == null
              ? null
              : fbb.writeString(object.formName!);
          final shortNameOffset = fbb.writeString(object.shortName);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final aggregationTypeOffset = fbb.writeString(object.aggregationType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          final displayFormNameOffset = object.displayFormName == null
              ? null
              : fbb.writeString(object.displayFormName!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, formNameOffset);
          fbb.addOffset(7, shortNameOffset);
          fbb.addOffset(8, descriptionOffset);
          fbb.addOffset(9, aggregationTypeOffset);
          fbb.addOffset(10, valueTypeOffset);
          fbb.addBool(11, object.zeroIsSignificant);
          fbb.addInt64(12, object.optionSet.targetId);
          fbb.addOffset(13, displayNameOffset);
          fbb.addOffset(14, displayFormNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final formNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final aggregationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final zeroIsSignificantParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final object = D2TrackedEntityAttribute(
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              codeParam,
              formNameParam,
              shortNameParam,
              descriptionParam,
              aggregationTypeParam,
              valueTypeParam,
              zeroIsSignificantParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..displayName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..displayFormName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 32);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.optionSet.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2TrackedEntityAttribute>(
              object.legendSets,
              store,
              obx_int.RelInfo<D2TrackedEntityAttribute>.toMany(19, object.id));
          return object;
        }),
    D2TrackedEntityAttributeValue: obx_int.EntityDefinition<
            D2TrackedEntityAttributeValue>(
        model: _entities[21],
        toOneRelations: (D2TrackedEntityAttributeValue object) =>
            [object.trackedEntityAttribute, object.trackedEntity],
        toManyRelations: (D2TrackedEntityAttributeValue object) => {},
        getId: (D2TrackedEntityAttributeValue object) => object.id,
        setId: (D2TrackedEntityAttributeValue object, int id) {
          object.id = id;
        },
        objectToFB: (D2TrackedEntityAttributeValue object, fb.Builder fbb) {
          final valueOffset = fbb.writeString(object.value);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(6, valueOffset);
          fbb.addInt64(8, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(9, object.updatedAt.millisecondsSinceEpoch);
          fbb.addInt64(10, object.trackedEntityAttribute.targetId);
          fbb.addInt64(11, object.trackedEntity.targetId);
          fbb.addBool(12, object.synced);
          fbb.addOffset(13, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final syncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final object = D2TrackedEntityAttributeValue(
              uidParam, createdAtParam, updatedAtParam, valueParam, syncedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.trackedEntityAttribute.attach(store);
          object.trackedEntity.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.trackedEntity.attach(store);
          return object;
        }),
    D2TrackedEntityType: obx_int.EntityDefinition<D2TrackedEntityType>(
        model: _entities[22],
        toOneRelations: (D2TrackedEntityType object) => [],
        toManyRelations: (D2TrackedEntityType object) => {
              obx_int.RelInfo<D2TrackedEntityType>.toMany(20, object.id):
                  object.trackedEntityTypeAttributes
            },
        getId: (D2TrackedEntityType object) => object.id,
        setId: (D2TrackedEntityType object, int id) {
          object.id = id;
        },
        objectToFB: (D2TrackedEntityType object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = D2TrackedEntityType(
              idParam,
              displayNameParam,
              createdParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              descriptionParam);
          obx_int.InternalToManyAccess.setRelInfo<D2TrackedEntityType>(
              object.trackedEntityTypeAttributes,
              store,
              obx_int.RelInfo<D2TrackedEntityType>.toMany(20, object.id));
          return object;
        }),
    D2TrackedEntityTypeAttribute:
        obx_int.EntityDefinition<D2TrackedEntityTypeAttribute>(
            model: _entities[23],
            toOneRelations: (D2TrackedEntityTypeAttribute object) =>
                [object.trackedEntityType, object.trackedEntityAttribute],
            toManyRelations: (D2TrackedEntityTypeAttribute object) => {},
            getId: (D2TrackedEntityTypeAttribute object) => object.id,
            setId: (D2TrackedEntityTypeAttribute object, int id) {
              object.id = id;
            },
            objectToFB: (D2TrackedEntityTypeAttribute object, fb.Builder fbb) {
              final uidOffset = fbb.writeString(object.uid);
              final valueTypeOffset = fbb.writeString(object.valueType);
              final displayNameOffset = object.displayName == null
                  ? null
                  : fbb.writeString(object.displayName!);
              final displayShortNameOffset =
                  fbb.writeString(object.displayShortName);
              fbb.startTable(11);
              fbb.addInt64(0, object.id);
              fbb.addInt64(1, object.created.millisecondsSinceEpoch);
              fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
              fbb.addOffset(3, uidOffset);
              fbb.addInt64(4, object.trackedEntityType.targetId);
              fbb.addInt64(5, object.trackedEntityAttribute.targetId);
              fbb.addOffset(6, valueTypeOffset);
              fbb.addOffset(7, displayNameOffset);
              fbb.addOffset(8, displayShortNameOffset);
              fbb.addBool(9, object.mandatory);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final displayNameParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 18);
              final createdParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
              final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
              final uidParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
              final valueTypeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 16, '');
              final displayShortNameParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 20, '');
              final mandatoryParam = const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 22, false);
              final object = D2TrackedEntityTypeAttribute(
                  idParam,
                  displayNameParam,
                  createdParam,
                  lastUpdatedParam,
                  uidParam,
                  valueTypeParam,
                  displayShortNameParam,
                  mandatoryParam);
              object.trackedEntityType.targetId =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
              object.trackedEntityType.attach(store);
              object.trackedEntityAttribute.targetId =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
              object.trackedEntityAttribute.attach(store);
              return object;
            }),
    D2User: obx_int.EntityDefinition<D2User>(
        model: _entities[24],
        toOneRelations: (D2User object) => [],
        toManyRelations: (D2User object) => {
              obx_int.RelInfo<D2User>.toMany(21, object.id): object.userRoles,
              obx_int.RelInfo<D2User>.toMany(22, object.id): object.userGroups
            },
        getId: (D2User object) => object.id,
        setId: (D2User object, int id) {
          object.id = id;
        },
        objectToFB: (D2User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final firstNameOffset = fbb.writeString(object.firstName);
          final surnameOffset = fbb.writeString(object.surname);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final authoritiesOffset = fbb.writeList(
              object.authorities.map(fbb.writeString).toList(growable: false));
          final programsOffset = fbb.writeList(
              object.programs.map(fbb.writeString).toList(growable: false));
          final organisationUnitsOffset = fbb.writeList(object.organisationUnits
              .map(fbb.writeString)
              .toList(growable: false));
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, surnameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, authoritiesOffset);
          fbb.addOffset(6, programsOffset);
          fbb.addOffset(7, organisationUnitsOffset);
          fbb.addOffset(8, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final surnameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final authoritiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final programsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final organisationUnitsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 18, []);
          final object = D2User(
              username: usernameParam,
              firstName: firstNameParam,
              surname: surnameParam,
              email: emailParam,
              authorities: authoritiesParam,
              uid: uidParam,
              programs: programsParam,
              organisationUnits: organisationUnitsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<D2User>(object.userRoles,
              store, obx_int.RelInfo<D2User>.toMany(21, object.id));
          obx_int.InternalToManyAccess.setRelInfo<D2User>(object.userGroups,
              store, obx_int.RelInfo<D2User>.toMany(22, object.id));
          return object;
        }),
    D2UserGroup: obx_int.EntityDefinition<D2UserGroup>(
        model: _entities[25],
        toOneRelations: (D2UserGroup object) => [],
        toManyRelations: (D2UserGroup object) => {},
        getId: (D2UserGroup object) => object.id,
        setId: (D2UserGroup object, int id) {
          object.id = id;
        },
        objectToFB: (D2UserGroup object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.created.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(5, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = D2UserGroup(idParam, uidParam, displayNameParam,
              nameParam, createdParam, lastUpdatedParam);

          return object;
        }),
    D2UserRole: obx_int.EntityDefinition<D2UserRole>(
        model: _entities[26],
        toOneRelations: (D2UserRole object) => [],
        toManyRelations: (D2UserRole object) => {},
        getId: (D2UserRole object) => object.id,
        setId: (D2UserRole object, int id) {
          object.id = id;
        },
        objectToFB: (D2UserRole object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final authoritiesOffset = fbb.writeList(
              object.authorities.map(fbb.writeString).toList(growable: false));
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, authoritiesOffset);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(6, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final authoritiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = D2UserRole(displayNameParam, uidParam, nameParam,
              authoritiesParam, createdParam, lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2AttributeValue: obx_int.EntityDefinition<D2AttributeValue>(
        model: _entities[27],
        toOneRelations: (D2AttributeValue object) =>
            [object.dataElement, object.trackedEntityAttribute],
        toManyRelations: (D2AttributeValue object) => {},
        getId: (D2AttributeValue object) => object.id,
        setId: (D2AttributeValue object, int id) {
          object.id = id;
        },
        objectToFB: (D2AttributeValue object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataElement.targetId);
          fbb.addInt64(2, object.trackedEntityAttribute.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = D2AttributeValue()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dataElement.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    D2Relationship: obx_int.EntityDefinition<D2Relationship>(
        model: _entities[28],
        toOneRelations: (D2Relationship object) => [],
        toManyRelations: (D2Relationship object) => {},
        getId: (D2Relationship object) => object.id,
        setId: (D2Relationship object, int id) {
          object.id = id;
        },
        objectToFB: (D2Relationship object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final relationshipNameOffset =
              fbb.writeString(object.relationshipName);
          final relationshipTypeOffset =
              fbb.writeString(object.relationshipType);
          final fromTypeOffset = fbb.writeString(object.fromType);
          final fromIdOffset = fbb.writeString(object.fromId);
          final toTypeOffset = fbb.writeString(object.toType);
          final toIdOffset = fbb.writeString(object.toId);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(2, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, relationshipNameOffset);
          fbb.addBool(5, object.bidirectional);
          fbb.addOffset(6, relationshipTypeOffset);
          fbb.addOffset(7, fromTypeOffset);
          fbb.addOffset(8, fromIdOffset);
          fbb.addOffset(9, toTypeOffset);
          fbb.addOffset(10, toIdOffset);
          fbb.addBool(11, object.synced);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final relationshipNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final bidirectionalParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final relationshipTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final fromTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final fromIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final toTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final toIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final syncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final object = D2Relationship(
              idParam,
              createdAtParam,
              updatedAtParam,
              uidParam,
              relationshipNameParam,
              bidirectionalParam,
              relationshipTypeParam,
              fromTypeParam,
              fromIdParam,
              toTypeParam,
              toIdParam,
              syncedParam);

          return object;
        }),
    D2TrackedEntity: obx_int.EntityDefinition<D2TrackedEntity>(
        model: _entities[29],
        toOneRelations: (D2TrackedEntity object) =>
            [object.orgUnit, object.trackedEntityType],
        toManyRelations: (D2TrackedEntity object) => {
              obx_int.RelInfo<D2Enrollment>.toOneBacklink(22, object.id,
                      (D2Enrollment srcObject) => srcObject.trackedEntity):
                  object.enrollments,
              obx_int.RelInfo<D2TrackedEntityAttributeValue>.toOneBacklink(
                  12,
                  object.id,
                  (D2TrackedEntityAttributeValue srcObject) =>
                      srcObject.trackedEntity): object.attributes,
              obx_int.RelInfo<D2Event>.toOneBacklink(27, object.id,
                  (D2Event srcObject) => srcObject.trackedEntity): object.events
            },
        getId: (D2TrackedEntity object) => object.id,
        setId: (D2TrackedEntity object, int id) {
          object.id = id;
        },
        objectToFB: (D2TrackedEntity object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(2, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addBool(8, object.potentialDuplicate);
          fbb.addBool(9, object.deleted);
          fbb.addBool(10, object.inactive);
          fbb.addBool(11, object.synced);
          fbb.addInt64(12, object.orgUnit.targetId);
          fbb.addInt64(13, object.trackedEntityType.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final potentialDuplicateParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final inactiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final syncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final object = D2TrackedEntity(
              uidParam,
              createdAtParam,
              updatedAtParam,
              deletedParam,
              potentialDuplicateParam,
              inactiveParam,
              syncedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.orgUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.orgUnit.attach(store);
          object.trackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.trackedEntityType.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<D2TrackedEntity>(
              object.enrollments,
              store,
              obx_int.RelInfo<D2Enrollment>.toOneBacklink(22, object.id,
                  (D2Enrollment srcObject) => srcObject.trackedEntity));
          obx_int.InternalToManyAccess.setRelInfo<D2TrackedEntity>(
              object.attributes,
              store,
              obx_int.RelInfo<D2TrackedEntityAttributeValue>.toOneBacklink(
                  12,
                  object.id,
                  (D2TrackedEntityAttributeValue srcObject) =>
                      srcObject.trackedEntity));
          obx_int.InternalToManyAccess.setRelInfo<D2TrackedEntity>(
              object.events,
              store,
              obx_int.RelInfo<D2Event>.toOneBacklink(27, object.id,
                  (D2Event srcObject) => srcObject.trackedEntity));
          return object;
        }),
    D2OrgUnit: obx_int.EntityDefinition<D2OrgUnit>(
        model: _entities[30],
        toOneRelations: (D2OrgUnit object) => [],
        toManyRelations: (D2OrgUnit object) => {},
        getId: (D2OrgUnit object) => object.id,
        setId: (D2OrgUnit object, int id) {
          object.id = id;
        },
        objectToFB: (D2OrgUnit object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final shortNameOffset = fbb.writeString(object.shortName);
          final uidOffset = fbb.writeString(object.uid);
          final pathOffset = fbb.writeString(object.path);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, shortNameOffset);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, pathOffset);
          fbb.addInt64(5, object.level);
          fbb.addInt64(6, object.created.millisecondsSinceEpoch);
          fbb.addInt64(7, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(8, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = D2OrgUnit(
              idParam,
              displayNameParam,
              nameParam,
              uidParam,
              shortNameParam,
              pathParam,
              levelParam,
              createdParam,
              lastUpdatedParam);

          return object;
        }),
    D2OrgUnitGroup: obx_int.EntityDefinition<D2OrgUnitGroup>(
        model: _entities[31],
        toOneRelations: (D2OrgUnitGroup object) => [],
        toManyRelations: (D2OrgUnitGroup object) => {
              obx_int.RelInfo<D2OrgUnitGroup>.toMany(29, object.id):
                  object.organisationUnits
            },
        getId: (D2OrgUnitGroup object) => object.id,
        setId: (D2OrgUnitGroup object, int id) {
          object.id = id;
        },
        objectToFB: (D2OrgUnitGroup object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.created.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(5, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = D2OrgUnitGroup(idParam, displayNameParam, nameParam,
              uidParam, createdParam, lastUpdatedParam);
          obx_int.InternalToManyAccess.setRelInfo<D2OrgUnitGroup>(
              object.organisationUnits,
              store,
              obx_int.RelInfo<D2OrgUnitGroup>.toMany(29, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [D2DataElement] entity fields to define ObjectBox queries.
class D2DataElement_ {
  /// see [D2DataElement.created]
  static final created =
      obx.QueryDateProperty<D2DataElement>(_entities[0].properties[0]);

  /// see [D2DataElement.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2DataElement>(_entities[0].properties[1]);

  /// see [D2DataElement.uid]
  static final uid =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[2]);

  /// see [D2DataElement.name]
  static final name =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[3]);

  /// see [D2DataElement.code]
  static final code =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[4]);

  /// see [D2DataElement.formName]
  static final formName =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[5]);

  /// see [D2DataElement.shortName]
  static final shortName =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[6]);

  /// see [D2DataElement.description]
  static final description =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[7]);

  /// see [D2DataElement.aggregationType]
  static final aggregationType =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[8]);

  /// see [D2DataElement.valueType]
  static final valueType =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[9]);

  /// see [D2DataElement.domainType]
  static final domainType =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[10]);

  /// see [D2DataElement.zeroIsSignificant]
  static final zeroIsSignificant =
      obx.QueryBooleanProperty<D2DataElement>(_entities[0].properties[11]);

  /// see [D2DataElement.optionSet]
  static final optionSet = obx.QueryRelationToOne<D2DataElement, D2OptionSet>(
      _entities[0].properties[12]);

  /// see [D2DataElement.id]
  static final id =
      obx.QueryIntegerProperty<D2DataElement>(_entities[0].properties[13]);

  /// see [D2DataElement.displayFormName]
  static final displayFormName =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[14]);

  /// see [D2DataElement.displayName]
  static final displayName =
      obx.QueryStringProperty<D2DataElement>(_entities[0].properties[15]);

  /// see [D2DataElement.legendSets]
  static final legendSets = obx.QueryRelationToMany<D2DataElement, D2LegendSet>(
      _entities[0].relations[0]);

  /// see [D2DataElement.dataValues]
  static final dataValues = obx.QueryRelationToMany<D2DataElement, D2DataValue>(
      _entities[0].relations[1]);
}

/// [D2DataValue] entity fields to define ObjectBox queries.
class D2DataValue_ {
  /// see [D2DataValue.id]
  static final id =
      obx.QueryIntegerProperty<D2DataValue>(_entities[1].properties[0]);

  /// see [D2DataValue.value]
  static final value =
      obx.QueryStringProperty<D2DataValue>(_entities[1].properties[1]);

  /// see [D2DataValue.providedElsewhere]
  static final providedElsewhere =
      obx.QueryBooleanProperty<D2DataValue>(_entities[1].properties[2]);

  /// see [D2DataValue.createdAt]
  static final createdAt =
      obx.QueryDateProperty<D2DataValue>(_entities[1].properties[3]);

  /// see [D2DataValue.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<D2DataValue>(_entities[1].properties[4]);

  /// see [D2DataValue.event]
  static final event =
      obx.QueryRelationToOne<D2DataValue, D2Event>(_entities[1].properties[5]);

  /// see [D2DataValue.dataElement]
  static final dataElement = obx.QueryRelationToOne<D2DataValue, D2DataElement>(
      _entities[1].properties[6]);

  /// see [D2DataValue.synced]
  static final synced =
      obx.QueryBooleanProperty<D2DataValue>(_entities[1].properties[7]);

  /// see [D2DataValue.uid]
  static final uid =
      obx.QueryStringProperty<D2DataValue>(_entities[1].properties[8]);
}

/// [D2Enrollment] entity fields to define ObjectBox queries.
class D2Enrollment_ {
  /// see [D2Enrollment.id]
  static final id =
      obx.QueryIntegerProperty<D2Enrollment>(_entities[2].properties[0]);

  /// see [D2Enrollment.uid]
  static final uid =
      obx.QueryStringProperty<D2Enrollment>(_entities[2].properties[1]);

  /// see [D2Enrollment.deleted]
  static final deleted =
      obx.QueryBooleanProperty<D2Enrollment>(_entities[2].properties[2]);

  /// see [D2Enrollment.followup]
  static final followup =
      obx.QueryBooleanProperty<D2Enrollment>(_entities[2].properties[3]);

  /// see [D2Enrollment.status]
  static final status =
      obx.QueryStringProperty<D2Enrollment>(_entities[2].properties[4]);

  /// see [D2Enrollment.notes]
  static final notes =
      obx.QueryStringProperty<D2Enrollment>(_entities[2].properties[5]);

  /// see [D2Enrollment.createdAt]
  static final createdAt =
      obx.QueryDateProperty<D2Enrollment>(_entities[2].properties[6]);

  /// see [D2Enrollment.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<D2Enrollment>(_entities[2].properties[7]);

  /// see [D2Enrollment.enrolledAt]
  static final enrolledAt =
      obx.QueryDateProperty<D2Enrollment>(_entities[2].properties[8]);

  /// see [D2Enrollment.occurredAt]
  static final occurredAt =
      obx.QueryDateProperty<D2Enrollment>(_entities[2].properties[9]);

  /// see [D2Enrollment.trackedEntity]
  static final trackedEntity =
      obx.QueryRelationToOne<D2Enrollment, D2TrackedEntity>(
          _entities[2].properties[10]);

  /// see [D2Enrollment.synced]
  static final synced =
      obx.QueryBooleanProperty<D2Enrollment>(_entities[2].properties[11]);

  /// see [D2Enrollment.orgUnit]
  static final orgUnit = obx.QueryRelationToOne<D2Enrollment, D2OrgUnit>(
      _entities[2].properties[12]);

  /// see [D2Enrollment.program]
  static final program = obx.QueryRelationToOne<D2Enrollment, D2Program>(
      _entities[2].properties[13]);

  /// see [D2Enrollment.events]
  static final events =
      obx.QueryBacklinkToMany<D2Event, D2Enrollment>(D2Event_.enrollment);
}

/// [D2Event] entity fields to define ObjectBox queries.
class D2Event_ {
  /// see [D2Event.id]
  static final id =
      obx.QueryIntegerProperty<D2Event>(_entities[3].properties[0]);

  /// see [D2Event.uid]
  static final uid =
      obx.QueryStringProperty<D2Event>(_entities[3].properties[1]);

  /// see [D2Event.status]
  static final status =
      obx.QueryStringProperty<D2Event>(_entities[3].properties[2]);

  /// see [D2Event.attributeCategoryOptions]
  static final attributeCategoryOptions =
      obx.QueryStringProperty<D2Event>(_entities[3].properties[3]);

  /// see [D2Event.deleted]
  static final deleted =
      obx.QueryBooleanProperty<D2Event>(_entities[3].properties[4]);

  /// see [D2Event.followup]
  static final followup =
      obx.QueryBooleanProperty<D2Event>(_entities[3].properties[5]);

  /// see [D2Event.attributeOptionCombo]
  static final attributeOptionCombo =
      obx.QueryStringProperty<D2Event>(_entities[3].properties[6]);

  /// see [D2Event.notes]
  static final notes =
      obx.QueryStringProperty<D2Event>(_entities[3].properties[7]);

  /// see [D2Event.createdAt]
  static final createdAt =
      obx.QueryDateProperty<D2Event>(_entities[3].properties[8]);

  /// see [D2Event.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<D2Event>(_entities[3].properties[9]);

  /// see [D2Event.scheduledAt]
  static final scheduledAt =
      obx.QueryDateProperty<D2Event>(_entities[3].properties[10]);

  /// see [D2Event.occurredAt]
  static final occurredAt =
      obx.QueryDateProperty<D2Event>(_entities[3].properties[11]);

  /// see [D2Event.enrollment]
  static final enrollment = obx.QueryRelationToOne<D2Event, D2Enrollment>(
      _entities[3].properties[12]);

  /// see [D2Event.trackedEntity]
  static final trackedEntity = obx.QueryRelationToOne<D2Event, D2TrackedEntity>(
      _entities[3].properties[13]);

  /// see [D2Event.program]
  static final program =
      obx.QueryRelationToOne<D2Event, D2Program>(_entities[3].properties[14]);

  /// see [D2Event.programStage]
  static final programStage = obx.QueryRelationToOne<D2Event, D2ProgramStage>(
      _entities[3].properties[15]);

  /// see [D2Event.synced]
  static final synced =
      obx.QueryBooleanProperty<D2Event>(_entities[3].properties[16]);

  /// see [D2Event.orgUnit]
  static final orgUnit =
      obx.QueryRelationToOne<D2Event, D2OrgUnit>(_entities[3].properties[17]);

  /// see [D2Event.dataValues]
  static final dataValues =
      obx.QueryBacklinkToMany<D2DataValue, D2Event>(D2DataValue_.event);
}

/// [D2Legend] entity fields to define ObjectBox queries.
class D2Legend_ {
  /// see [D2Legend.id]
  static final id =
      obx.QueryIntegerProperty<D2Legend>(_entities[4].properties[0]);

  /// see [D2Legend.created]
  static final created =
      obx.QueryDateProperty<D2Legend>(_entities[4].properties[1]);

  /// see [D2Legend.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2Legend>(_entities[4].properties[2]);

  /// see [D2Legend.uid]
  static final uid =
      obx.QueryStringProperty<D2Legend>(_entities[4].properties[3]);

  /// see [D2Legend.name]
  static final name =
      obx.QueryStringProperty<D2Legend>(_entities[4].properties[4]);

  /// see [D2Legend.startValue]
  static final startValue =
      obx.QueryDoubleProperty<D2Legend>(_entities[4].properties[5]);

  /// see [D2Legend.endValue]
  static final endValue =
      obx.QueryDoubleProperty<D2Legend>(_entities[4].properties[6]);

  /// see [D2Legend.color]
  static final color =
      obx.QueryStringProperty<D2Legend>(_entities[4].properties[7]);

  /// see [D2Legend.displayName]
  static final displayName =
      obx.QueryStringProperty<D2Legend>(_entities[4].properties[8]);

  /// see [D2Legend.legendSet]
  static final legendSet =
      obx.QueryRelationToOne<D2Legend, D2LegendSet>(_entities[4].properties[9]);
}

/// [D2LegendSet] entity fields to define ObjectBox queries.
class D2LegendSet_ {
  /// see [D2LegendSet.id]
  static final id =
      obx.QueryIntegerProperty<D2LegendSet>(_entities[5].properties[0]);

  /// see [D2LegendSet.created]
  static final created =
      obx.QueryDateProperty<D2LegendSet>(_entities[5].properties[1]);

  /// see [D2LegendSet.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2LegendSet>(_entities[5].properties[2]);

  /// see [D2LegendSet.uid]
  static final uid =
      obx.QueryStringProperty<D2LegendSet>(_entities[5].properties[3]);

  /// see [D2LegendSet.name]
  static final name =
      obx.QueryStringProperty<D2LegendSet>(_entities[5].properties[4]);

  /// see [D2LegendSet.code]
  static final code =
      obx.QueryStringProperty<D2LegendSet>(_entities[5].properties[5]);

  /// see [D2LegendSet.displayName]
  static final displayName =
      obx.QueryStringProperty<D2LegendSet>(_entities[5].properties[6]);

  /// see [D2LegendSet.legends]
  static final legends =
      obx.QueryBacklinkToMany<D2Legend, D2LegendSet>(D2Legend_.legendSet);
}

/// [D2Option] entity fields to define ObjectBox queries.
class D2Option_ {
  /// see [D2Option.id]
  static final id =
      obx.QueryIntegerProperty<D2Option>(_entities[6].properties[0]);

  /// see [D2Option.created]
  static final created =
      obx.QueryDateProperty<D2Option>(_entities[6].properties[1]);

  /// see [D2Option.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2Option>(_entities[6].properties[2]);

  /// see [D2Option.uid]
  static final uid =
      obx.QueryStringProperty<D2Option>(_entities[6].properties[3]);

  /// see [D2Option.name]
  static final name =
      obx.QueryStringProperty<D2Option>(_entities[6].properties[4]);

  /// see [D2Option.code]
  static final code =
      obx.QueryStringProperty<D2Option>(_entities[6].properties[5]);

  /// see [D2Option.sortOrder]
  static final sortOrder =
      obx.QueryIntegerProperty<D2Option>(_entities[6].properties[6]);

  /// see [D2Option.optionSet]
  static final optionSet =
      obx.QueryRelationToOne<D2Option, D2OptionSet>(_entities[6].properties[7]);

  /// see [D2Option.displayName]
  static final displayName =
      obx.QueryStringProperty<D2Option>(_entities[6].properties[8]);
}

/// [D2OptionSet] entity fields to define ObjectBox queries.
class D2OptionSet_ {
  /// see [D2OptionSet.id]
  static final id =
      obx.QueryIntegerProperty<D2OptionSet>(_entities[7].properties[0]);

  /// see [D2OptionSet.created]
  static final created =
      obx.QueryDateProperty<D2OptionSet>(_entities[7].properties[1]);

  /// see [D2OptionSet.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2OptionSet>(_entities[7].properties[2]);

  /// see [D2OptionSet.uid]
  static final uid =
      obx.QueryStringProperty<D2OptionSet>(_entities[7].properties[3]);

  /// see [D2OptionSet.name]
  static final name =
      obx.QueryStringProperty<D2OptionSet>(_entities[7].properties[4]);

  /// see [D2OptionSet.code]
  static final code =
      obx.QueryStringProperty<D2OptionSet>(_entities[7].properties[5]);

  /// see [D2OptionSet.valueType]
  static final valueType =
      obx.QueryStringProperty<D2OptionSet>(_entities[7].properties[6]);

  /// see [D2OptionSet.displayName]
  static final displayName =
      obx.QueryStringProperty<D2OptionSet>(_entities[7].properties[7]);

  /// see [D2OptionSet.options]
  static final options =
      obx.QueryRelationToMany<D2OptionSet, D2Option>(_entities[7].relations[0]);
}

/// [D2OrganisationUnitLevel] entity fields to define ObjectBox queries.
class D2OrganisationUnitLevel_ {
  /// see [D2OrganisationUnitLevel.id]
  static final id = obx.QueryIntegerProperty<D2OrganisationUnitLevel>(
      _entities[8].properties[0]);

  /// see [D2OrganisationUnitLevel.name]
  static final name = obx.QueryStringProperty<D2OrganisationUnitLevel>(
      _entities[8].properties[1]);

  /// see [D2OrganisationUnitLevel.uid]
  static final uid = obx.QueryStringProperty<D2OrganisationUnitLevel>(
      _entities[8].properties[2]);

  /// see [D2OrganisationUnitLevel.level]
  static final level = obx.QueryIntegerProperty<D2OrganisationUnitLevel>(
      _entities[8].properties[3]);

  /// see [D2OrganisationUnitLevel.created]
  static final created = obx.QueryDateProperty<D2OrganisationUnitLevel>(
      _entities[8].properties[4]);

  /// see [D2OrganisationUnitLevel.lastUpdated]
  static final lastUpdated = obx.QueryDateProperty<D2OrganisationUnitLevel>(
      _entities[8].properties[5]);

  /// see [D2OrganisationUnitLevel.displayName]
  static final displayName = obx.QueryStringProperty<D2OrganisationUnitLevel>(
      _entities[8].properties[6]);
}

/// [D2Program] entity fields to define ObjectBox queries.
class D2Program_ {
  /// see [D2Program.id]
  static final id =
      obx.QueryIntegerProperty<D2Program>(_entities[9].properties[0]);

  /// see [D2Program.created]
  static final created =
      obx.QueryDateProperty<D2Program>(_entities[9].properties[1]);

  /// see [D2Program.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2Program>(_entities[9].properties[2]);

  /// see [D2Program.uid]
  static final uid =
      obx.QueryStringProperty<D2Program>(_entities[9].properties[3]);

  /// see [D2Program.name]
  static final name =
      obx.QueryStringProperty<D2Program>(_entities[9].properties[4]);

  /// see [D2Program.shortName]
  static final shortName =
      obx.QueryStringProperty<D2Program>(_entities[9].properties[5]);

  /// see [D2Program.accessLevel]
  static final accessLevel =
      obx.QueryStringProperty<D2Program>(_entities[9].properties[6]);

  /// see [D2Program.programType]
  static final programType =
      obx.QueryStringProperty<D2Program>(_entities[9].properties[7]);

  /// see [D2Program.onlyEnrollOnce]
  static final onlyEnrollOnce =
      obx.QueryBooleanProperty<D2Program>(_entities[9].properties[8]);

  /// see [D2Program.selectEnrollmentDatesInFuture]
  static final selectEnrollmentDatesInFuture =
      obx.QueryBooleanProperty<D2Program>(_entities[9].properties[9]);

  /// see [D2Program.displayName]
  static final displayName =
      obx.QueryStringProperty<D2Program>(_entities[9].properties[10]);

  /// see [D2Program.trackedEntityType]
  static final trackedEntityType =
      obx.QueryRelationToOne<D2Program, D2TrackedEntityType>(
          _entities[9].properties[11]);

  /// see [D2Program.organisationUnits]
  static final organisationUnits =
      obx.QueryRelationToMany<D2Program, D2OrgUnit>(_entities[9].relations[0]);

  /// see [D2Program.programStages]
  static final programStages =
      obx.QueryBacklinkToMany<D2ProgramStage, D2Program>(
          D2ProgramStage_.program);

  /// see [D2Program.programSections]
  static final programSections =
      obx.QueryBacklinkToMany<D2ProgramSection, D2Program>(
          D2ProgramSection_.program);

  /// see [D2Program.programTrackedEntityAttributes]
  static final programTrackedEntityAttributes =
      obx.QueryBacklinkToMany<D2ProgramTrackedEntityAttribute, D2Program>(
          D2ProgramTrackedEntityAttribute_.program);

  /// see [D2Program.events]
  static final events =
      obx.QueryBacklinkToMany<D2Event, D2Program>(D2Event_.program);
}

/// [D2ProgramRule] entity fields to define ObjectBox queries.
class D2ProgramRule_ {
  /// see [D2ProgramRule.id]
  static final id =
      obx.QueryIntegerProperty<D2ProgramRule>(_entities[10].properties[0]);

  /// see [D2ProgramRule.created]
  static final created =
      obx.QueryDateProperty<D2ProgramRule>(_entities[10].properties[1]);

  /// see [D2ProgramRule.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2ProgramRule>(_entities[10].properties[2]);

  /// see [D2ProgramRule.uid]
  static final uid =
      obx.QueryStringProperty<D2ProgramRule>(_entities[10].properties[3]);

  /// see [D2ProgramRule.name]
  static final name =
      obx.QueryStringProperty<D2ProgramRule>(_entities[10].properties[4]);

  /// see [D2ProgramRule.description]
  static final description =
      obx.QueryStringProperty<D2ProgramRule>(_entities[10].properties[5]);

  /// see [D2ProgramRule.condition]
  static final condition =
      obx.QueryStringProperty<D2ProgramRule>(_entities[10].properties[6]);

  /// see [D2ProgramRule.program]
  static final program = obx.QueryRelationToOne<D2ProgramRule, D2Program>(
      _entities[10].properties[7]);

  /// see [D2ProgramRule.displayName]
  static final displayName =
      obx.QueryStringProperty<D2ProgramRule>(_entities[10].properties[8]);

  /// see [D2ProgramRule.programRuleActions]
  static final programRuleActions =
      obx.QueryBacklinkToMany<D2ProgramRuleAction, D2ProgramRule>(
          D2ProgramRuleAction_.programRule);
}

/// [D2ProgramRuleAction] entity fields to define ObjectBox queries.
class D2ProgramRuleAction_ {
  /// see [D2ProgramRuleAction.id]
  static final id = obx.QueryIntegerProperty<D2ProgramRuleAction>(
      _entities[11].properties[0]);

  /// see [D2ProgramRuleAction.created]
  static final created =
      obx.QueryDateProperty<D2ProgramRuleAction>(_entities[11].properties[1]);

  /// see [D2ProgramRuleAction.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2ProgramRuleAction>(_entities[11].properties[2]);

  /// see [D2ProgramRuleAction.uid]
  static final uid =
      obx.QueryStringProperty<D2ProgramRuleAction>(_entities[11].properties[3]);

  /// see [D2ProgramRuleAction.programRuleActionType]
  static final programRuleActionType =
      obx.QueryStringProperty<D2ProgramRuleAction>(_entities[11].properties[4]);

  /// see [D2ProgramRuleAction.content]
  static final content =
      obx.QueryStringProperty<D2ProgramRuleAction>(_entities[11].properties[5]);

  /// see [D2ProgramRuleAction.data]
  static final data =
      obx.QueryStringProperty<D2ProgramRuleAction>(_entities[11].properties[6]);

  /// see [D2ProgramRuleAction.location]
  static final location =
      obx.QueryStringProperty<D2ProgramRuleAction>(_entities[11].properties[7]);

  /// see [D2ProgramRuleAction.programRule]
  static final programRule =
      obx.QueryRelationToOne<D2ProgramRuleAction, D2ProgramRule>(
          _entities[11].properties[8]);

  /// see [D2ProgramRuleAction.dataElement]
  static final dataElement =
      obx.QueryRelationToOne<D2ProgramRuleAction, D2DataElement>(
          _entities[11].properties[9]);

  /// see [D2ProgramRuleAction.programStageSection]
  static final programStageSection =
      obx.QueryRelationToOne<D2ProgramRuleAction, D2ProgramStageSection>(
          _entities[11].properties[10]);

  /// see [D2ProgramRuleAction.programSection]
  static final programSection =
      obx.QueryRelationToOne<D2ProgramRuleAction, D2ProgramSection>(
          _entities[11].properties[11]);

  /// see [D2ProgramRuleAction.trackedEntityAttribute]
  static final trackedEntityAttribute =
      obx.QueryRelationToOne<D2ProgramRuleAction, D2TrackedEntityAttribute>(
          _entities[11].properties[12]);

  /// see [D2ProgramRuleAction.displayName]
  static final displayName = obx.QueryStringProperty<D2ProgramRuleAction>(
      _entities[11].properties[13]);
}

/// [D2ProgramRuleVariable] entity fields to define ObjectBox queries.
class D2ProgramRuleVariable_ {
  /// see [D2ProgramRuleVariable.id]
  static final id = obx.QueryIntegerProperty<D2ProgramRuleVariable>(
      _entities[12].properties[0]);

  /// see [D2ProgramRuleVariable.created]
  static final created =
      obx.QueryDateProperty<D2ProgramRuleVariable>(_entities[12].properties[1]);

  /// see [D2ProgramRuleVariable.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2ProgramRuleVariable>(_entities[12].properties[2]);

  /// see [D2ProgramRuleVariable.uid]
  static final uid = obx.QueryStringProperty<D2ProgramRuleVariable>(
      _entities[12].properties[3]);

  /// see [D2ProgramRuleVariable.name]
  static final name = obx.QueryStringProperty<D2ProgramRuleVariable>(
      _entities[12].properties[4]);

  /// see [D2ProgramRuleVariable.programRuleVariableSourceType]
  static final programRuleVariableSourceType =
      obx.QueryStringProperty<D2ProgramRuleVariable>(
          _entities[12].properties[5]);

  /// see [D2ProgramRuleVariable.valueType]
  static final valueType = obx.QueryStringProperty<D2ProgramRuleVariable>(
      _entities[12].properties[6]);

  /// see [D2ProgramRuleVariable.useCodeForOptionSet]
  static final useCodeForOptionSet =
      obx.QueryBooleanProperty<D2ProgramRuleVariable>(
          _entities[12].properties[7]);

  /// see [D2ProgramRuleVariable.trackedEntityAttribute]
  static final trackedEntityAttribute =
      obx.QueryRelationToOne<D2ProgramRuleVariable, D2TrackedEntityAttribute>(
          _entities[12].properties[8]);

  /// see [D2ProgramRuleVariable.dataElement]
  static final dataElement =
      obx.QueryRelationToOne<D2ProgramRuleVariable, D2DataElement>(
          _entities[12].properties[9]);

  /// see [D2ProgramRuleVariable.programStage]
  static final programStage =
      obx.QueryRelationToOne<D2ProgramRuleVariable, D2ProgramStage>(
          _entities[12].properties[10]);

  /// see [D2ProgramRuleVariable.program]
  static final program =
      obx.QueryRelationToOne<D2ProgramRuleVariable, D2Program>(
          _entities[12].properties[11]);

  /// see [D2ProgramRuleVariable.displayName]
  static final displayName = obx.QueryStringProperty<D2ProgramRuleVariable>(
      _entities[12].properties[12]);
}

/// [D2ProgramSection] entity fields to define ObjectBox queries.
class D2ProgramSection_ {
  /// see [D2ProgramSection.id]
  static final id =
      obx.QueryIntegerProperty<D2ProgramSection>(_entities[13].properties[0]);

  /// see [D2ProgramSection.created]
  static final created =
      obx.QueryDateProperty<D2ProgramSection>(_entities[13].properties[1]);

  /// see [D2ProgramSection.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2ProgramSection>(_entities[13].properties[2]);

  /// see [D2ProgramSection.uid]
  static final uid =
      obx.QueryStringProperty<D2ProgramSection>(_entities[13].properties[3]);

  /// see [D2ProgramSection.sortOrder]
  static final sortOrder =
      obx.QueryIntegerProperty<D2ProgramSection>(_entities[13].properties[4]);

  /// see [D2ProgramSection.name]
  static final name =
      obx.QueryStringProperty<D2ProgramSection>(_entities[13].properties[5]);

  /// see [D2ProgramSection.program]
  static final program = obx.QueryRelationToOne<D2ProgramSection, D2Program>(
      _entities[13].properties[6]);

  /// see [D2ProgramSection.displayName]
  static final displayName =
      obx.QueryStringProperty<D2ProgramSection>(_entities[13].properties[7]);

  /// see [D2ProgramSection.trackedEntityAttributes]
  static final trackedEntityAttributes =
      obx.QueryRelationToMany<D2ProgramSection, D2TrackedEntityAttribute>(
          _entities[13].relations[0]);
}

/// [D2ProgramStage] entity fields to define ObjectBox queries.
class D2ProgramStage_ {
  /// see [D2ProgramStage.id]
  static final id =
      obx.QueryIntegerProperty<D2ProgramStage>(_entities[14].properties[0]);

  /// see [D2ProgramStage.created]
  static final created =
      obx.QueryDateProperty<D2ProgramStage>(_entities[14].properties[1]);

  /// see [D2ProgramStage.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2ProgramStage>(_entities[14].properties[2]);

  /// see [D2ProgramStage.uid]
  static final uid =
      obx.QueryStringProperty<D2ProgramStage>(_entities[14].properties[3]);

  /// see [D2ProgramStage.name]
  static final name =
      obx.QueryStringProperty<D2ProgramStage>(_entities[14].properties[4]);

  /// see [D2ProgramStage.description]
  static final description =
      obx.QueryStringProperty<D2ProgramStage>(_entities[14].properties[5]);

  /// see [D2ProgramStage.sortOrder]
  static final sortOrder =
      obx.QueryIntegerProperty<D2ProgramStage>(_entities[14].properties[6]);

  /// see [D2ProgramStage.validationStrategy]
  static final validationStrategy =
      obx.QueryStringProperty<D2ProgramStage>(_entities[14].properties[7]);

  /// see [D2ProgramStage.featureType]
  static final featureType =
      obx.QueryStringProperty<D2ProgramStage>(_entities[14].properties[8]);

  /// see [D2ProgramStage.reportDateToUse]
  static final reportDateToUse =
      obx.QueryStringProperty<D2ProgramStage>(_entities[14].properties[9]);

  /// see [D2ProgramStage.program]
  static final program = obx.QueryRelationToOne<D2ProgramStage, D2Program>(
      _entities[14].properties[10]);

  /// see [D2ProgramStage.displayName]
  static final displayName =
      obx.QueryStringProperty<D2ProgramStage>(_entities[14].properties[11]);

  /// see [D2ProgramStage.programStageDataElements]
  static final programStageDataElements =
      obx.QueryBacklinkToMany<D2ProgramStageDataElement, D2ProgramStage>(
          D2ProgramStageDataElement_.programStage);

  /// see [D2ProgramStage.programStageSections]
  static final programStageSections =
      obx.QueryBacklinkToMany<D2ProgramStageSection, D2ProgramStage>(
          D2ProgramStageSection_.programStage);

  /// see [D2ProgramStage.events]
  static final events =
      obx.QueryBacklinkToMany<D2Event, D2ProgramStage>(D2Event_.programStage);
}

/// [D2ProgramStageDataElement] entity fields to define ObjectBox queries.
class D2ProgramStageDataElement_ {
  /// see [D2ProgramStageDataElement.created]
  static final created = obx.QueryDateProperty<D2ProgramStageDataElement>(
      _entities[15].properties[0]);

  /// see [D2ProgramStageDataElement.id]
  static final id = obx.QueryIntegerProperty<D2ProgramStageDataElement>(
      _entities[15].properties[1]);

  /// see [D2ProgramStageDataElement.lastUpdated]
  static final lastUpdated = obx.QueryDateProperty<D2ProgramStageDataElement>(
      _entities[15].properties[2]);

  /// see [D2ProgramStageDataElement.uid]
  static final uid = obx.QueryStringProperty<D2ProgramStageDataElement>(
      _entities[15].properties[3]);

  /// see [D2ProgramStageDataElement.compulsory]
  static final compulsory = obx.QueryBooleanProperty<D2ProgramStageDataElement>(
      _entities[15].properties[4]);

  /// see [D2ProgramStageDataElement.sortOrder]
  static final sortOrder = obx.QueryIntegerProperty<D2ProgramStageDataElement>(
      _entities[15].properties[5]);

  /// see [D2ProgramStageDataElement.programStage]
  static final programStage =
      obx.QueryRelationToOne<D2ProgramStageDataElement, D2ProgramStage>(
          _entities[15].properties[6]);

  /// see [D2ProgramStageDataElement.dataElement]
  static final dataElement =
      obx.QueryRelationToOne<D2ProgramStageDataElement, D2DataElement>(
          _entities[15].properties[7]);

  /// see [D2ProgramStageDataElement.displayName]
  static final displayName = obx.QueryStringProperty<D2ProgramStageDataElement>(
      _entities[15].properties[8]);
}

/// [D2ProgramStageSection] entity fields to define ObjectBox queries.
class D2ProgramStageSection_ {
  /// see [D2ProgramStageSection.id]
  static final id = obx.QueryIntegerProperty<D2ProgramStageSection>(
      _entities[16].properties[0]);

  /// see [D2ProgramStageSection.created]
  static final created =
      obx.QueryDateProperty<D2ProgramStageSection>(_entities[16].properties[1]);

  /// see [D2ProgramStageSection.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2ProgramStageSection>(_entities[16].properties[2]);

  /// see [D2ProgramStageSection.uid]
  static final uid = obx.QueryStringProperty<D2ProgramStageSection>(
      _entities[16].properties[3]);

  /// see [D2ProgramStageSection.name]
  static final name = obx.QueryStringProperty<D2ProgramStageSection>(
      _entities[16].properties[4]);

  /// see [D2ProgramStageSection.sortOrder]
  static final sortOrder = obx.QueryIntegerProperty<D2ProgramStageSection>(
      _entities[16].properties[5]);

  /// see [D2ProgramStageSection.programStage]
  static final programStage =
      obx.QueryRelationToOne<D2ProgramStageSection, D2ProgramStage>(
          _entities[16].properties[6]);

  /// see [D2ProgramStageSection.displayName]
  static final displayName = obx.QueryStringProperty<D2ProgramStageSection>(
      _entities[16].properties[7]);

  /// see [D2ProgramStageSection.dataElements]
  static final dataElements =
      obx.QueryRelationToMany<D2ProgramStageSection, D2DataElement>(
          _entities[16].relations[0]);
}

/// [D2ProgramTrackedEntityAttribute] entity fields to define ObjectBox queries.
class D2ProgramTrackedEntityAttribute_ {
  /// see [D2ProgramTrackedEntityAttribute.created]
  static final created = obx.QueryDateProperty<D2ProgramTrackedEntityAttribute>(
      _entities[17].properties[0]);

  /// see [D2ProgramTrackedEntityAttribute.id]
  static final id = obx.QueryIntegerProperty<D2ProgramTrackedEntityAttribute>(
      _entities[17].properties[1]);

  /// see [D2ProgramTrackedEntityAttribute.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2ProgramTrackedEntityAttribute>(
          _entities[17].properties[2]);

  /// see [D2ProgramTrackedEntityAttribute.uid]
  static final uid = obx.QueryStringProperty<D2ProgramTrackedEntityAttribute>(
      _entities[17].properties[3]);

  /// see [D2ProgramTrackedEntityAttribute.sortOrder]
  static final sortOrder =
      obx.QueryIntegerProperty<D2ProgramTrackedEntityAttribute>(
          _entities[17].properties[4]);

  /// see [D2ProgramTrackedEntityAttribute.displayInList]
  static final displayInList =
      obx.QueryBooleanProperty<D2ProgramTrackedEntityAttribute>(
          _entities[17].properties[5]);

  /// see [D2ProgramTrackedEntityAttribute.mandatory]
  static final mandatory =
      obx.QueryBooleanProperty<D2ProgramTrackedEntityAttribute>(
          _entities[17].properties[6]);

  /// see [D2ProgramTrackedEntityAttribute.searchable]
  static final searchable =
      obx.QueryBooleanProperty<D2ProgramTrackedEntityAttribute>(
          _entities[17].properties[7]);

  /// see [D2ProgramTrackedEntityAttribute.renderOptionAsRadio]
  static final renderOptionAsRadio =
      obx.QueryBooleanProperty<D2ProgramTrackedEntityAttribute>(
          _entities[17].properties[8]);

  /// see [D2ProgramTrackedEntityAttribute.program]
  static final program =
      obx.QueryRelationToOne<D2ProgramTrackedEntityAttribute, D2Program>(
          _entities[17].properties[9]);

  /// see [D2ProgramTrackedEntityAttribute.trackedEntityAttribute]
  static final trackedEntityAttribute = obx.QueryRelationToOne<
      D2ProgramTrackedEntityAttribute,
      D2TrackedEntityAttribute>(_entities[17].properties[10]);

  /// see [D2ProgramTrackedEntityAttribute.displayName]
  static final displayName =
      obx.QueryStringProperty<D2ProgramTrackedEntityAttribute>(
          _entities[17].properties[11]);
}

/// [D2RelationshipType] entity fields to define ObjectBox queries.
class D2RelationshipType_ {
  /// see [D2RelationshipType.id]
  static final id =
      obx.QueryIntegerProperty<D2RelationshipType>(_entities[18].properties[0]);

  /// see [D2RelationshipType.created]
  static final created =
      obx.QueryDateProperty<D2RelationshipType>(_entities[18].properties[1]);

  /// see [D2RelationshipType.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2RelationshipType>(_entities[18].properties[2]);

  /// see [D2RelationshipType.uid]
  static final uid =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[3]);

  /// see [D2RelationshipType.name]
  static final name =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[4]);

  /// see [D2RelationshipType.referral]
  static final referral =
      obx.QueryBooleanProperty<D2RelationshipType>(_entities[18].properties[5]);

  /// see [D2RelationshipType.fromToName]
  static final fromToName =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[6]);

  /// see [D2RelationshipType.toFromName]
  static final toFromName =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[7]);

  /// see [D2RelationshipType.displayName]
  static final displayName =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[8]);

  /// see [D2RelationshipType.fromTrackedEntityType]
  static final fromTrackedEntityType =
      obx.QueryRelationToOne<D2RelationshipType, D2TrackedEntityType>(
          _entities[18].properties[9]);

  /// see [D2RelationshipType.fromProgram]
  static final fromProgram =
      obx.QueryRelationToOne<D2RelationshipType, D2Program>(
          _entities[18].properties[10]);

  /// see [D2RelationshipType.fromProgramStage]
  static final fromProgramStage =
      obx.QueryRelationToOne<D2RelationshipType, D2ProgramStage>(
          _entities[18].properties[11]);

  /// see [D2RelationshipType.toTrackedEntityType]
  static final toTrackedEntityType =
      obx.QueryRelationToOne<D2RelationshipType, D2TrackedEntityType>(
          _entities[18].properties[12]);

  /// see [D2RelationshipType.toProgram]
  static final toProgram =
      obx.QueryRelationToOne<D2RelationshipType, D2Program>(
          _entities[18].properties[13]);

  /// see [D2RelationshipType.toProgramStage]
  static final toProgramStage =
      obx.QueryRelationToOne<D2RelationshipType, D2ProgramStage>(
          _entities[18].properties[14]);

  /// see [D2RelationshipType.fromRelationshipEntity]
  static final fromRelationshipEntity =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[15]);

  /// see [D2RelationshipType.toRelationshipEntity]
  static final toRelationshipEntity =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[16]);

  /// see [D2RelationshipType.displayFromToName]
  static final displayFromToName =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[17]);

  /// see [D2RelationshipType.displayToFromName]
  static final displayToFromName =
      obx.QueryStringProperty<D2RelationshipType>(_entities[18].properties[18]);
}

/// [D2SystemInfo] entity fields to define ObjectBox queries.
class D2SystemInfo_ {
  /// see [D2SystemInfo.id]
  static final id =
      obx.QueryIntegerProperty<D2SystemInfo>(_entities[19].properties[0]);

  /// see [D2SystemInfo.version]
  static final version =
      obx.QueryStringProperty<D2SystemInfo>(_entities[19].properties[1]);

  /// see [D2SystemInfo.revision]
  static final revision =
      obx.QueryStringProperty<D2SystemInfo>(_entities[19].properties[2]);

  /// see [D2SystemInfo.calendar]
  static final calendar =
      obx.QueryStringProperty<D2SystemInfo>(_entities[19].properties[3]);

  /// see [D2SystemInfo.dateFormat]
  static final dateFormat =
      obx.QueryStringProperty<D2SystemInfo>(_entities[19].properties[4]);

  /// see [D2SystemInfo.contextPath]
  static final contextPath =
      obx.QueryStringProperty<D2SystemInfo>(_entities[19].properties[5]);

  /// see [D2SystemInfo.systemId]
  static final systemId =
      obx.QueryStringProperty<D2SystemInfo>(_entities[19].properties[6]);

  /// see [D2SystemInfo.systemName]
  static final systemName =
      obx.QueryStringProperty<D2SystemInfo>(_entities[19].properties[7]);
}

/// [D2TrackedEntityAttribute] entity fields to define ObjectBox queries.
class D2TrackedEntityAttribute_ {
  /// see [D2TrackedEntityAttribute.id]
  static final id = obx.QueryIntegerProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[0]);

  /// see [D2TrackedEntityAttribute.created]
  static final created = obx.QueryDateProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[1]);

  /// see [D2TrackedEntityAttribute.lastUpdated]
  static final lastUpdated = obx.QueryDateProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[2]);

  /// see [D2TrackedEntityAttribute.uid]
  static final uid = obx.QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[3]);

  /// see [D2TrackedEntityAttribute.name]
  static final name = obx.QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[4]);

  /// see [D2TrackedEntityAttribute.code]
  static final code = obx.QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[5]);

  /// see [D2TrackedEntityAttribute.formName]
  static final formName = obx.QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[6]);

  /// see [D2TrackedEntityAttribute.shortName]
  static final shortName = obx.QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[7]);

  /// see [D2TrackedEntityAttribute.description]
  static final description = obx.QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[8]);

  /// see [D2TrackedEntityAttribute.aggregationType]
  static final aggregationType =
      obx.QueryStringProperty<D2TrackedEntityAttribute>(
          _entities[20].properties[9]);

  /// see [D2TrackedEntityAttribute.valueType]
  static final valueType = obx.QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[10]);

  /// see [D2TrackedEntityAttribute.zeroIsSignificant]
  static final zeroIsSignificant =
      obx.QueryBooleanProperty<D2TrackedEntityAttribute>(
          _entities[20].properties[11]);

  /// see [D2TrackedEntityAttribute.optionSet]
  static final optionSet =
      obx.QueryRelationToOne<D2TrackedEntityAttribute, D2OptionSet>(
          _entities[20].properties[12]);

  /// see [D2TrackedEntityAttribute.displayName]
  static final displayName = obx.QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[20].properties[13]);

  /// see [D2TrackedEntityAttribute.displayFormName]
  static final displayFormName =
      obx.QueryStringProperty<D2TrackedEntityAttribute>(
          _entities[20].properties[14]);

  /// see [D2TrackedEntityAttribute.legendSets]
  static final legendSets =
      obx.QueryRelationToMany<D2TrackedEntityAttribute, D2LegendSet>(
          _entities[20].relations[0]);
}

/// [D2TrackedEntityAttributeValue] entity fields to define ObjectBox queries.
class D2TrackedEntityAttributeValue_ {
  /// see [D2TrackedEntityAttributeValue.id]
  static final id = obx.QueryIntegerProperty<D2TrackedEntityAttributeValue>(
      _entities[21].properties[0]);

  /// see [D2TrackedEntityAttributeValue.value]
  static final value = obx.QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[21].properties[1]);

  /// see [D2TrackedEntityAttributeValue.createdAt]
  static final createdAt = obx.QueryDateProperty<D2TrackedEntityAttributeValue>(
      _entities[21].properties[2]);

  /// see [D2TrackedEntityAttributeValue.updatedAt]
  static final updatedAt = obx.QueryDateProperty<D2TrackedEntityAttributeValue>(
      _entities[21].properties[3]);

  /// see [D2TrackedEntityAttributeValue.trackedEntityAttribute]
  static final trackedEntityAttribute = obx.QueryRelationToOne<
      D2TrackedEntityAttributeValue,
      D2TrackedEntityAttribute>(_entities[21].properties[4]);

  /// see [D2TrackedEntityAttributeValue.trackedEntity]
  static final trackedEntity =
      obx.QueryRelationToOne<D2TrackedEntityAttributeValue, D2TrackedEntity>(
          _entities[21].properties[5]);

  /// see [D2TrackedEntityAttributeValue.synced]
  static final synced = obx.QueryBooleanProperty<D2TrackedEntityAttributeValue>(
      _entities[21].properties[6]);

  /// see [D2TrackedEntityAttributeValue.uid]
  static final uid = obx.QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[21].properties[7]);
}

/// [D2TrackedEntityType] entity fields to define ObjectBox queries.
class D2TrackedEntityType_ {
  /// see [D2TrackedEntityType.id]
  static final id = obx.QueryIntegerProperty<D2TrackedEntityType>(
      _entities[22].properties[0]);

  /// see [D2TrackedEntityType.created]
  static final created =
      obx.QueryDateProperty<D2TrackedEntityType>(_entities[22].properties[1]);

  /// see [D2TrackedEntityType.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2TrackedEntityType>(_entities[22].properties[2]);

  /// see [D2TrackedEntityType.uid]
  static final uid =
      obx.QueryStringProperty<D2TrackedEntityType>(_entities[22].properties[3]);

  /// see [D2TrackedEntityType.name]
  static final name =
      obx.QueryStringProperty<D2TrackedEntityType>(_entities[22].properties[4]);

  /// see [D2TrackedEntityType.description]
  static final description =
      obx.QueryStringProperty<D2TrackedEntityType>(_entities[22].properties[5]);

  /// see [D2TrackedEntityType.displayName]
  static final displayName =
      obx.QueryStringProperty<D2TrackedEntityType>(_entities[22].properties[6]);

  /// see [D2TrackedEntityType.trackedEntityTypeAttributes]
  static final trackedEntityTypeAttributes = obx.QueryRelationToMany<
      D2TrackedEntityType,
      D2TrackedEntityTypeAttribute>(_entities[22].relations[0]);
}

/// [D2TrackedEntityTypeAttribute] entity fields to define ObjectBox queries.
class D2TrackedEntityTypeAttribute_ {
  /// see [D2TrackedEntityTypeAttribute.id]
  static final id = obx.QueryIntegerProperty<D2TrackedEntityTypeAttribute>(
      _entities[23].properties[0]);

  /// see [D2TrackedEntityTypeAttribute.created]
  static final created = obx.QueryDateProperty<D2TrackedEntityTypeAttribute>(
      _entities[23].properties[1]);

  /// see [D2TrackedEntityTypeAttribute.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2TrackedEntityTypeAttribute>(
          _entities[23].properties[2]);

  /// see [D2TrackedEntityTypeAttribute.uid]
  static final uid = obx.QueryStringProperty<D2TrackedEntityTypeAttribute>(
      _entities[23].properties[3]);

  /// see [D2TrackedEntityTypeAttribute.trackedEntityType]
  static final trackedEntityType =
      obx.QueryRelationToOne<D2TrackedEntityTypeAttribute, D2TrackedEntityType>(
          _entities[23].properties[4]);

  /// see [D2TrackedEntityTypeAttribute.trackedEntityAttribute]
  static final trackedEntityAttribute = obx.QueryRelationToOne<
      D2TrackedEntityTypeAttribute,
      D2TrackedEntityAttribute>(_entities[23].properties[5]);

  /// see [D2TrackedEntityTypeAttribute.valueType]
  static final valueType =
      obx.QueryStringProperty<D2TrackedEntityTypeAttribute>(
          _entities[23].properties[6]);

  /// see [D2TrackedEntityTypeAttribute.displayName]
  static final displayName =
      obx.QueryStringProperty<D2TrackedEntityTypeAttribute>(
          _entities[23].properties[7]);

  /// see [D2TrackedEntityTypeAttribute.displayShortName]
  static final displayShortName =
      obx.QueryStringProperty<D2TrackedEntityTypeAttribute>(
          _entities[23].properties[8]);

  /// see [D2TrackedEntityTypeAttribute.mandatory]
  static final mandatory =
      obx.QueryBooleanProperty<D2TrackedEntityTypeAttribute>(
          _entities[23].properties[9]);
}

/// [D2User] entity fields to define ObjectBox queries.
class D2User_ {
  /// see [D2User.id]
  static final id =
      obx.QueryIntegerProperty<D2User>(_entities[24].properties[0]);

  /// see [D2User.username]
  static final username =
      obx.QueryStringProperty<D2User>(_entities[24].properties[1]);

  /// see [D2User.firstName]
  static final firstName =
      obx.QueryStringProperty<D2User>(_entities[24].properties[2]);

  /// see [D2User.surname]
  static final surname =
      obx.QueryStringProperty<D2User>(_entities[24].properties[3]);

  /// see [D2User.email]
  static final email =
      obx.QueryStringProperty<D2User>(_entities[24].properties[4]);

  /// see [D2User.authorities]
  static final authorities =
      obx.QueryStringVectorProperty<D2User>(_entities[24].properties[5]);

  /// see [D2User.programs]
  static final programs =
      obx.QueryStringVectorProperty<D2User>(_entities[24].properties[6]);

  /// see [D2User.organisationUnits]
  static final organisationUnits =
      obx.QueryStringVectorProperty<D2User>(_entities[24].properties[7]);

  /// see [D2User.uid]
  static final uid =
      obx.QueryStringProperty<D2User>(_entities[24].properties[8]);

  /// see [D2User.userRoles]
  static final userRoles =
      obx.QueryRelationToMany<D2User, D2UserRole>(_entities[24].relations[0]);

  /// see [D2User.userGroups]
  static final userGroups =
      obx.QueryRelationToMany<D2User, D2UserGroup>(_entities[24].relations[1]);
}

/// [D2UserGroup] entity fields to define ObjectBox queries.
class D2UserGroup_ {
  /// see [D2UserGroup.id]
  static final id =
      obx.QueryIntegerProperty<D2UserGroup>(_entities[25].properties[0]);

  /// see [D2UserGroup.uid]
  static final uid =
      obx.QueryStringProperty<D2UserGroup>(_entities[25].properties[1]);

  /// see [D2UserGroup.name]
  static final name =
      obx.QueryStringProperty<D2UserGroup>(_entities[25].properties[2]);

  /// see [D2UserGroup.created]
  static final created =
      obx.QueryDateProperty<D2UserGroup>(_entities[25].properties[3]);

  /// see [D2UserGroup.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2UserGroup>(_entities[25].properties[4]);

  /// see [D2UserGroup.displayName]
  static final displayName =
      obx.QueryStringProperty<D2UserGroup>(_entities[25].properties[5]);
}

/// [D2UserRole] entity fields to define ObjectBox queries.
class D2UserRole_ {
  /// see [D2UserRole.id]
  static final id =
      obx.QueryIntegerProperty<D2UserRole>(_entities[26].properties[0]);

  /// see [D2UserRole.uid]
  static final uid =
      obx.QueryStringProperty<D2UserRole>(_entities[26].properties[1]);

  /// see [D2UserRole.name]
  static final name =
      obx.QueryStringProperty<D2UserRole>(_entities[26].properties[2]);

  /// see [D2UserRole.authorities]
  static final authorities =
      obx.QueryStringVectorProperty<D2UserRole>(_entities[26].properties[3]);

  /// see [D2UserRole.created]
  static final created =
      obx.QueryDateProperty<D2UserRole>(_entities[26].properties[4]);

  /// see [D2UserRole.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2UserRole>(_entities[26].properties[5]);

  /// see [D2UserRole.displayName]
  static final displayName =
      obx.QueryStringProperty<D2UserRole>(_entities[26].properties[6]);
}

/// [D2AttributeValue] entity fields to define ObjectBox queries.
class D2AttributeValue_ {
  /// see [D2AttributeValue.id]
  static final id =
      obx.QueryIntegerProperty<D2AttributeValue>(_entities[27].properties[0]);

  /// see [D2AttributeValue.dataElement]
  static final dataElement =
      obx.QueryRelationToOne<D2AttributeValue, D2DataElement>(
          _entities[27].properties[1]);

  /// see [D2AttributeValue.trackedEntityAttribute]
  static final trackedEntityAttribute =
      obx.QueryRelationToOne<D2AttributeValue, D2TrackedEntityAttribute>(
          _entities[27].properties[2]);
}

/// [D2Relationship] entity fields to define ObjectBox queries.
class D2Relationship_ {
  /// see [D2Relationship.id]
  static final id =
      obx.QueryIntegerProperty<D2Relationship>(_entities[28].properties[0]);

  /// see [D2Relationship.createdAt]
  static final createdAt =
      obx.QueryDateProperty<D2Relationship>(_entities[28].properties[1]);

  /// see [D2Relationship.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<D2Relationship>(_entities[28].properties[2]);

  /// see [D2Relationship.uid]
  static final uid =
      obx.QueryStringProperty<D2Relationship>(_entities[28].properties[3]);

  /// see [D2Relationship.relationshipName]
  static final relationshipName =
      obx.QueryStringProperty<D2Relationship>(_entities[28].properties[4]);

  /// see [D2Relationship.bidirectional]
  static final bidirectional =
      obx.QueryBooleanProperty<D2Relationship>(_entities[28].properties[5]);

  /// see [D2Relationship.relationshipType]
  static final relationshipType =
      obx.QueryStringProperty<D2Relationship>(_entities[28].properties[6]);

  /// see [D2Relationship.fromType]
  static final fromType =
      obx.QueryStringProperty<D2Relationship>(_entities[28].properties[7]);

  /// see [D2Relationship.fromId]
  static final fromId =
      obx.QueryStringProperty<D2Relationship>(_entities[28].properties[8]);

  /// see [D2Relationship.toType]
  static final toType =
      obx.QueryStringProperty<D2Relationship>(_entities[28].properties[9]);

  /// see [D2Relationship.toId]
  static final toId =
      obx.QueryStringProperty<D2Relationship>(_entities[28].properties[10]);

  /// see [D2Relationship.synced]
  static final synced =
      obx.QueryBooleanProperty<D2Relationship>(_entities[28].properties[11]);
}

/// [D2TrackedEntity] entity fields to define ObjectBox queries.
class D2TrackedEntity_ {
  /// see [D2TrackedEntity.id]
  static final id =
      obx.QueryIntegerProperty<D2TrackedEntity>(_entities[29].properties[0]);

  /// see [D2TrackedEntity.createdAt]
  static final createdAt =
      obx.QueryDateProperty<D2TrackedEntity>(_entities[29].properties[1]);

  /// see [D2TrackedEntity.updatedAt]
  static final updatedAt =
      obx.QueryDateProperty<D2TrackedEntity>(_entities[29].properties[2]);

  /// see [D2TrackedEntity.uid]
  static final uid =
      obx.QueryStringProperty<D2TrackedEntity>(_entities[29].properties[3]);

  /// see [D2TrackedEntity.potentialDuplicate]
  static final potentialDuplicate =
      obx.QueryBooleanProperty<D2TrackedEntity>(_entities[29].properties[4]);

  /// see [D2TrackedEntity.deleted]
  static final deleted =
      obx.QueryBooleanProperty<D2TrackedEntity>(_entities[29].properties[5]);

  /// see [D2TrackedEntity.inactive]
  static final inactive =
      obx.QueryBooleanProperty<D2TrackedEntity>(_entities[29].properties[6]);

  /// see [D2TrackedEntity.synced]
  static final synced =
      obx.QueryBooleanProperty<D2TrackedEntity>(_entities[29].properties[7]);

  /// see [D2TrackedEntity.orgUnit]
  static final orgUnit = obx.QueryRelationToOne<D2TrackedEntity, D2OrgUnit>(
      _entities[29].properties[8]);

  /// see [D2TrackedEntity.trackedEntityType]
  static final trackedEntityType =
      obx.QueryRelationToOne<D2TrackedEntity, D2TrackedEntityType>(
          _entities[29].properties[9]);

  /// see [D2TrackedEntity.enrollments]
  static final enrollments =
      obx.QueryBacklinkToMany<D2Enrollment, D2TrackedEntity>(
          D2Enrollment_.trackedEntity);

  /// see [D2TrackedEntity.attributes]
  static final attributes =
      obx.QueryBacklinkToMany<D2TrackedEntityAttributeValue, D2TrackedEntity>(
          D2TrackedEntityAttributeValue_.trackedEntity);

  /// see [D2TrackedEntity.events]
  static final events =
      obx.QueryBacklinkToMany<D2Event, D2TrackedEntity>(D2Event_.trackedEntity);
}

/// [D2OrgUnit] entity fields to define ObjectBox queries.
class D2OrgUnit_ {
  /// see [D2OrgUnit.id]
  static final id =
      obx.QueryIntegerProperty<D2OrgUnit>(_entities[30].properties[0]);

  /// see [D2OrgUnit.name]
  static final name =
      obx.QueryStringProperty<D2OrgUnit>(_entities[30].properties[1]);

  /// see [D2OrgUnit.shortName]
  static final shortName =
      obx.QueryStringProperty<D2OrgUnit>(_entities[30].properties[2]);

  /// see [D2OrgUnit.uid]
  static final uid =
      obx.QueryStringProperty<D2OrgUnit>(_entities[30].properties[3]);

  /// see [D2OrgUnit.path]
  static final path =
      obx.QueryStringProperty<D2OrgUnit>(_entities[30].properties[4]);

  /// see [D2OrgUnit.level]
  static final level =
      obx.QueryIntegerProperty<D2OrgUnit>(_entities[30].properties[5]);

  /// see [D2OrgUnit.created]
  static final created =
      obx.QueryDateProperty<D2OrgUnit>(_entities[30].properties[6]);

  /// see [D2OrgUnit.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2OrgUnit>(_entities[30].properties[7]);

  /// see [D2OrgUnit.displayName]
  static final displayName =
      obx.QueryStringProperty<D2OrgUnit>(_entities[30].properties[8]);
}

/// [D2OrgUnitGroup] entity fields to define ObjectBox queries.
class D2OrgUnitGroup_ {
  /// see [D2OrgUnitGroup.id]
  static final id =
      obx.QueryIntegerProperty<D2OrgUnitGroup>(_entities[31].properties[0]);

  /// see [D2OrgUnitGroup.name]
  static final name =
      obx.QueryStringProperty<D2OrgUnitGroup>(_entities[31].properties[1]);

  /// see [D2OrgUnitGroup.uid]
  static final uid =
      obx.QueryStringProperty<D2OrgUnitGroup>(_entities[31].properties[2]);

  /// see [D2OrgUnitGroup.created]
  static final created =
      obx.QueryDateProperty<D2OrgUnitGroup>(_entities[31].properties[3]);

  /// see [D2OrgUnitGroup.lastUpdated]
  static final lastUpdated =
      obx.QueryDateProperty<D2OrgUnitGroup>(_entities[31].properties[4]);

  /// see [D2OrgUnitGroup.displayName]
  static final displayName =
      obx.QueryStringProperty<D2OrgUnitGroup>(_entities[31].properties[5]);

  /// see [D2OrgUnitGroup.organisationUnits]
  static final organisationUnits =
      obx.QueryRelationToMany<D2OrgUnitGroup, D2OrgUnit>(
          _entities[31].relations[0]);
}
