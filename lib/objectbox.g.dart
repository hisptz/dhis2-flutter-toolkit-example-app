// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/data/dataValue.dart';
import 'models/data/enrollment.dart';
import 'models/data/event.dart';
import 'models/data/relationship.dart';
import 'models/data/trackedEntity.dart';
import 'models/data/trackedEntityAttributeValue.dart';
import 'models/metadata/dataElement.dart';
import 'models/metadata/legend.dart';
import 'models/metadata/legendSet.dart';
import 'models/metadata/option.dart';
import 'models/metadata/optionSet.dart';
import 'models/metadata/organisationUnit.dart';
import 'models/metadata/organisationUnitGroup.dart';
import 'models/metadata/organisationUnitLevel.dart';
import 'models/metadata/program.dart';
import 'models/metadata/programRule.dart';
import 'models/metadata/programRuleAction.dart';
import 'models/metadata/programRuleVariable.dart';
import 'models/metadata/programSection.dart';
import 'models/metadata/programStage.dart';
import 'models/metadata/programStageDataElement.dart';
import 'models/metadata/programStageSection.dart';
import 'models/metadata/programTrackedEntityAttribute.dart';
import 'models/metadata/relationshipConstraint.dart';
import 'models/metadata/relationshipType.dart';
import 'models/metadata/systemInfo.dart';
import 'models/metadata/trackedEntityAttributes.dart';
import 'models/metadata/trackedEntityType.dart';
import 'models/metadata/trackedEntityTypeAttribute.dart';
import 'models/metadata/user.dart';
import 'models/metadata/userGroup.dart';
import 'models/metadata/userRole.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 784061655903445017),
      name: 'D2Program',
      lastPropertyId: const IdUid(7, 6651566694199139538),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 731981465593755214),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5942747410416075892),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7244527668018477745),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4065724878135064418),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 6348404177365134842)),
        ModelProperty(
            id: const IdUid(5, 7670298115911813786),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1560835661624921605),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6651566694199139538),
            name: 'accessLevel',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 7678144714398439279),
            name: 'organisationUnits',
            targetId: const IdUid(12, 3533115219003406950)),
        ModelRelation(
            id: const IdUid(3, 2650518416803276118),
            name: 'programStages',
            targetId: const IdUid(19, 1100517302235916065)),
        ModelRelation(
            id: const IdUid(4, 2699706089554384157),
            name: 'programSections',
            targetId: const IdUid(18, 4992292803576437161)),
        ModelRelation(
            id: const IdUid(5, 3166036555494123724),
            name: 'programTrackedEntityAttributes',
            targetId: const IdUid(22, 484698399470094036))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 784428224486434988),
      name: 'D2User',
      lastPropertyId: const IdUid(9, 4610447679317433700),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4740670750269959118),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3337853285475811329),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8077782244619321779),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5228911003215670162),
            name: 'surname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5703305033010439394),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6045529702742161989),
            name: 'authorities',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7282913972970824096),
            name: 'programs',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 341283424867370620),
            name: 'organisationUnits',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4610447679317433700),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 872669531338525688))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(6, 1707041511110163383),
            name: 'userRoles',
            targetId: const IdUid(8, 6236218518865426330)),
        ModelRelation(
            id: const IdUid(7, 5697104525982283811),
            name: 'userGroups',
            targetId: const IdUid(7, 5214832957591990080))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2220575794087642993),
      name: 'DHIS2Option',
      lastPropertyId: const IdUid(8, 7422301151639803689),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1805778226076036961),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5320329813454663380),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5561842420883330058),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4474423072050747396),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4409193107483852894),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8836303767296751200),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8924317458351008120),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7422301151639803689),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 1264142527827436827),
            relationTarget: 'DHIS2OptionSet')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1585051244964477588),
      name: 'DHIS2OptionSet',
      lastPropertyId: const IdUid(7, 4293945451329306905),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6890540110885328683),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4553385524096198853),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7265352072340358799),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6114477378600129647),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3686269064179016354),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1023333679701477991),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4293945451329306905),
            name: 'valueType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 168756916913546614),
            name: 'options',
            targetId: const IdUid(5, 2220575794087642993))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 5214832957591990080),
      name: 'DHIS2UserGroup',
      lastPropertyId: const IdUid(5, 2126155674438058800),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3173751773929113116),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5527985548968512804),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(9, 7478124848539165864)),
        ModelProperty(
            id: const IdUid(3, 8975816434096438883),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const IdUid(10, 7372570837299109316)),
        ModelProperty(
            id: const IdUid(4, 4405113484909139269),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2126155674438058800),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6236218518865426330),
      name: 'DHIS2UserRole',
      lastPropertyId: const IdUid(6, 2201744455314186557),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5475367209372334461),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3366982164989886052),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(11, 3980629958903876206)),
        ModelProperty(
            id: const IdUid(3, 5168796340871081271),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6898616222510635647),
            name: 'authorities',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6269933763841506096),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2201744455314186557),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 8727410791199435003),
      name: 'DataElement',
      lastPropertyId: const IdUid(14, 2664851482207647854),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2827218541270639500),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 8511600017609478896),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4381794720645662204),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(12, 252292656563156360)),
        ModelProperty(
            id: const IdUid(4, 253579111286959981),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8351200321582148064),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7850992860955014877),
            name: 'formName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 292522789334037173),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3727296563033623274),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6057623869796957991),
            name: 'aggregationType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5771740901468445585),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4450174964313502773),
            name: 'domainType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7146294439882219206),
            name: 'zeroIsSignificant',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6011456745097870367),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 752171352069194213),
            relationTarget: 'DHIS2OptionSet'),
        ModelProperty(
            id: const IdUid(14, 2664851482207647854),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 7120825854978993706),
            name: 'legendSets',
            targetId: const IdUid(11, 5416231374184059532))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 3005235601496216358),
      name: 'Legend',
      lastPropertyId: const IdUid(9, 2093180561880936668),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1678008609334583924),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3609495071359247853),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4123050029838481541),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5064740864236993218),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3525145163694459027),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7855526073534505832),
            name: 'startValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2672810359312460165),
            name: 'endValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6510728991076218616),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2093180561880936668),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 5416231374184059532),
      name: 'LegendSet',
      lastPropertyId: const IdUid(6, 1993217057244810060),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8267906871698744682),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4160809245942308068),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5490446545081655475),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4122088678024775550),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(14, 7176916198353155623)),
        ModelProperty(
            id: const IdUid(5, 344809983847258842),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1993217057244810060),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 5981473348292947245),
            name: 'legends',
            targetId: const IdUid(10, 3005235601496216358))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 3533115219003406950),
      name: 'OrganisationUnit',
      lastPropertyId: const IdUid(8, 397947299634867183),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 619737833983388670),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7887226632615745868),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8331312940731530803),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3540900057475042199),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(15, 4010499164607313549)),
        ModelProperty(
            id: const IdUid(5, 5857952139034397319),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 169070259926886618),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5819649972361589632),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 397947299634867183),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 4182545360710064651),
      name: 'OrganisationUnitGroup',
      lastPropertyId: const IdUid(5, 6556539937475797268),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3168576507949073969),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6885007097495695937),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6277815851865312898),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(16, 4135088295137011824)),
        ModelProperty(
            id: const IdUid(4, 2866518925966817966),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6556539937475797268),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(12, 2468728460435372829),
            name: 'organisationUnits',
            targetId: const IdUid(12, 3533115219003406950))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 3244163543925910430),
      name: 'OrganisationUnitLevel',
      lastPropertyId: const IdUid(6, 8981461653668454468),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6926665381019208946),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1952975157641280745),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3807479811077574427),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(17, 8381759341907076396)),
        ModelProperty(
            id: const IdUid(4, 8612757142036618258),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1271796338408601070),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8981461653668454468),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 6605458261225629360),
      name: 'ProgramRule',
      lastPropertyId: const IdUid(8, 5742236631101869042),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4910803703722252418),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3880007069675923488),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4151433152324876533),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8088773569688098487),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4573448710592306255),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8272397848258668890),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3036758073485277450),
            name: 'condition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5742236631101869042),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 8691663098662689030),
            relationTarget: 'D2Program')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(13, 1543219610624476337),
            name: 'programRuleActions',
            targetId: const IdUid(16, 4040648064048819329))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 4040648064048819329),
      name: 'ProgramRuleAction',
      lastPropertyId: const IdUid(13, 5918978072866039421),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2182252312386896541),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3187431145113517293),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3797244623483729870),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6427691818162722792),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4655921076872629418),
            name: 'programRuleActionType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7627725373115145619),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4976149506279761222),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2266141707002372554),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1776383545120428127),
            name: 'programRuleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 1843157597102374375),
            relationTarget: 'ProgramRule'),
        ModelProperty(
            id: const IdUid(10, 478390131738315281),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 143390320406328428),
            relationTarget: 'DataElement'),
        ModelProperty(
            id: const IdUid(11, 6191683196975691512),
            name: 'programStageSectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 2252262149142000567),
            relationTarget: 'ProgramStageSection'),
        ModelProperty(
            id: const IdUid(12, 4731159072852149911),
            name: 'programSectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 758034685531058671),
            relationTarget: 'ProgramSection'),
        ModelProperty(
            id: const IdUid(13, 5918978072866039421),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(23, 1797907715825188457),
            relationTarget: 'TrackedEntityAttribute')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 5450554405818306530),
      name: 'ProgramRuleVariable',
      lastPropertyId: const IdUid(12, 7292176878677109340),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7310938068814815488),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 558782282646582800),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3685072400984913854),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6270402064442761714),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(24, 3517102282398525092)),
        ModelProperty(
            id: const IdUid(5, 2163134569133296572),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9012145552579980064),
            name: 'programRuleVariableSourceType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8633439686471346756),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 202295917899698419),
            name: 'useCodeForOptionSet',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5682921549193268679),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 4097009826109950589),
            relationTarget: 'TrackedEntityAttribute'),
        ModelProperty(
            id: const IdUid(10, 789782574286467872),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(26, 151964662994688723),
            relationTarget: 'DataElement'),
        ModelProperty(
            id: const IdUid(11, 2257072711798602951),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 6581741313541599805),
            relationTarget: 'ProgramStage'),
        ModelProperty(
            id: const IdUid(12, 7292176878677109340),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(28, 4647914511708570623),
            relationTarget: 'D2Program')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 4992292803576437161),
      name: 'ProgramSection',
      lastPropertyId: const IdUid(7, 6514764877849433612),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4266266244968532320),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5999552887041579088),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2766578314671685920),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5810957130752996575),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(29, 290348000296956707)),
        ModelProperty(
            id: const IdUid(5, 519056494920097047),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2100319442050354322),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6514764877849433612),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(30, 6432912065398686554),
            relationTarget: 'D2Program')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(14, 3376563543879757789),
            name: 'trackedEntityAttributes',
            targetId: const IdUid(26, 6035025695282448024))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 1100517302235916065),
      name: 'ProgramStage',
      lastPropertyId: const IdUid(11, 2233612148098090279),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7947003621123339058),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1625797208497835442),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3269319466874885424),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1829325792460269856),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(31, 2637976156692664118)),
        ModelProperty(
            id: const IdUid(5, 6259648698074131830),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8517924435804966557),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3819139686844919610),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4457151479551002671),
            name: 'validationStrategy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6605859744566696685),
            name: 'featureType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2264932531928506061),
            name: 'reportDateToUse',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2233612148098090279),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(32, 7036564746265484955),
            relationTarget: 'D2Program')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(15, 5812742867631777983),
            name: 'programStageDataElements',
            targetId: const IdUid(20, 2261360780583041541)),
        ModelRelation(
            id: const IdUid(17, 2971089296658598238),
            name: 'programStageSections',
            targetId: const IdUid(21, 3571748021839996533))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 2261360780583041541),
      name: 'ProgramStageDataElement',
      lastPropertyId: const IdUid(8, 2539111496723012808),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 171674650025831855),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 6954197559686750902),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2259553535544292253),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4899250429947369577),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3868559348191241558),
            name: 'compulsory',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8387845722133633385),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6075697783204477226),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(33, 5878607999278782610),
            relationTarget: 'ProgramStage'),
        ModelProperty(
            id: const IdUid(8, 2539111496723012808),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(34, 17322192350642744),
            relationTarget: 'DataElement')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 3571748021839996533),
      name: 'ProgramStageSection',
      lastPropertyId: const IdUid(7, 8885132879351905410),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6034543011220850758),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2765887793945190938),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7048322410710535158),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 932415940625201202),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(35, 9067725219202028772)),
        ModelProperty(
            id: const IdUid(5, 765328629179866458),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3852937195243680462),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8885132879351905410),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(36, 1575847259098734342),
            relationTarget: 'ProgramStage')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(18, 6421570765243624440),
            name: 'dataElements',
            targetId: const IdUid(9, 8727410791199435003))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 484698399470094036),
      name: 'ProgramTrackedEntityAttribute',
      lastPropertyId: const IdUid(12, 7086003360856010854),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5849881039688933124),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 8386929182616052195),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 1355429284574532608),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8307385204722990899),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2326663130197214027),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5729185797001648431),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3926118068022811083),
            name: 'displayInList',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7046349453633711352),
            name: 'mandatory',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8161678956829523229),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8558522215386330704),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1571503361578428191),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(37, 7907364676786493277),
            relationTarget: 'D2Program'),
        ModelProperty(
            id: const IdUid(12, 7086003360856010854),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(38, 67834329259765725),
            relationTarget: 'TrackedEntityAttribute')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(23, 5883424635827122599),
      name: 'RelationshipConstraint',
      lastPropertyId: const IdUid(7, 6695307159071316463),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 569272227241737851),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 530160107646510100),
            name: 'relationshipEntity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8366274534266548248),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5033177377975197981),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(39, 4307055130694350331),
            relationTarget: 'TrackedEntityType'),
        ModelProperty(
            id: const IdUid(5, 3894626289234164267),
            name: 'relationshipTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(40, 4997166133218495183),
            relationTarget: 'RelationshipType'),
        ModelProperty(
            id: const IdUid(6, 3076317894581826134),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(41, 1680818388923388635),
            relationTarget: 'D2Program'),
        ModelProperty(
            id: const IdUid(7, 6695307159071316463),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(42, 8744301271215836312),
            relationTarget: 'ProgramStage')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(24, 6868682123909377463),
      name: 'RelationshipType',
      lastPropertyId: const IdUid(12, 1306931898324752575),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5607928755618896329),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8189702036455110342),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2895071157537317232),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7300961938531581390),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(43, 6718981205052886290)),
        ModelProperty(
            id: const IdUid(5, 2929427044720094804),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 311328448226876526),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1139499031782409076),
            name: 'bidirectional',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8941863492477320065),
            name: 'referral',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2870972846031607031),
            name: 'fromToName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3960974631936235683),
            name: 'toFromName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2217790306829074087),
            name: 'fromConstraintId',
            type: 11,
            flags: 520,
            indexId: const IdUid(44, 7830233736181311041),
            relationTarget: 'RelationshipConstraint'),
        ModelProperty(
            id: const IdUid(12, 1306931898324752575),
            name: 'toConstraintId',
            type: 11,
            flags: 520,
            indexId: const IdUid(45, 6946688248423367155),
            relationTarget: 'RelationshipConstraint')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(25, 1523899180309403344),
      name: 'SystemInfo',
      lastPropertyId: const IdUid(8, 3117745818567533822),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4097245655214555841),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1395405525449235413),
            name: 'version',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7183387189440388632),
            name: 'revision',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3213832097410270448),
            name: 'calendar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5647571996460401417),
            name: 'dateFormat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6214518281522520517),
            name: 'contextPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8091208950536431696),
            name: 'systemId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(46, 7676509628093033179)),
        ModelProperty(
            id: const IdUid(8, 3117745818567533822),
            name: 'systemName',
            type: 9,
            flags: 2048,
            indexId: const IdUid(47, 2767270376246692143))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 6035025695282448024),
      name: 'TrackedEntityAttribute',
      lastPropertyId: const IdUid(13, 1547200768056575719),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4898955766902515963),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1017953848117948192),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3408019767182194662),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7446489573847610193),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(48, 2156877070319063604)),
        ModelProperty(
            id: const IdUid(5, 7351670390681318756),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6757314607868705891),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7038294852507700168),
            name: 'formName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 504973206546198955),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2822941206878718332),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1356597709375552112),
            name: 'aggregationType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2061353518519012242),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4588643612690836673),
            name: 'zeroIsSignificant',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1547200768056575719),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(49, 2569949385516591906),
            relationTarget: 'DHIS2OptionSet')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(20, 4061338680625878338),
            name: 'legendSets',
            targetId: const IdUid(11, 5416231374184059532))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(27, 2194664364989578800),
      name: 'TrackedEntityType',
      lastPropertyId: const IdUid(6, 7230154635314744000),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5575312581375849779),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2355165341376604567),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6828806314878162452),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4773175684035529076),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(50, 7036957545907911961)),
        ModelProperty(
            id: const IdUid(5, 8072949610293787518),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7230154635314744000),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(21, 8329869220563268752),
            name: 'trackedEntityTypeAttributes',
            targetId: const IdUid(28, 8896307101484717442))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(28, 8896307101484717442),
      name: 'TrackedEntityTypeAttribute',
      lastPropertyId: const IdUid(10, 952386212930704923),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5318289889976306640),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3455122745113693834),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2523447176079808358),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5060957828655484086),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5359797817984982354),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(51, 5524045651064023266),
            relationTarget: 'TrackedEntityType'),
        ModelProperty(
            id: const IdUid(6, 6267448442240430761),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(52, 7204231197721431357),
            relationTarget: 'TrackedEntityAttribute'),
        ModelProperty(
            id: const IdUid(7, 1459705038374774744),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4662855104117382634),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4921227497008555022),
            name: 'displayShortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 952386212930704923),
            name: 'mandatory',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(29, 1680174850476511536),
      name: 'Relationship',
      lastPropertyId: const IdUid(7, 1206613619187722001),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8608167624842572838),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1288498881761116155),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2940149278471267410),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1037942075188614745),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(53, 1140901694077457150)),
        ModelProperty(
            id: const IdUid(5, 6645608367409971850),
            name: 'relationshipName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4660725307458690279),
            name: 'bidirectional',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1206613619187722001),
            name: 'relationshipType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(30, 4671447972053549030),
      name: 'D2TrackedEntityAttributeValue',
      lastPropertyId: const IdUid(8, 4079151054876851006),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1597471358745812880),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1445473185722176380),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6250046030138461846),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8779981595465299881),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(54, 6342907513951789755)),
        ModelProperty(
            id: const IdUid(5, 3621563677355900638),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1835597514610971026),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6252684930755108613),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4079151054876851006),
            name: 'valueType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 7886743192280178822),
      name: 'D2DataValue',
      lastPropertyId: const IdUid(6, 9048590662611885802),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5535717467081303129),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4562473253155914380),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5422955088639017189),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2991210894102872240),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(55, 3532051144991834701)),
        ModelProperty(
            id: const IdUid(5, 2994415794750963878),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9048590662611885802),
            name: 'providedElsewhere',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 4261893493899220119),
      name: 'D2Enrollment',
      lastPropertyId: const IdUid(16, 4264863304418819468),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 688877645369783857),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 644164196918367996),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6535273921399987289),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5118192830158727392),
            name: 'createdAtClient',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3894261335204544388),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(56, 3832023302225712333)),
        ModelProperty(
            id: const IdUid(6, 8425447781816580096),
            name: 'program',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3812990436745275761),
            name: 'trackedEntityInstance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6300255255555473693),
            name: 'trackedEntityType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5260007141716365645),
            name: 'orgUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3574313520841939457),
            name: 'orgUnitName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4075565776398457301),
            name: 'enrollmentDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3794264425269624044),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7123766516599670812),
            name: 'followup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1000486696740954286),
            name: 'incidentDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 936701018909644294),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4264863304418819468),
            name: 'notes',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(22, 5764096518053636714),
            name: 'events',
            targetId: const IdUid(33, 7539469880098407378)),
        ModelRelation(
            id: const IdUid(23, 8264834252891566529),
            name: 'relationships',
            targetId: const IdUid(29, 1680174850476511536)),
        ModelRelation(
            id: const IdUid(24, 6963301067344549194),
            name: 'attributes',
            targetId: const IdUid(30, 4671447972053549030))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(33, 7539469880098407378),
      name: 'D2Event',
      lastPropertyId: const IdUid(20, 3489409064105281681),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5860999012816468314),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2380701257273437091),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4644554687434737279),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1942335019237750368),
            name: 'createdAtClient',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5422496940084628419),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(57, 2758874653281131793)),
        ModelProperty(
            id: const IdUid(6, 6515907299542175979),
            name: 'dueDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8571226850017186914),
            name: 'program',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3619482424146435179),
            name: 'programStage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4490352019858861928),
            name: 'orgUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4332450352351897411),
            name: 'enrollment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5566476568216533404),
            name: 'trackedEntityInstance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1581914737185102931),
            name: 'enrollmentStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2770551023658418307),
            name: 'eventDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8613491335750999475),
            name: 'orgUnitName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6502161260151057587),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5204843542992323534),
            name: 'attributeCategoryOptions',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2685607471060619154),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 156436423910573448),
            name: 'followup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 5171937161443153139),
            name: 'attributeOptionCombo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 3489409064105281681),
            name: 'notes',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(25, 3167065835942327359),
            name: 'relationships',
            targetId: const IdUid(29, 1680174850476511536)),
        ModelRelation(
            id: const IdUid(26, 5542458923651039429),
            name: 'dataValues',
            targetId: const IdUid(31, 7886743192280178822))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(34, 5427219103956396213),
      name: 'TrackedEntity',
      lastPropertyId: const IdUid(11, 1105412760166889361),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5458000489026996101),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2253753330825044258),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4674968428776830503),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6718997862424425637),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(58, 4553908165506063622)),
        ModelProperty(
            id: const IdUid(5, 1118828497335190076),
            name: 'trackedEntityType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 34630043783339494),
            name: 'featureType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6690360695247343608),
            name: 'orgUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3869040888040823936),
            name: 'createdAtClient',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7755755348145759498),
            name: 'potentialDuplicate',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5089428316303634727),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1105412760166889361),
            name: 'inactive',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(27, 8015490331094678882),
            name: 'enrollments',
            targetId: const IdUid(32, 4261893493899220119)),
        ModelRelation(
            id: const IdUid(28, 8662107146866269435),
            name: 'relationships',
            targetId: const IdUid(29, 1680174850476511536)),
        ModelRelation(
            id: const IdUid(29, 1692222066398657444),
            name: 'attributes',
            targetId: const IdUid(30, 4671447972053549030))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(34, 5427219103956396213),
      lastIndexId: const IdUid(58, 4553908165506063622),
      lastRelationId: const IdUid(29, 1692222066398657444),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5637203997911158031, 598410469256371632],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        82235738519103936,
        403808371593073696,
        8616989213677647021,
        8950466612973647863,
        5921625464559883086,
        5523196749819846977,
        254383119267113271,
        2411042416098426399,
        4646037120569572171,
        1714758982607303889,
        17200739312737981,
        7421780827153282234,
        7109035275505833358,
        8266288267874819745
      ],
      retiredRelationUids: const [
        5838287942449585018,
        1962859954478409914,
        3146968381427680074,
        3523552853779902789
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    D2Program: EntityDefinition<D2Program>(
        model: _entities[0],
        toOneRelations: (D2Program object) => [],
        toManyRelations: (D2Program object) => {
              RelInfo<D2Program>.toMany(2, object.id): object.organisationUnits,
              RelInfo<D2Program>.toMany(3, object.id): object.programStages,
              RelInfo<D2Program>.toMany(4, object.id): object.programSections,
              RelInfo<D2Program>.toMany(5, object.id):
                  object.programTrackedEntityAttributes
            },
        getId: (D2Program object) => object.id,
        setId: (D2Program object, int id) {
          object.id = id;
        },
        objectToFB: (D2Program object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final shortNameOffset = fbb.writeString(object.shortName);
          final accessLevelOffset = fbb.writeString(object.accessLevel);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, shortNameOffset);
          fbb.addOffset(6, accessLevelOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final accessLevelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = D2Program(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              accessLevel: accessLevelParam,
              name: nameParam,
              shortName: shortNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2Program>(object.organisationUnits,
              store, RelInfo<D2Program>.toMany(2, object.id));
          InternalToManyAccess.setRelInfo<D2Program>(object.programStages,
              store, RelInfo<D2Program>.toMany(3, object.id));
          InternalToManyAccess.setRelInfo<D2Program>(object.programSections,
              store, RelInfo<D2Program>.toMany(4, object.id));
          InternalToManyAccess.setRelInfo<D2Program>(
              object.programTrackedEntityAttributes,
              store,
              RelInfo<D2Program>.toMany(5, object.id));
          return object;
        }),
    D2User: EntityDefinition<D2User>(
        model: _entities[1],
        toOneRelations: (D2User object) => [],
        toManyRelations: (D2User object) => {
              RelInfo<D2User>.toMany(6, object.id): object.userRoles,
              RelInfo<D2User>.toMany(7, object.id): object.userGroups
            },
        getId: (D2User object) => object.id,
        setId: (D2User object, int id) {
          object.id = id;
        },
        objectToFB: (D2User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final firstNameOffset = fbb.writeString(object.firstName);
          final surnameOffset = fbb.writeString(object.surname);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final authoritiesOffset = fbb.writeList(
              object.authorities.map(fbb.writeString).toList(growable: false));
          final programsOffset = fbb.writeList(
              object.programs.map(fbb.writeString).toList(growable: false));
          final organisationUnitsOffset = fbb.writeList(object.organisationUnits
              .map(fbb.writeString)
              .toList(growable: false));
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, surnameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, authoritiesOffset);
          fbb.addOffset(6, programsOffset);
          fbb.addOffset(7, organisationUnitsOffset);
          fbb.addOffset(8, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final surnameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final authoritiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final programsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final organisationUnitsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 18, []);
          final object = D2User(
              username: usernameParam,
              firstName: firstNameParam,
              surname: surnameParam,
              email: emailParam,
              authorities: authoritiesParam,
              uid: uidParam,
              programs: programsParam,
              organisationUnits: organisationUnitsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2User>(
              object.userRoles, store, RelInfo<D2User>.toMany(6, object.id));
          InternalToManyAccess.setRelInfo<D2User>(
              object.userGroups, store, RelInfo<D2User>.toMany(7, object.id));
          return object;
        }),
    DHIS2Option: EntityDefinition<DHIS2Option>(
        model: _entities[2],
        toOneRelations: (DHIS2Option object) => [object.optionSet],
        toManyRelations: (DHIS2Option object) => {},
        getId: (DHIS2Option object) => object.id,
        setId: (DHIS2Option object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2Option object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addInt64(6, object.sortOrder);
          fbb.addInt64(7, object.optionSet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = DHIS2Option(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              sortOrder: sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.optionSet.attach(store);
          return object;
        }),
    DHIS2OptionSet: EntityDefinition<DHIS2OptionSet>(
        model: _entities[3],
        toOneRelations: (DHIS2OptionSet object) => [],
        toManyRelations: (DHIS2OptionSet object) =>
            {RelInfo<DHIS2OptionSet>.toMany(8, object.id): object.options},
        getId: (DHIS2OptionSet object) => object.id,
        setId: (DHIS2OptionSet object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2OptionSet object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, valueTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = DHIS2OptionSet(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              valueType: valueTypeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<DHIS2OptionSet>(object.options, store,
              RelInfo<DHIS2OptionSet>.toMany(8, object.id));
          return object;
        }),
    DHIS2UserGroup: EntityDefinition<DHIS2UserGroup>(
        model: _entities[4],
        toOneRelations: (DHIS2UserGroup object) => [],
        toManyRelations: (DHIS2UserGroup object) => {},
        getId: (DHIS2UserGroup object) => object.id,
        setId: (DHIS2UserGroup object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2UserGroup object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.created.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = DHIS2UserGroup(
              uidParam, nameParam, createdParam, lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DHIS2UserRole: EntityDefinition<DHIS2UserRole>(
        model: _entities[5],
        toOneRelations: (DHIS2UserRole object) => [],
        toManyRelations: (DHIS2UserRole object) => {},
        getId: (DHIS2UserRole object) => object.id,
        setId: (DHIS2UserRole object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2UserRole object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final authoritiesOffset = fbb.writeList(
              object.authorities.map(fbb.writeString).toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, authoritiesOffset);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final authoritiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = DHIS2UserRole(uidParam, nameParam, authoritiesParam,
              createdParam, lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DataElement: EntityDefinition<DataElement>(
        model: _entities[6],
        toOneRelations: (DataElement object) => [object.optionSet],
        toManyRelations: (DataElement object) =>
            {RelInfo<DataElement>.toMany(10, object.id): object.legendSets},
        getId: (DataElement object) => object.id,
        setId: (DataElement object, int id) {
          object.id = id;
        },
        objectToFB: (DataElement object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final formNameOffset = object.formName == null
              ? null
              : fbb.writeString(object.formName!);
          final shortNameOffset = fbb.writeString(object.shortName);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final aggregationTypeOffset = fbb.writeString(object.aggregationType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final domainTypeOffset = fbb.writeString(object.domainType);
          fbb.startTable(15);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, codeOffset);
          fbb.addOffset(5, formNameOffset);
          fbb.addOffset(6, shortNameOffset);
          fbb.addOffset(7, descriptionOffset);
          fbb.addOffset(8, aggregationTypeOffset);
          fbb.addOffset(9, valueTypeOffset);
          fbb.addOffset(10, domainTypeOffset);
          fbb.addBool(11, object.zeroIsSignificant);
          fbb.addInt64(12, object.optionSet.targetId);
          fbb.addInt64(13, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final formNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final aggregationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final domainTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final zeroIsSignificantParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final object = DataElement(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              formName: formNameParam,
              shortName: shortNameParam,
              description: descriptionParam,
              aggregationType: aggregationTypeParam,
              valueType: valueTypeParam,
              domainType: domainTypeParam,
              zeroIsSignificant: zeroIsSignificantParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.optionSet.attach(store);
          InternalToManyAccess.setRelInfo<DataElement>(object.legendSets, store,
              RelInfo<DataElement>.toMany(10, object.id));
          return object;
        }),
    Legend: EntityDefinition<Legend>(
        model: _entities[7],
        toOneRelations: (Legend object) => [],
        toManyRelations: (Legend object) => {},
        getId: (Legend object) => object.id,
        setId: (Legend object, int id) {
          object.id = id;
        },
        objectToFB: (Legend object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final colorOffset = fbb.writeString(object.color);
          final displayNameOffset = fbb.writeString(object.displayName);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addFloat64(5, object.startValue);
          fbb.addFloat64(6, object.endValue);
          fbb.addOffset(7, colorOffset);
          fbb.addOffset(8, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final startValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final endValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final object = Legend(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              startValue: startValueParam,
              endValue: endValueParam,
              color: colorParam,
              displayName: displayNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    LegendSet: EntityDefinition<LegendSet>(
        model: _entities[8],
        toOneRelations: (LegendSet object) => [],
        toManyRelations: (LegendSet object) =>
            {RelInfo<LegendSet>.toMany(11, object.id): object.legends},
        getId: (LegendSet object) => object.id,
        setId: (LegendSet object, int id) {
          object.id = id;
        },
        objectToFB: (LegendSet object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = LegendSet(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<LegendSet>(
              object.legends, store, RelInfo<LegendSet>.toMany(11, object.id));
          return object;
        }),
    OrganisationUnit: EntityDefinition<OrganisationUnit>(
        model: _entities[9],
        toOneRelations: (OrganisationUnit object) => [],
        toManyRelations: (OrganisationUnit object) => {},
        getId: (OrganisationUnit object) => object.id,
        setId: (OrganisationUnit object, int id) {
          object.id = id;
        },
        objectToFB: (OrganisationUnit object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final shortNameOffset = fbb.writeString(object.shortName);
          final uidOffset = fbb.writeString(object.uid);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, shortNameOffset);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, pathOffset);
          fbb.addInt64(5, object.level);
          fbb.addInt64(6, object.created.millisecondsSinceEpoch);
          fbb.addInt64(7, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = OrganisationUnit(
              name: nameParam,
              uid: uidParam,
              shortName: shortNameParam,
              path: pathParam,
              level: levelParam,
              created: createdParam,
              lastUpdated: lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    OrganisationUnitGroup: EntityDefinition<OrganisationUnitGroup>(
        model: _entities[10],
        toOneRelations: (OrganisationUnitGroup object) => [],
        toManyRelations: (OrganisationUnitGroup object) => {
              RelInfo<OrganisationUnitGroup>.toMany(12, object.id):
                  object.organisationUnits
            },
        getId: (OrganisationUnitGroup object) => object.id,
        setId: (OrganisationUnitGroup object, int id) {
          object.id = id;
        },
        objectToFB: (OrganisationUnitGroup object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.created.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = OrganisationUnitGroup(
              name: nameParam,
              uid: uidParam,
              created: createdParam,
              lastUpdated: lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<OrganisationUnitGroup>(
              object.organisationUnits,
              store,
              RelInfo<OrganisationUnitGroup>.toMany(12, object.id));
          return object;
        }),
    OrganisationUnitLevel: EntityDefinition<OrganisationUnitLevel>(
        model: _entities[11],
        toOneRelations: (OrganisationUnitLevel object) => [],
        toManyRelations: (OrganisationUnitLevel object) => {},
        getId: (OrganisationUnitLevel object) => object.id,
        setId: (OrganisationUnitLevel object, int id) {
          object.id = id;
        },
        objectToFB: (OrganisationUnitLevel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.level);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = OrganisationUnitLevel(
              name: nameParam,
              uid: uidParam,
              level: levelParam,
              created: createdParam,
              lastUpdated: lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ProgramRule: EntityDefinition<ProgramRule>(
        model: _entities[12],
        toOneRelations: (ProgramRule object) => [object.program],
        toManyRelations: (ProgramRule object) => {
              RelInfo<ProgramRule>.toMany(13, object.id):
                  object.programRuleActions
            },
        getId: (ProgramRule object) => object.id,
        setId: (ProgramRule object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramRule object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final conditionOffset = fbb.writeString(object.condition);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, conditionOffset);
          fbb.addInt64(7, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final conditionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = ProgramRule(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              description: descriptionParam,
              condition: conditionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.program.attach(store);
          InternalToManyAccess.setRelInfo<ProgramRule>(
              object.programRuleActions,
              store,
              RelInfo<ProgramRule>.toMany(13, object.id));
          return object;
        }),
    ProgramRuleAction: EntityDefinition<ProgramRuleAction>(
        model: _entities[13],
        toOneRelations: (ProgramRuleAction object) => [
              object.programRule,
              object.dataElement,
              object.programStageSection,
              object.programSection,
              object.trackedEntityAttribute
            ],
        toManyRelations: (ProgramRuleAction object) => {},
        getId: (ProgramRuleAction object) => object.id,
        setId: (ProgramRuleAction object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramRuleAction object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final programRuleActionTypeOffset =
              fbb.writeString(object.programRuleActionType);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, programRuleActionTypeOffset);
          fbb.addOffset(5, contentOffset);
          fbb.addOffset(6, dataOffset);
          fbb.addOffset(7, locationOffset);
          fbb.addInt64(8, object.programRule.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addInt64(10, object.programStageSection.targetId);
          fbb.addInt64(11, object.programSection.targetId);
          fbb.addInt64(12, object.trackedEntityAttribute.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final programRuleActionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = ProgramRuleAction(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              programRuleActionType: programRuleActionTypeParam,
              content: contentParam,
              data: dataParam,
              location: locationParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.programRule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.programRule.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          object.programStageSection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.programStageSection.attach(store);
          object.programSection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.programSection.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    ProgramRuleVariable: EntityDefinition<ProgramRuleVariable>(
        model: _entities[14],
        toOneRelations: (ProgramRuleVariable object) => [
              object.trackedEntityAttribute,
              object.dataElement,
              object.programStage,
              object.program
            ],
        toManyRelations: (ProgramRuleVariable object) => {},
        getId: (ProgramRuleVariable object) => object.id,
        setId: (ProgramRuleVariable object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramRuleVariable object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final programRuleVariableSourceTypeOffset =
              fbb.writeString(object.programRuleVariableSourceType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, programRuleVariableSourceTypeOffset);
          fbb.addOffset(6, valueTypeOffset);
          fbb.addBool(7, object.useCodeForOptionSet);
          fbb.addInt64(8, object.trackedEntityAttribute.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addInt64(10, object.programStage.targetId);
          fbb.addInt64(11, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final programRuleVariableSourceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final useCodeForOptionSetParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = ProgramRuleVariable(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              programRuleVariableSourceType: programRuleVariableSourceTypeParam,
              valueType: valueTypeParam,
              useCodeForOptionSet: useCodeForOptionSetParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.trackedEntityAttribute.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.programStage.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.program.attach(store);
          return object;
        }),
    ProgramSection: EntityDefinition<ProgramSection>(
        model: _entities[15],
        toOneRelations: (ProgramSection object) => [object.program],
        toManyRelations: (ProgramSection object) => {
              RelInfo<ProgramSection>.toMany(14, object.id):
                  object.trackedEntityAttributes
            },
        getId: (ProgramSection object) => object.id,
        setId: (ProgramSection object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramSection object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.sortOrder);
          fbb.addOffset(5, nameOffset);
          fbb.addInt64(6, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = ProgramSection(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              sortOrder: sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.program.attach(store);
          InternalToManyAccess.setRelInfo<ProgramSection>(
              object.trackedEntityAttributes,
              store,
              RelInfo<ProgramSection>.toMany(14, object.id));
          return object;
        }),
    ProgramStage: EntityDefinition<ProgramStage>(
        model: _entities[16],
        toOneRelations: (ProgramStage object) => [object.program],
        toManyRelations: (ProgramStage object) => {
              RelInfo<ProgramStage>.toMany(15, object.id):
                  object.programStageDataElements,
              RelInfo<ProgramStage>.toMany(17, object.id):
                  object.programStageSections
            },
        getId: (ProgramStage object) => object.id,
        setId: (ProgramStage object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramStage object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final validationStrategyOffset = object.validationStrategy == null
              ? null
              : fbb.writeString(object.validationStrategy!);
          final featureTypeOffset = object.featureType == null
              ? null
              : fbb.writeString(object.featureType!);
          final reportDateToUseOffset = object.reportDateToUse == null
              ? null
              : fbb.writeString(object.reportDateToUse!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.sortOrder);
          fbb.addOffset(7, validationStrategyOffset);
          fbb.addOffset(8, featureTypeOffset);
          fbb.addOffset(9, reportDateToUseOffset);
          fbb.addInt64(10, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final validationStrategyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final reportDateToUseParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final featureTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = ProgramStage(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              sortOrder: sortOrderParam,
              validationStrategy: validationStrategyParam,
              reportDateToUse: reportDateToUseParam,
              featureType: featureTypeParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.program.attach(store);
          InternalToManyAccess.setRelInfo<ProgramStage>(
              object.programStageDataElements,
              store,
              RelInfo<ProgramStage>.toMany(15, object.id));
          InternalToManyAccess.setRelInfo<ProgramStage>(
              object.programStageSections,
              store,
              RelInfo<ProgramStage>.toMany(17, object.id));
          return object;
        }),
    ProgramStageDataElement: EntityDefinition<ProgramStageDataElement>(
        model: _entities[17],
        toOneRelations: (ProgramStageDataElement object) =>
            [object.programStage, object.dataElement],
        toManyRelations: (ProgramStageDataElement object) => {},
        getId: (ProgramStageDataElement object) => object.id,
        setId: (ProgramStageDataElement object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramStageDataElement object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(9);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.id);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addBool(4, object.compulsory);
          fbb.addInt64(5, object.sortOrder);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.addInt64(7, object.dataElement.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final compulsoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final sortOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = ProgramStageDataElement(createdParam, idParam,
              lastUpdatedParam, uidParam, compulsoryParam, sortOrderParam);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.dataElement.attach(store);
          return object;
        }),
    ProgramStageSection: EntityDefinition<ProgramStageSection>(
        model: _entities[18],
        toOneRelations: (ProgramStageSection object) => [object.programStage],
        toManyRelations: (ProgramStageSection object) => {
              RelInfo<ProgramStageSection>.toMany(18, object.id):
                  object.dataElements
            },
        getId: (ProgramStageSection object) => object.id,
        setId: (ProgramStageSection object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramStageSection object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addInt64(5, object.sortOrder);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = ProgramStageSection(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              sortOrder: sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          InternalToManyAccess.setRelInfo<ProgramStageSection>(
              object.dataElements,
              store,
              RelInfo<ProgramStageSection>.toMany(18, object.id));
          return object;
        }),
    ProgramTrackedEntityAttribute: EntityDefinition<
            ProgramTrackedEntityAttribute>(
        model: _entities[19],
        toOneRelations: (ProgramTrackedEntityAttribute object) =>
            [object.program, object.trackedEntityAttribute],
        toManyRelations: (ProgramTrackedEntityAttribute object) => {},
        getId: (ProgramTrackedEntityAttribute object) => object.id,
        setId: (ProgramTrackedEntityAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (ProgramTrackedEntityAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final displayNameOffset = fbb.writeString(object.displayName);
          fbb.startTable(13);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.id);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addInt64(5, object.sortOrder);
          fbb.addBool(6, object.displayInList);
          fbb.addBool(7, object.mandatory);
          fbb.addOffset(8, valueTypeOffset);
          fbb.addOffset(9, displayNameOffset);
          fbb.addInt64(10, object.program.targetId);
          fbb.addInt64(11, object.trackedEntityAttribute.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final displayInListParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final mandatoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final object = ProgramTrackedEntityAttribute(
              createdParam,
              idParam,
              lastUpdatedParam,
              uidParam,
              nameParam,
              sortOrderParam,
              displayInListParam,
              mandatoryParam,
              valueTypeParam,
              displayNameParam);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.program.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    RelationshipConstraint: EntityDefinition<RelationshipConstraint>(
        model: _entities[20],
        toOneRelations: (RelationshipConstraint object) => [
              object.trackedEntityType,
              object.relationshipType,
              object.program,
              object.programStage
            ],
        toManyRelations: (RelationshipConstraint object) => {},
        getId: (RelationshipConstraint object) => object.id,
        setId: (RelationshipConstraint object, int id) {
          object.id = id;
        },
        objectToFB: (RelationshipConstraint object, fb.Builder fbb) {
          final relationshipEntityOffset =
              fbb.writeString(object.relationshipEntity);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, relationshipEntityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.trackedEntityType.targetId);
          fbb.addInt64(4, object.relationshipType.targetId);
          fbb.addInt64(5, object.program.targetId);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final relationshipEntityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = RelationshipConstraint(
              relationshipEntity: relationshipEntityParam, name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.trackedEntityType.attach(store);
          object.relationshipType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.relationshipType.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.program.attach(store);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          return object;
        }),
    RelationshipType: EntityDefinition<RelationshipType>(
        model: _entities[21],
        toOneRelations: (RelationshipType object) =>
            [object.fromConstraint, object.toConstraint],
        toManyRelations: (RelationshipType object) => {},
        getId: (RelationshipType object) => object.id,
        setId: (RelationshipType object, int id) {
          object.id = id;
        },
        objectToFB: (RelationshipType object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          final fromToNameOffset = fbb.writeString(object.fromToName);
          final toFromNameOffset = fbb.writeString(object.toFromName);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addBool(6, object.bidirectional);
          fbb.addBool(7, object.referral);
          fbb.addOffset(8, fromToNameOffset);
          fbb.addOffset(9, toFromNameOffset);
          fbb.addInt64(10, object.fromConstraint.targetId);
          fbb.addInt64(11, object.toConstraint.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final bidirectionalParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final referralParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final fromToNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final toFromNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = RelationshipType(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              bidirectional: bidirectionalParam,
              referral: referralParam,
              fromToName: fromToNameParam,
              toFromName: toFromNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.fromConstraint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.fromConstraint.attach(store);
          object.toConstraint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.toConstraint.attach(store);
          return object;
        }),
    SystemInfo: EntityDefinition<SystemInfo>(
        model: _entities[22],
        toOneRelations: (SystemInfo object) => [],
        toManyRelations: (SystemInfo object) => {},
        getId: (SystemInfo object) => object.id,
        setId: (SystemInfo object, int id) {
          object.id = id;
        },
        objectToFB: (SystemInfo object, fb.Builder fbb) {
          final versionOffset = fbb.writeString(object.version);
          final revisionOffset = fbb.writeString(object.revision);
          final calendarOffset = fbb.writeString(object.calendar);
          final dateFormatOffset = fbb.writeString(object.dateFormat);
          final contextPathOffset = fbb.writeString(object.contextPath);
          final systemIdOffset = fbb.writeString(object.systemId);
          final systemNameOffset = fbb.writeString(object.systemName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, versionOffset);
          fbb.addOffset(2, revisionOffset);
          fbb.addOffset(3, calendarOffset);
          fbb.addOffset(4, dateFormatOffset);
          fbb.addOffset(5, contextPathOffset);
          fbb.addOffset(6, systemIdOffset);
          fbb.addOffset(7, systemNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final versionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final revisionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final calendarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateFormatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final contextPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final systemIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final systemNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = SystemInfo(
              version: versionParam,
              revision: revisionParam,
              calendar: calendarParam,
              dateFormat: dateFormatParam,
              contextPath: contextPathParam,
              systemId: systemIdParam,
              systemName: systemNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    TrackedEntityAttribute: EntityDefinition<TrackedEntityAttribute>(
        model: _entities[23],
        toOneRelations: (TrackedEntityAttribute object) => [object.optionSet],
        toManyRelations: (TrackedEntityAttribute object) => {
              RelInfo<TrackedEntityAttribute>.toMany(20, object.id):
                  object.legendSets
            },
        getId: (TrackedEntityAttribute object) => object.id,
        setId: (TrackedEntityAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (TrackedEntityAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final formNameOffset = object.formName == null
              ? null
              : fbb.writeString(object.formName!);
          final shortNameOffset = fbb.writeString(object.shortName);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final aggregationTypeOffset = fbb.writeString(object.aggregationType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, formNameOffset);
          fbb.addOffset(7, shortNameOffset);
          fbb.addOffset(8, descriptionOffset);
          fbb.addOffset(9, aggregationTypeOffset);
          fbb.addOffset(10, valueTypeOffset);
          fbb.addBool(11, object.zeroIsSignificant);
          fbb.addInt64(12, object.optionSet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final formNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final aggregationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final zeroIsSignificantParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final object = TrackedEntityAttribute(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              formName: formNameParam,
              shortName: shortNameParam,
              description: descriptionParam,
              aggregationType: aggregationTypeParam,
              valueType: valueTypeParam,
              zeroIsSignificant: zeroIsSignificantParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.optionSet.attach(store);
          InternalToManyAccess.setRelInfo<TrackedEntityAttribute>(
              object.legendSets,
              store,
              RelInfo<TrackedEntityAttribute>.toMany(20, object.id));
          return object;
        }),
    TrackedEntityType: EntityDefinition<TrackedEntityType>(
        model: _entities[24],
        toOneRelations: (TrackedEntityType object) => [],
        toManyRelations: (TrackedEntityType object) => {
              RelInfo<TrackedEntityType>.toMany(21, object.id):
                  object.trackedEntityTypeAttributes
            },
        getId: (TrackedEntityType object) => object.id,
        setId: (TrackedEntityType object, int id) {
          object.id = id;
        },
        objectToFB: (TrackedEntityType object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final object = TrackedEntityType(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<TrackedEntityType>(
              object.trackedEntityTypeAttributes,
              store,
              RelInfo<TrackedEntityType>.toMany(21, object.id));
          return object;
        }),
    TrackedEntityTypeAttribute: EntityDefinition<TrackedEntityTypeAttribute>(
        model: _entities[25],
        toOneRelations: (TrackedEntityTypeAttribute object) =>
            [object.trackedEntityType, object.trackedEntityAttribute],
        toManyRelations: (TrackedEntityTypeAttribute object) => {},
        getId: (TrackedEntityTypeAttribute object) => object.id,
        setId: (TrackedEntityTypeAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (TrackedEntityTypeAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final displayNameOffset = fbb.writeString(object.displayName);
          final displayShortNameOffset =
              fbb.writeString(object.displayShortName);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.trackedEntityType.targetId);
          fbb.addInt64(5, object.trackedEntityAttribute.targetId);
          fbb.addOffset(6, valueTypeOffset);
          fbb.addOffset(7, displayNameOffset);
          fbb.addOffset(8, displayShortNameOffset);
          fbb.addBool(9, object.mandatory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final displayShortNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final mandatoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final object = TrackedEntityTypeAttribute(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              valueType: valueTypeParam,
              displayName: displayNameParam,
              displayShortName: displayShortNameParam,
              mandatory: mandatoryParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.trackedEntityType.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    Relationship: EntityDefinition<Relationship>(
        model: _entities[26],
        toOneRelations: (Relationship object) => [],
        toManyRelations: (Relationship object) => {},
        getId: (Relationship object) => object.id,
        setId: (Relationship object, int id) {
          object.id = id;
        },
        objectToFB: (Relationship object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final relationshipNameOffset =
              fbb.writeString(object.relationshipName);
          final relationshipTypeOffset =
              fbb.writeString(object.relationshipType);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, relationshipNameOffset);
          fbb.addBool(5, object.bidirectional);
          fbb.addOffset(6, relationshipTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final relationshipNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final relationshipTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final bidirectionalParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = Relationship(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              relationshipName: relationshipNameParam,
              relationshipType: relationshipTypeParam,
              bidirectional: bidirectionalParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2TrackedEntityAttributeValue:
        EntityDefinition<D2TrackedEntityAttributeValue>(
            model: _entities[27],
            toOneRelations: (D2TrackedEntityAttributeValue object) => [],
            toManyRelations: (D2TrackedEntityAttributeValue object) => {},
            getId: (D2TrackedEntityAttributeValue object) => object.id,
            setId: (D2TrackedEntityAttributeValue object, int id) {
              object.id = id;
            },
            objectToFB: (D2TrackedEntityAttributeValue object, fb.Builder fbb) {
              final uidOffset = fbb.writeString(object.uid);
              final displayNameOffset = fbb.writeString(object.displayName);
              final codeOffset = fbb.writeString(object.code);
              final valueOffset = fbb.writeString(object.value);
              final valueTypeOffset = fbb.writeString(object.valueType);
              fbb.startTable(9);
              fbb.addInt64(0, object.id);
              fbb.addInt64(1, object.created.millisecondsSinceEpoch);
              fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
              fbb.addOffset(3, uidOffset);
              fbb.addOffset(4, displayNameOffset);
              fbb.addOffset(5, codeOffset);
              fbb.addOffset(6, valueOffset);
              fbb.addOffset(7, valueTypeOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final createdParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
              final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
              final uidParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
              final displayNameParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 12, '');
              final codeParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
              final valueParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
              final valueTypeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 18, '');
              final object = D2TrackedEntityAttributeValue(
                  created: createdParam,
                  lastUpdated: lastUpdatedParam,
                  uid: uidParam,
                  displayName: displayNameParam,
                  code: codeParam,
                  value: valueParam,
                  valueType: valueTypeParam)
                ..id =
                    const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

              return object;
            }),
    D2DataValue: EntityDefinition<D2DataValue>(
        model: _entities[28],
        toOneRelations: (D2DataValue object) => [],
        toManyRelations: (D2DataValue object) => {},
        getId: (D2DataValue object) => object.id,
        setId: (D2DataValue object, int id) {
          object.id = id;
        },
        objectToFB: (D2DataValue object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, valueOffset);
          fbb.addBool(5, object.providedElsewhere);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final providedElsewhereParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = D2DataValue(
              lastUpdated: lastUpdatedParam,
              created: createdParam,
              uid: uidParam,
              value: valueParam,
              providedElsewhere: providedElsewhereParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2Enrollment: EntityDefinition<D2Enrollment>(
        model: _entities[29],
        toOneRelations: (D2Enrollment object) => [],
        toManyRelations: (D2Enrollment object) => {
              RelInfo<D2Enrollment>.toMany(22, object.id): object.events,
              RelInfo<D2Enrollment>.toMany(23, object.id): object.relationships,
              RelInfo<D2Enrollment>.toMany(24, object.id): object.attributes
            },
        getId: (D2Enrollment object) => object.id,
        setId: (D2Enrollment object, int id) {
          object.id = id;
        },
        objectToFB: (D2Enrollment object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final programOffset = fbb.writeString(object.program);
          final trackedEntityInstanceOffset =
              fbb.writeString(object.trackedEntityInstance);
          final trackedEntityTypeOffset =
              fbb.writeString(object.trackedEntityType);
          final orgUnitOffset = fbb.writeString(object.orgUnit);
          final orgUnitNameOffset = fbb.writeString(object.orgUnitName);
          final statusOffset = fbb.writeString(object.status);
          final notesOffset = fbb.writeList(
              object.notes.map(fbb.writeString).toList(growable: false));
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addInt64(3, object.createdAtClient.millisecondsSinceEpoch);
          fbb.addOffset(4, uidOffset);
          fbb.addOffset(5, programOffset);
          fbb.addOffset(6, trackedEntityInstanceOffset);
          fbb.addOffset(7, trackedEntityTypeOffset);
          fbb.addOffset(8, orgUnitOffset);
          fbb.addOffset(9, orgUnitNameOffset);
          fbb.addInt64(10, object.enrollmentDate.millisecondsSinceEpoch);
          fbb.addBool(11, object.deleted);
          fbb.addBool(12, object.followup);
          fbb.addInt64(13, object.incidentDate.millisecondsSinceEpoch);
          fbb.addOffset(14, statusOffset);
          fbb.addOffset(15, notesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final programParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final createdAtClientParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final orgUnitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final orgUnitNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final trackedEntityInstanceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final trackedEntityTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final enrollmentDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final followupParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final incidentDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final notesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 34, []);
          final object = D2Enrollment(
              uid: uidParam,
              program: programParam,
              lastUpdated: lastUpdatedParam,
              created: createdParam,
              createdAtClient: createdAtClientParam,
              orgUnit: orgUnitParam,
              orgUnitName: orgUnitNameParam,
              trackedEntityInstance: trackedEntityInstanceParam,
              trackedEntityType: trackedEntityTypeParam,
              enrollmentDate: enrollmentDateParam,
              followup: followupParam,
              deleted: deletedParam,
              incidentDate: incidentDateParam,
              status: statusParam,
              notes: notesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2Enrollment>(object.events, store,
              RelInfo<D2Enrollment>.toMany(22, object.id));
          InternalToManyAccess.setRelInfo<D2Enrollment>(object.relationships,
              store, RelInfo<D2Enrollment>.toMany(23, object.id));
          InternalToManyAccess.setRelInfo<D2Enrollment>(object.attributes,
              store, RelInfo<D2Enrollment>.toMany(24, object.id));
          return object;
        }),
    D2Event: EntityDefinition<D2Event>(
        model: _entities[30],
        toOneRelations: (D2Event object) => [],
        toManyRelations: (D2Event object) => {
              RelInfo<D2Event>.toMany(25, object.id): object.relationships,
              RelInfo<D2Event>.toMany(26, object.id): object.dataValues
            },
        getId: (D2Event object) => object.id,
        setId: (D2Event object, int id) {
          object.id = id;
        },
        objectToFB: (D2Event object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final programOffset = fbb.writeString(object.program);
          final programStageOffset = fbb.writeString(object.programStage);
          final orgUnitOffset = fbb.writeString(object.orgUnit);
          final enrollmentOffset = fbb.writeString(object.enrollment);
          final trackedEntityInstanceOffset =
              fbb.writeString(object.trackedEntityInstance);
          final enrollmentStatusOffset =
              fbb.writeString(object.enrollmentStatus);
          final orgUnitNameOffset = fbb.writeString(object.orgUnitName);
          final statusOffset = fbb.writeString(object.status);
          final attributeCategoryOptionsOffset =
              fbb.writeString(object.attributeCategoryOptions);
          final attributeOptionComboOffset =
              fbb.writeString(object.attributeOptionCombo);
          final notesOffset = fbb.writeList(
              object.notes.map(fbb.writeString).toList(growable: false));
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addInt64(3, object.createdAtClient.millisecondsSinceEpoch);
          fbb.addOffset(4, uidOffset);
          fbb.addInt64(5, object.dueDate.millisecondsSinceEpoch);
          fbb.addOffset(6, programOffset);
          fbb.addOffset(7, programStageOffset);
          fbb.addOffset(8, orgUnitOffset);
          fbb.addOffset(9, enrollmentOffset);
          fbb.addOffset(10, trackedEntityInstanceOffset);
          fbb.addOffset(11, enrollmentStatusOffset);
          fbb.addInt64(12, object.eventDate.millisecondsSinceEpoch);
          fbb.addOffset(13, orgUnitNameOffset);
          fbb.addOffset(14, statusOffset);
          fbb.addOffset(15, attributeCategoryOptionsOffset);
          fbb.addBool(16, object.deleted);
          fbb.addBool(17, object.followup);
          fbb.addOffset(18, attributeOptionComboOffset);
          fbb.addOffset(19, notesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final attributeCategoryOptionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final attributeOptionComboParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, '');
          final enrollmentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final programParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final createdAtClientParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final orgUnitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final orgUnitNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final trackedEntityInstanceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final followupParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 38, false);
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final notesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 42, []);
          final dueDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final enrollmentStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final programStageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final eventDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final object = D2Event(
              attributeCategoryOptions: attributeCategoryOptionsParam,
              attributeOptionCombo: attributeOptionComboParam,
              enrollment: enrollmentParam,
              program: programParam,
              lastUpdated: lastUpdatedParam,
              created: createdParam,
              createdAtClient: createdAtClientParam,
              orgUnit: orgUnitParam,
              orgUnitName: orgUnitNameParam,
              trackedEntityInstance: trackedEntityInstanceParam,
              followup: followupParam,
              deleted: deletedParam,
              status: statusParam,
              notes: notesParam,
              dueDate: dueDateParam,
              enrollmentStatus: enrollmentStatusParam,
              uid: uidParam,
              programStage: programStageParam,
              eventDate: eventDateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2Event>(object.relationships, store,
              RelInfo<D2Event>.toMany(25, object.id));
          InternalToManyAccess.setRelInfo<D2Event>(
              object.dataValues, store, RelInfo<D2Event>.toMany(26, object.id));
          return object;
        }),
    TrackedEntity: EntityDefinition<TrackedEntity>(
        model: _entities[31],
        toOneRelations: (TrackedEntity object) => [],
        toManyRelations: (TrackedEntity object) => {
              RelInfo<TrackedEntity>.toMany(27, object.id): object.enrollments,
              RelInfo<TrackedEntity>.toMany(28, object.id):
                  object.relationships,
              RelInfo<TrackedEntity>.toMany(29, object.id): object.attributes
            },
        getId: (TrackedEntity object) => object.id,
        setId: (TrackedEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TrackedEntity object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final trackedEntityTypeOffset =
              fbb.writeString(object.trackedEntityType);
          final featureTypeOffset = fbb.writeString(object.featureType);
          final orgUnitOffset = fbb.writeString(object.orgUnit);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, trackedEntityTypeOffset);
          fbb.addOffset(5, featureTypeOffset);
          fbb.addOffset(6, orgUnitOffset);
          fbb.addInt64(7, object.createdAtClient.millisecondsSinceEpoch);
          fbb.addBool(8, object.potentialDuplicate);
          fbb.addBool(9, object.deleted);
          fbb.addBool(10, object.inactive);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final trackedEntityTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final orgUnitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final createdAtClientParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final potentialDuplicateParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final featureTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final inactiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final object = TrackedEntity(
              uid: uidParam,
              trackedEntityType: trackedEntityTypeParam,
              orgUnit: orgUnitParam,
              createdAtClient: createdAtClientParam,
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              deleted: deletedParam,
              potentialDuplicate: potentialDuplicateParam,
              featureType: featureTypeParam,
              inactive: inactiveParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<TrackedEntity>(object.enrollments,
              store, RelInfo<TrackedEntity>.toMany(27, object.id));
          InternalToManyAccess.setRelInfo<TrackedEntity>(object.relationships,
              store, RelInfo<TrackedEntity>.toMany(28, object.id));
          InternalToManyAccess.setRelInfo<TrackedEntity>(object.attributes,
              store, RelInfo<TrackedEntity>.toMany(29, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [D2Program] entity fields to define ObjectBox queries.
class D2Program_ {
  /// see [D2Program.id]
  static final id = QueryIntegerProperty<D2Program>(_entities[0].properties[0]);

  /// see [D2Program.created]
  static final created =
      QueryIntegerProperty<D2Program>(_entities[0].properties[1]);

  /// see [D2Program.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2Program>(_entities[0].properties[2]);

  /// see [D2Program.uid]
  static final uid = QueryStringProperty<D2Program>(_entities[0].properties[3]);

  /// see [D2Program.name]
  static final name =
      QueryStringProperty<D2Program>(_entities[0].properties[4]);

  /// see [D2Program.shortName]
  static final shortName =
      QueryStringProperty<D2Program>(_entities[0].properties[5]);

  /// see [D2Program.accessLevel]
  static final accessLevel =
      QueryStringProperty<D2Program>(_entities[0].properties[6]);

  /// see [D2Program.organisationUnits]
  static final organisationUnits =
      QueryRelationToMany<D2Program, OrganisationUnit>(
          _entities[0].relations[0]);

  /// see [D2Program.programStages]
  static final programStages =
      QueryRelationToMany<D2Program, ProgramStage>(_entities[0].relations[1]);

  /// see [D2Program.programSections]
  static final programSections =
      QueryRelationToMany<D2Program, ProgramSection>(_entities[0].relations[2]);

  /// see [D2Program.programTrackedEntityAttributes]
  static final programTrackedEntityAttributes =
      QueryRelationToMany<D2Program, ProgramTrackedEntityAttribute>(
          _entities[0].relations[3]);
}

/// [D2User] entity fields to define ObjectBox queries.
class D2User_ {
  /// see [D2User.id]
  static final id = QueryIntegerProperty<D2User>(_entities[1].properties[0]);

  /// see [D2User.username]
  static final username =
      QueryStringProperty<D2User>(_entities[1].properties[1]);

  /// see [D2User.firstName]
  static final firstName =
      QueryStringProperty<D2User>(_entities[1].properties[2]);

  /// see [D2User.surname]
  static final surname =
      QueryStringProperty<D2User>(_entities[1].properties[3]);

  /// see [D2User.email]
  static final email = QueryStringProperty<D2User>(_entities[1].properties[4]);

  /// see [D2User.authorities]
  static final authorities =
      QueryStringVectorProperty<D2User>(_entities[1].properties[5]);

  /// see [D2User.programs]
  static final programs =
      QueryStringVectorProperty<D2User>(_entities[1].properties[6]);

  /// see [D2User.organisationUnits]
  static final organisationUnits =
      QueryStringVectorProperty<D2User>(_entities[1].properties[7]);

  /// see [D2User.uid]
  static final uid = QueryStringProperty<D2User>(_entities[1].properties[8]);

  /// see [D2User.userRoles]
  static final userRoles =
      QueryRelationToMany<D2User, DHIS2UserRole>(_entities[1].relations[0]);

  /// see [D2User.userGroups]
  static final userGroups =
      QueryRelationToMany<D2User, DHIS2UserGroup>(_entities[1].relations[1]);
}

/// [DHIS2Option] entity fields to define ObjectBox queries.
class DHIS2Option_ {
  /// see [DHIS2Option.id]
  static final id =
      QueryIntegerProperty<DHIS2Option>(_entities[2].properties[0]);

  /// see [DHIS2Option.created]
  static final created =
      QueryIntegerProperty<DHIS2Option>(_entities[2].properties[1]);

  /// see [DHIS2Option.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2Option>(_entities[2].properties[2]);

  /// see [DHIS2Option.uid]
  static final uid =
      QueryStringProperty<DHIS2Option>(_entities[2].properties[3]);

  /// see [DHIS2Option.name]
  static final name =
      QueryStringProperty<DHIS2Option>(_entities[2].properties[4]);

  /// see [DHIS2Option.code]
  static final code =
      QueryStringProperty<DHIS2Option>(_entities[2].properties[5]);

  /// see [DHIS2Option.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<DHIS2Option>(_entities[2].properties[6]);

  /// see [DHIS2Option.optionSet]
  static final optionSet = QueryRelationToOne<DHIS2Option, DHIS2OptionSet>(
      _entities[2].properties[7]);
}

/// [DHIS2OptionSet] entity fields to define ObjectBox queries.
class DHIS2OptionSet_ {
  /// see [DHIS2OptionSet.id]
  static final id =
      QueryIntegerProperty<DHIS2OptionSet>(_entities[3].properties[0]);

  /// see [DHIS2OptionSet.created]
  static final created =
      QueryIntegerProperty<DHIS2OptionSet>(_entities[3].properties[1]);

  /// see [DHIS2OptionSet.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2OptionSet>(_entities[3].properties[2]);

  /// see [DHIS2OptionSet.uid]
  static final uid =
      QueryStringProperty<DHIS2OptionSet>(_entities[3].properties[3]);

  /// see [DHIS2OptionSet.name]
  static final name =
      QueryStringProperty<DHIS2OptionSet>(_entities[3].properties[4]);

  /// see [DHIS2OptionSet.code]
  static final code =
      QueryStringProperty<DHIS2OptionSet>(_entities[3].properties[5]);

  /// see [DHIS2OptionSet.valueType]
  static final valueType =
      QueryStringProperty<DHIS2OptionSet>(_entities[3].properties[6]);

  /// see [DHIS2OptionSet.options]
  static final options = QueryRelationToMany<DHIS2OptionSet, DHIS2Option>(
      _entities[3].relations[0]);
}

/// [DHIS2UserGroup] entity fields to define ObjectBox queries.
class DHIS2UserGroup_ {
  /// see [DHIS2UserGroup.id]
  static final id =
      QueryIntegerProperty<DHIS2UserGroup>(_entities[4].properties[0]);

  /// see [DHIS2UserGroup.uid]
  static final uid =
      QueryStringProperty<DHIS2UserGroup>(_entities[4].properties[1]);

  /// see [DHIS2UserGroup.name]
  static final name =
      QueryStringProperty<DHIS2UserGroup>(_entities[4].properties[2]);

  /// see [DHIS2UserGroup.created]
  static final created =
      QueryIntegerProperty<DHIS2UserGroup>(_entities[4].properties[3]);

  /// see [DHIS2UserGroup.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2UserGroup>(_entities[4].properties[4]);
}

/// [DHIS2UserRole] entity fields to define ObjectBox queries.
class DHIS2UserRole_ {
  /// see [DHIS2UserRole.id]
  static final id =
      QueryIntegerProperty<DHIS2UserRole>(_entities[5].properties[0]);

  /// see [DHIS2UserRole.uid]
  static final uid =
      QueryStringProperty<DHIS2UserRole>(_entities[5].properties[1]);

  /// see [DHIS2UserRole.name]
  static final name =
      QueryStringProperty<DHIS2UserRole>(_entities[5].properties[2]);

  /// see [DHIS2UserRole.authorities]
  static final authorities =
      QueryStringVectorProperty<DHIS2UserRole>(_entities[5].properties[3]);

  /// see [DHIS2UserRole.created]
  static final created =
      QueryIntegerProperty<DHIS2UserRole>(_entities[5].properties[4]);

  /// see [DHIS2UserRole.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DHIS2UserRole>(_entities[5].properties[5]);
}

/// [DataElement] entity fields to define ObjectBox queries.
class DataElement_ {
  /// see [DataElement.created]
  static final created =
      QueryIntegerProperty<DataElement>(_entities[6].properties[0]);

  /// see [DataElement.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<DataElement>(_entities[6].properties[1]);

  /// see [DataElement.uid]
  static final uid =
      QueryStringProperty<DataElement>(_entities[6].properties[2]);

  /// see [DataElement.name]
  static final name =
      QueryStringProperty<DataElement>(_entities[6].properties[3]);

  /// see [DataElement.code]
  static final code =
      QueryStringProperty<DataElement>(_entities[6].properties[4]);

  /// see [DataElement.formName]
  static final formName =
      QueryStringProperty<DataElement>(_entities[6].properties[5]);

  /// see [DataElement.shortName]
  static final shortName =
      QueryStringProperty<DataElement>(_entities[6].properties[6]);

  /// see [DataElement.description]
  static final description =
      QueryStringProperty<DataElement>(_entities[6].properties[7]);

  /// see [DataElement.aggregationType]
  static final aggregationType =
      QueryStringProperty<DataElement>(_entities[6].properties[8]);

  /// see [DataElement.valueType]
  static final valueType =
      QueryStringProperty<DataElement>(_entities[6].properties[9]);

  /// see [DataElement.domainType]
  static final domainType =
      QueryStringProperty<DataElement>(_entities[6].properties[10]);

  /// see [DataElement.zeroIsSignificant]
  static final zeroIsSignificant =
      QueryBooleanProperty<DataElement>(_entities[6].properties[11]);

  /// see [DataElement.optionSet]
  static final optionSet = QueryRelationToOne<DataElement, DHIS2OptionSet>(
      _entities[6].properties[12]);

  /// see [DataElement.id]
  static final id =
      QueryIntegerProperty<DataElement>(_entities[6].properties[13]);

  /// see [DataElement.legendSets]
  static final legendSets =
      QueryRelationToMany<DataElement, LegendSet>(_entities[6].relations[0]);
}

/// [Legend] entity fields to define ObjectBox queries.
class Legend_ {
  /// see [Legend.id]
  static final id = QueryIntegerProperty<Legend>(_entities[7].properties[0]);

  /// see [Legend.created]
  static final created =
      QueryIntegerProperty<Legend>(_entities[7].properties[1]);

  /// see [Legend.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<Legend>(_entities[7].properties[2]);

  /// see [Legend.uid]
  static final uid = QueryStringProperty<Legend>(_entities[7].properties[3]);

  /// see [Legend.name]
  static final name = QueryStringProperty<Legend>(_entities[7].properties[4]);

  /// see [Legend.startValue]
  static final startValue =
      QueryDoubleProperty<Legend>(_entities[7].properties[5]);

  /// see [Legend.endValue]
  static final endValue =
      QueryDoubleProperty<Legend>(_entities[7].properties[6]);

  /// see [Legend.color]
  static final color = QueryStringProperty<Legend>(_entities[7].properties[7]);

  /// see [Legend.displayName]
  static final displayName =
      QueryStringProperty<Legend>(_entities[7].properties[8]);
}

/// [LegendSet] entity fields to define ObjectBox queries.
class LegendSet_ {
  /// see [LegendSet.id]
  static final id = QueryIntegerProperty<LegendSet>(_entities[8].properties[0]);

  /// see [LegendSet.created]
  static final created =
      QueryIntegerProperty<LegendSet>(_entities[8].properties[1]);

  /// see [LegendSet.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<LegendSet>(_entities[8].properties[2]);

  /// see [LegendSet.uid]
  static final uid = QueryStringProperty<LegendSet>(_entities[8].properties[3]);

  /// see [LegendSet.name]
  static final name =
      QueryStringProperty<LegendSet>(_entities[8].properties[4]);

  /// see [LegendSet.code]
  static final code =
      QueryStringProperty<LegendSet>(_entities[8].properties[5]);

  /// see [LegendSet.legends]
  static final legends =
      QueryRelationToMany<LegendSet, Legend>(_entities[8].relations[0]);
}

/// [OrganisationUnit] entity fields to define ObjectBox queries.
class OrganisationUnit_ {
  /// see [OrganisationUnit.id]
  static final id =
      QueryIntegerProperty<OrganisationUnit>(_entities[9].properties[0]);

  /// see [OrganisationUnit.name]
  static final name =
      QueryStringProperty<OrganisationUnit>(_entities[9].properties[1]);

  /// see [OrganisationUnit.shortName]
  static final shortName =
      QueryStringProperty<OrganisationUnit>(_entities[9].properties[2]);

  /// see [OrganisationUnit.uid]
  static final uid =
      QueryStringProperty<OrganisationUnit>(_entities[9].properties[3]);

  /// see [OrganisationUnit.path]
  static final path =
      QueryStringProperty<OrganisationUnit>(_entities[9].properties[4]);

  /// see [OrganisationUnit.level]
  static final level =
      QueryIntegerProperty<OrganisationUnit>(_entities[9].properties[5]);

  /// see [OrganisationUnit.created]
  static final created =
      QueryIntegerProperty<OrganisationUnit>(_entities[9].properties[6]);

  /// see [OrganisationUnit.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<OrganisationUnit>(_entities[9].properties[7]);
}

/// [OrganisationUnitGroup] entity fields to define ObjectBox queries.
class OrganisationUnitGroup_ {
  /// see [OrganisationUnitGroup.id]
  static final id =
      QueryIntegerProperty<OrganisationUnitGroup>(_entities[10].properties[0]);

  /// see [OrganisationUnitGroup.name]
  static final name =
      QueryStringProperty<OrganisationUnitGroup>(_entities[10].properties[1]);

  /// see [OrganisationUnitGroup.uid]
  static final uid =
      QueryStringProperty<OrganisationUnitGroup>(_entities[10].properties[2]);

  /// see [OrganisationUnitGroup.created]
  static final created =
      QueryIntegerProperty<OrganisationUnitGroup>(_entities[10].properties[3]);

  /// see [OrganisationUnitGroup.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<OrganisationUnitGroup>(_entities[10].properties[4]);

  /// see [OrganisationUnitGroup.organisationUnits]
  static final organisationUnits =
      QueryRelationToMany<OrganisationUnitGroup, OrganisationUnit>(
          _entities[10].relations[0]);
}

/// [OrganisationUnitLevel] entity fields to define ObjectBox queries.
class OrganisationUnitLevel_ {
  /// see [OrganisationUnitLevel.id]
  static final id =
      QueryIntegerProperty<OrganisationUnitLevel>(_entities[11].properties[0]);

  /// see [OrganisationUnitLevel.name]
  static final name =
      QueryStringProperty<OrganisationUnitLevel>(_entities[11].properties[1]);

  /// see [OrganisationUnitLevel.uid]
  static final uid =
      QueryStringProperty<OrganisationUnitLevel>(_entities[11].properties[2]);

  /// see [OrganisationUnitLevel.level]
  static final level =
      QueryIntegerProperty<OrganisationUnitLevel>(_entities[11].properties[3]);

  /// see [OrganisationUnitLevel.created]
  static final created =
      QueryIntegerProperty<OrganisationUnitLevel>(_entities[11].properties[4]);

  /// see [OrganisationUnitLevel.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<OrganisationUnitLevel>(_entities[11].properties[5]);
}

/// [ProgramRule] entity fields to define ObjectBox queries.
class ProgramRule_ {
  /// see [ProgramRule.id]
  static final id =
      QueryIntegerProperty<ProgramRule>(_entities[12].properties[0]);

  /// see [ProgramRule.created]
  static final created =
      QueryIntegerProperty<ProgramRule>(_entities[12].properties[1]);

  /// see [ProgramRule.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramRule>(_entities[12].properties[2]);

  /// see [ProgramRule.uid]
  static final uid =
      QueryStringProperty<ProgramRule>(_entities[12].properties[3]);

  /// see [ProgramRule.name]
  static final name =
      QueryStringProperty<ProgramRule>(_entities[12].properties[4]);

  /// see [ProgramRule.description]
  static final description =
      QueryStringProperty<ProgramRule>(_entities[12].properties[5]);

  /// see [ProgramRule.condition]
  static final condition =
      QueryStringProperty<ProgramRule>(_entities[12].properties[6]);

  /// see [ProgramRule.program]
  static final program =
      QueryRelationToOne<ProgramRule, D2Program>(_entities[12].properties[7]);

  /// see [ProgramRule.programRuleActions]
  static final programRuleActions =
      QueryRelationToMany<ProgramRule, ProgramRuleAction>(
          _entities[12].relations[0]);
}

/// [ProgramRuleAction] entity fields to define ObjectBox queries.
class ProgramRuleAction_ {
  /// see [ProgramRuleAction.id]
  static final id =
      QueryIntegerProperty<ProgramRuleAction>(_entities[13].properties[0]);

  /// see [ProgramRuleAction.created]
  static final created =
      QueryIntegerProperty<ProgramRuleAction>(_entities[13].properties[1]);

  /// see [ProgramRuleAction.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramRuleAction>(_entities[13].properties[2]);

  /// see [ProgramRuleAction.uid]
  static final uid =
      QueryStringProperty<ProgramRuleAction>(_entities[13].properties[3]);

  /// see [ProgramRuleAction.programRuleActionType]
  static final programRuleActionType =
      QueryStringProperty<ProgramRuleAction>(_entities[13].properties[4]);

  /// see [ProgramRuleAction.content]
  static final content =
      QueryStringProperty<ProgramRuleAction>(_entities[13].properties[5]);

  /// see [ProgramRuleAction.data]
  static final data =
      QueryStringProperty<ProgramRuleAction>(_entities[13].properties[6]);

  /// see [ProgramRuleAction.location]
  static final location =
      QueryStringProperty<ProgramRuleAction>(_entities[13].properties[7]);

  /// see [ProgramRuleAction.programRule]
  static final programRule = QueryRelationToOne<ProgramRuleAction, ProgramRule>(
      _entities[13].properties[8]);

  /// see [ProgramRuleAction.dataElement]
  static final dataElement = QueryRelationToOne<ProgramRuleAction, DataElement>(
      _entities[13].properties[9]);

  /// see [ProgramRuleAction.programStageSection]
  static final programStageSection =
      QueryRelationToOne<ProgramRuleAction, ProgramStageSection>(
          _entities[13].properties[10]);

  /// see [ProgramRuleAction.programSection]
  static final programSection =
      QueryRelationToOne<ProgramRuleAction, ProgramSection>(
          _entities[13].properties[11]);

  /// see [ProgramRuleAction.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<ProgramRuleAction, TrackedEntityAttribute>(
          _entities[13].properties[12]);
}

/// [ProgramRuleVariable] entity fields to define ObjectBox queries.
class ProgramRuleVariable_ {
  /// see [ProgramRuleVariable.id]
  static final id =
      QueryIntegerProperty<ProgramRuleVariable>(_entities[14].properties[0]);

  /// see [ProgramRuleVariable.created]
  static final created =
      QueryIntegerProperty<ProgramRuleVariable>(_entities[14].properties[1]);

  /// see [ProgramRuleVariable.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramRuleVariable>(_entities[14].properties[2]);

  /// see [ProgramRuleVariable.uid]
  static final uid =
      QueryStringProperty<ProgramRuleVariable>(_entities[14].properties[3]);

  /// see [ProgramRuleVariable.name]
  static final name =
      QueryStringProperty<ProgramRuleVariable>(_entities[14].properties[4]);

  /// see [ProgramRuleVariable.programRuleVariableSourceType]
  static final programRuleVariableSourceType =
      QueryStringProperty<ProgramRuleVariable>(_entities[14].properties[5]);

  /// see [ProgramRuleVariable.valueType]
  static final valueType =
      QueryStringProperty<ProgramRuleVariable>(_entities[14].properties[6]);

  /// see [ProgramRuleVariable.useCodeForOptionSet]
  static final useCodeForOptionSet =
      QueryBooleanProperty<ProgramRuleVariable>(_entities[14].properties[7]);

  /// see [ProgramRuleVariable.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<ProgramRuleVariable, TrackedEntityAttribute>(
          _entities[14].properties[8]);

  /// see [ProgramRuleVariable.dataElement]
  static final dataElement =
      QueryRelationToOne<ProgramRuleVariable, DataElement>(
          _entities[14].properties[9]);

  /// see [ProgramRuleVariable.programStage]
  static final programStage =
      QueryRelationToOne<ProgramRuleVariable, ProgramStage>(
          _entities[14].properties[10]);

  /// see [ProgramRuleVariable.program]
  static final program = QueryRelationToOne<ProgramRuleVariable, D2Program>(
      _entities[14].properties[11]);
}

/// [ProgramSection] entity fields to define ObjectBox queries.
class ProgramSection_ {
  /// see [ProgramSection.id]
  static final id =
      QueryIntegerProperty<ProgramSection>(_entities[15].properties[0]);

  /// see [ProgramSection.created]
  static final created =
      QueryIntegerProperty<ProgramSection>(_entities[15].properties[1]);

  /// see [ProgramSection.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramSection>(_entities[15].properties[2]);

  /// see [ProgramSection.uid]
  static final uid =
      QueryStringProperty<ProgramSection>(_entities[15].properties[3]);

  /// see [ProgramSection.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<ProgramSection>(_entities[15].properties[4]);

  /// see [ProgramSection.name]
  static final name =
      QueryStringProperty<ProgramSection>(_entities[15].properties[5]);

  /// see [ProgramSection.program]
  static final program = QueryRelationToOne<ProgramSection, D2Program>(
      _entities[15].properties[6]);

  /// see [ProgramSection.trackedEntityAttributes]
  static final trackedEntityAttributes =
      QueryRelationToMany<ProgramSection, TrackedEntityAttribute>(
          _entities[15].relations[0]);
}

/// [ProgramStage] entity fields to define ObjectBox queries.
class ProgramStage_ {
  /// see [ProgramStage.id]
  static final id =
      QueryIntegerProperty<ProgramStage>(_entities[16].properties[0]);

  /// see [ProgramStage.created]
  static final created =
      QueryIntegerProperty<ProgramStage>(_entities[16].properties[1]);

  /// see [ProgramStage.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramStage>(_entities[16].properties[2]);

  /// see [ProgramStage.uid]
  static final uid =
      QueryStringProperty<ProgramStage>(_entities[16].properties[3]);

  /// see [ProgramStage.name]
  static final name =
      QueryStringProperty<ProgramStage>(_entities[16].properties[4]);

  /// see [ProgramStage.description]
  static final description =
      QueryStringProperty<ProgramStage>(_entities[16].properties[5]);

  /// see [ProgramStage.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<ProgramStage>(_entities[16].properties[6]);

  /// see [ProgramStage.validationStrategy]
  static final validationStrategy =
      QueryStringProperty<ProgramStage>(_entities[16].properties[7]);

  /// see [ProgramStage.featureType]
  static final featureType =
      QueryStringProperty<ProgramStage>(_entities[16].properties[8]);

  /// see [ProgramStage.reportDateToUse]
  static final reportDateToUse =
      QueryStringProperty<ProgramStage>(_entities[16].properties[9]);

  /// see [ProgramStage.program]
  static final program =
      QueryRelationToOne<ProgramStage, D2Program>(_entities[16].properties[10]);

  /// see [ProgramStage.programStageDataElements]
  static final programStageDataElements =
      QueryRelationToMany<ProgramStage, ProgramStageDataElement>(
          _entities[16].relations[0]);

  /// see [ProgramStage.programStageSections]
  static final programStageSections =
      QueryRelationToMany<ProgramStage, ProgramStageSection>(
          _entities[16].relations[1]);
}

/// [ProgramStageDataElement] entity fields to define ObjectBox queries.
class ProgramStageDataElement_ {
  /// see [ProgramStageDataElement.created]
  static final created = QueryIntegerProperty<ProgramStageDataElement>(
      _entities[17].properties[0]);

  /// see [ProgramStageDataElement.id]
  static final id = QueryIntegerProperty<ProgramStageDataElement>(
      _entities[17].properties[1]);

  /// see [ProgramStageDataElement.lastUpdated]
  static final lastUpdated = QueryIntegerProperty<ProgramStageDataElement>(
      _entities[17].properties[2]);

  /// see [ProgramStageDataElement.uid]
  static final uid =
      QueryStringProperty<ProgramStageDataElement>(_entities[17].properties[3]);

  /// see [ProgramStageDataElement.compulsory]
  static final compulsory = QueryBooleanProperty<ProgramStageDataElement>(
      _entities[17].properties[4]);

  /// see [ProgramStageDataElement.sortOrder]
  static final sortOrder = QueryIntegerProperty<ProgramStageDataElement>(
      _entities[17].properties[5]);

  /// see [ProgramStageDataElement.programStage]
  static final programStage =
      QueryRelationToOne<ProgramStageDataElement, ProgramStage>(
          _entities[17].properties[6]);

  /// see [ProgramStageDataElement.dataElement]
  static final dataElement =
      QueryRelationToOne<ProgramStageDataElement, DataElement>(
          _entities[17].properties[7]);
}

/// [ProgramStageSection] entity fields to define ObjectBox queries.
class ProgramStageSection_ {
  /// see [ProgramStageSection.id]
  static final id =
      QueryIntegerProperty<ProgramStageSection>(_entities[18].properties[0]);

  /// see [ProgramStageSection.created]
  static final created =
      QueryIntegerProperty<ProgramStageSection>(_entities[18].properties[1]);

  /// see [ProgramStageSection.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramStageSection>(_entities[18].properties[2]);

  /// see [ProgramStageSection.uid]
  static final uid =
      QueryStringProperty<ProgramStageSection>(_entities[18].properties[3]);

  /// see [ProgramStageSection.name]
  static final name =
      QueryStringProperty<ProgramStageSection>(_entities[18].properties[4]);

  /// see [ProgramStageSection.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<ProgramStageSection>(_entities[18].properties[5]);

  /// see [ProgramStageSection.programStage]
  static final programStage =
      QueryRelationToOne<ProgramStageSection, ProgramStage>(
          _entities[18].properties[6]);

  /// see [ProgramStageSection.dataElements]
  static final dataElements =
      QueryRelationToMany<ProgramStageSection, DataElement>(
          _entities[18].relations[0]);
}

/// [ProgramTrackedEntityAttribute] entity fields to define ObjectBox queries.
class ProgramTrackedEntityAttribute_ {
  /// see [ProgramTrackedEntityAttribute.created]
  static final created = QueryIntegerProperty<ProgramTrackedEntityAttribute>(
      _entities[19].properties[0]);

  /// see [ProgramTrackedEntityAttribute.id]
  static final id = QueryIntegerProperty<ProgramTrackedEntityAttribute>(
      _entities[19].properties[1]);

  /// see [ProgramTrackedEntityAttribute.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<ProgramTrackedEntityAttribute>(
          _entities[19].properties[2]);

  /// see [ProgramTrackedEntityAttribute.uid]
  static final uid = QueryStringProperty<ProgramTrackedEntityAttribute>(
      _entities[19].properties[3]);

  /// see [ProgramTrackedEntityAttribute.name]
  static final name = QueryStringProperty<ProgramTrackedEntityAttribute>(
      _entities[19].properties[4]);

  /// see [ProgramTrackedEntityAttribute.sortOrder]
  static final sortOrder = QueryIntegerProperty<ProgramTrackedEntityAttribute>(
      _entities[19].properties[5]);

  /// see [ProgramTrackedEntityAttribute.displayInList]
  static final displayInList =
      QueryBooleanProperty<ProgramTrackedEntityAttribute>(
          _entities[19].properties[6]);

  /// see [ProgramTrackedEntityAttribute.mandatory]
  static final mandatory = QueryBooleanProperty<ProgramTrackedEntityAttribute>(
      _entities[19].properties[7]);

  /// see [ProgramTrackedEntityAttribute.valueType]
  static final valueType = QueryStringProperty<ProgramTrackedEntityAttribute>(
      _entities[19].properties[8]);

  /// see [ProgramTrackedEntityAttribute.displayName]
  static final displayName = QueryStringProperty<ProgramTrackedEntityAttribute>(
      _entities[19].properties[9]);

  /// see [ProgramTrackedEntityAttribute.program]
  static final program =
      QueryRelationToOne<ProgramTrackedEntityAttribute, D2Program>(
          _entities[19].properties[10]);

  /// see [ProgramTrackedEntityAttribute.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<ProgramTrackedEntityAttribute, TrackedEntityAttribute>(
          _entities[19].properties[11]);
}

/// [RelationshipConstraint] entity fields to define ObjectBox queries.
class RelationshipConstraint_ {
  /// see [RelationshipConstraint.id]
  static final id =
      QueryIntegerProperty<RelationshipConstraint>(_entities[20].properties[0]);

  /// see [RelationshipConstraint.relationshipEntity]
  static final relationshipEntity =
      QueryStringProperty<RelationshipConstraint>(_entities[20].properties[1]);

  /// see [RelationshipConstraint.name]
  static final name =
      QueryStringProperty<RelationshipConstraint>(_entities[20].properties[2]);

  /// see [RelationshipConstraint.trackedEntityType]
  static final trackedEntityType =
      QueryRelationToOne<RelationshipConstraint, TrackedEntityType>(
          _entities[20].properties[3]);

  /// see [RelationshipConstraint.relationshipType]
  static final relationshipType =
      QueryRelationToOne<RelationshipConstraint, RelationshipType>(
          _entities[20].properties[4]);

  /// see [RelationshipConstraint.program]
  static final program = QueryRelationToOne<RelationshipConstraint, D2Program>(
      _entities[20].properties[5]);

  /// see [RelationshipConstraint.programStage]
  static final programStage =
      QueryRelationToOne<RelationshipConstraint, ProgramStage>(
          _entities[20].properties[6]);
}

/// [RelationshipType] entity fields to define ObjectBox queries.
class RelationshipType_ {
  /// see [RelationshipType.id]
  static final id =
      QueryIntegerProperty<RelationshipType>(_entities[21].properties[0]);

  /// see [RelationshipType.created]
  static final created =
      QueryIntegerProperty<RelationshipType>(_entities[21].properties[1]);

  /// see [RelationshipType.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<RelationshipType>(_entities[21].properties[2]);

  /// see [RelationshipType.uid]
  static final uid =
      QueryStringProperty<RelationshipType>(_entities[21].properties[3]);

  /// see [RelationshipType.name]
  static final name =
      QueryStringProperty<RelationshipType>(_entities[21].properties[4]);

  /// see [RelationshipType.code]
  static final code =
      QueryStringProperty<RelationshipType>(_entities[21].properties[5]);

  /// see [RelationshipType.bidirectional]
  static final bidirectional =
      QueryBooleanProperty<RelationshipType>(_entities[21].properties[6]);

  /// see [RelationshipType.referral]
  static final referral =
      QueryBooleanProperty<RelationshipType>(_entities[21].properties[7]);

  /// see [RelationshipType.fromToName]
  static final fromToName =
      QueryStringProperty<RelationshipType>(_entities[21].properties[8]);

  /// see [RelationshipType.toFromName]
  static final toFromName =
      QueryStringProperty<RelationshipType>(_entities[21].properties[9]);

  /// see [RelationshipType.fromConstraint]
  static final fromConstraint =
      QueryRelationToOne<RelationshipType, RelationshipConstraint>(
          _entities[21].properties[10]);

  /// see [RelationshipType.toConstraint]
  static final toConstraint =
      QueryRelationToOne<RelationshipType, RelationshipConstraint>(
          _entities[21].properties[11]);
}

/// [SystemInfo] entity fields to define ObjectBox queries.
class SystemInfo_ {
  /// see [SystemInfo.id]
  static final id =
      QueryIntegerProperty<SystemInfo>(_entities[22].properties[0]);

  /// see [SystemInfo.version]
  static final version =
      QueryStringProperty<SystemInfo>(_entities[22].properties[1]);

  /// see [SystemInfo.revision]
  static final revision =
      QueryStringProperty<SystemInfo>(_entities[22].properties[2]);

  /// see [SystemInfo.calendar]
  static final calendar =
      QueryStringProperty<SystemInfo>(_entities[22].properties[3]);

  /// see [SystemInfo.dateFormat]
  static final dateFormat =
      QueryStringProperty<SystemInfo>(_entities[22].properties[4]);

  /// see [SystemInfo.contextPath]
  static final contextPath =
      QueryStringProperty<SystemInfo>(_entities[22].properties[5]);

  /// see [SystemInfo.systemId]
  static final systemId =
      QueryStringProperty<SystemInfo>(_entities[22].properties[6]);

  /// see [SystemInfo.systemName]
  static final systemName =
      QueryStringProperty<SystemInfo>(_entities[22].properties[7]);
}

/// [TrackedEntityAttribute] entity fields to define ObjectBox queries.
class TrackedEntityAttribute_ {
  /// see [TrackedEntityAttribute.id]
  static final id =
      QueryIntegerProperty<TrackedEntityAttribute>(_entities[23].properties[0]);

  /// see [TrackedEntityAttribute.created]
  static final created =
      QueryIntegerProperty<TrackedEntityAttribute>(_entities[23].properties[1]);

  /// see [TrackedEntityAttribute.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<TrackedEntityAttribute>(_entities[23].properties[2]);

  /// see [TrackedEntityAttribute.uid]
  static final uid =
      QueryStringProperty<TrackedEntityAttribute>(_entities[23].properties[3]);

  /// see [TrackedEntityAttribute.name]
  static final name =
      QueryStringProperty<TrackedEntityAttribute>(_entities[23].properties[4]);

  /// see [TrackedEntityAttribute.code]
  static final code =
      QueryStringProperty<TrackedEntityAttribute>(_entities[23].properties[5]);

  /// see [TrackedEntityAttribute.formName]
  static final formName =
      QueryStringProperty<TrackedEntityAttribute>(_entities[23].properties[6]);

  /// see [TrackedEntityAttribute.shortName]
  static final shortName =
      QueryStringProperty<TrackedEntityAttribute>(_entities[23].properties[7]);

  /// see [TrackedEntityAttribute.description]
  static final description =
      QueryStringProperty<TrackedEntityAttribute>(_entities[23].properties[8]);

  /// see [TrackedEntityAttribute.aggregationType]
  static final aggregationType =
      QueryStringProperty<TrackedEntityAttribute>(_entities[23].properties[9]);

  /// see [TrackedEntityAttribute.valueType]
  static final valueType =
      QueryStringProperty<TrackedEntityAttribute>(_entities[23].properties[10]);

  /// see [TrackedEntityAttribute.zeroIsSignificant]
  static final zeroIsSignificant = QueryBooleanProperty<TrackedEntityAttribute>(
      _entities[23].properties[11]);

  /// see [TrackedEntityAttribute.optionSet]
  static final optionSet =
      QueryRelationToOne<TrackedEntityAttribute, DHIS2OptionSet>(
          _entities[23].properties[12]);

  /// see [TrackedEntityAttribute.legendSets]
  static final legendSets =
      QueryRelationToMany<TrackedEntityAttribute, LegendSet>(
          _entities[23].relations[0]);
}

/// [TrackedEntityType] entity fields to define ObjectBox queries.
class TrackedEntityType_ {
  /// see [TrackedEntityType.id]
  static final id =
      QueryIntegerProperty<TrackedEntityType>(_entities[24].properties[0]);

  /// see [TrackedEntityType.created]
  static final created =
      QueryIntegerProperty<TrackedEntityType>(_entities[24].properties[1]);

  /// see [TrackedEntityType.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<TrackedEntityType>(_entities[24].properties[2]);

  /// see [TrackedEntityType.uid]
  static final uid =
      QueryStringProperty<TrackedEntityType>(_entities[24].properties[3]);

  /// see [TrackedEntityType.name]
  static final name =
      QueryStringProperty<TrackedEntityType>(_entities[24].properties[4]);

  /// see [TrackedEntityType.description]
  static final description =
      QueryStringProperty<TrackedEntityType>(_entities[24].properties[5]);

  /// see [TrackedEntityType.trackedEntityTypeAttributes]
  static final trackedEntityTypeAttributes =
      QueryRelationToMany<TrackedEntityType, TrackedEntityTypeAttribute>(
          _entities[24].relations[0]);
}

/// [TrackedEntityTypeAttribute] entity fields to define ObjectBox queries.
class TrackedEntityTypeAttribute_ {
  /// see [TrackedEntityTypeAttribute.id]
  static final id = QueryIntegerProperty<TrackedEntityTypeAttribute>(
      _entities[25].properties[0]);

  /// see [TrackedEntityTypeAttribute.created]
  static final created = QueryIntegerProperty<TrackedEntityTypeAttribute>(
      _entities[25].properties[1]);

  /// see [TrackedEntityTypeAttribute.lastUpdated]
  static final lastUpdated = QueryIntegerProperty<TrackedEntityTypeAttribute>(
      _entities[25].properties[2]);

  /// see [TrackedEntityTypeAttribute.uid]
  static final uid = QueryStringProperty<TrackedEntityTypeAttribute>(
      _entities[25].properties[3]);

  /// see [TrackedEntityTypeAttribute.trackedEntityType]
  static final trackedEntityType =
      QueryRelationToOne<TrackedEntityTypeAttribute, TrackedEntityType>(
          _entities[25].properties[4]);

  /// see [TrackedEntityTypeAttribute.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<TrackedEntityTypeAttribute, TrackedEntityAttribute>(
          _entities[25].properties[5]);

  /// see [TrackedEntityTypeAttribute.valueType]
  static final valueType = QueryStringProperty<TrackedEntityTypeAttribute>(
      _entities[25].properties[6]);

  /// see [TrackedEntityTypeAttribute.displayName]
  static final displayName = QueryStringProperty<TrackedEntityTypeAttribute>(
      _entities[25].properties[7]);

  /// see [TrackedEntityTypeAttribute.displayShortName]
  static final displayShortName =
      QueryStringProperty<TrackedEntityTypeAttribute>(
          _entities[25].properties[8]);

  /// see [TrackedEntityTypeAttribute.mandatory]
  static final mandatory = QueryBooleanProperty<TrackedEntityTypeAttribute>(
      _entities[25].properties[9]);
}

/// [Relationship] entity fields to define ObjectBox queries.
class Relationship_ {
  /// see [Relationship.id]
  static final id =
      QueryIntegerProperty<Relationship>(_entities[26].properties[0]);

  /// see [Relationship.created]
  static final created =
      QueryIntegerProperty<Relationship>(_entities[26].properties[1]);

  /// see [Relationship.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<Relationship>(_entities[26].properties[2]);

  /// see [Relationship.uid]
  static final uid =
      QueryStringProperty<Relationship>(_entities[26].properties[3]);

  /// see [Relationship.relationshipName]
  static final relationshipName =
      QueryStringProperty<Relationship>(_entities[26].properties[4]);

  /// see [Relationship.bidirectional]
  static final bidirectional =
      QueryBooleanProperty<Relationship>(_entities[26].properties[5]);

  /// see [Relationship.relationshipType]
  static final relationshipType =
      QueryStringProperty<Relationship>(_entities[26].properties[6]);
}

/// [D2TrackedEntityAttributeValue] entity fields to define ObjectBox queries.
class D2TrackedEntityAttributeValue_ {
  /// see [D2TrackedEntityAttributeValue.id]
  static final id = QueryIntegerProperty<D2TrackedEntityAttributeValue>(
      _entities[27].properties[0]);

  /// see [D2TrackedEntityAttributeValue.created]
  static final created = QueryIntegerProperty<D2TrackedEntityAttributeValue>(
      _entities[27].properties[1]);

  /// see [D2TrackedEntityAttributeValue.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2TrackedEntityAttributeValue>(
          _entities[27].properties[2]);

  /// see [D2TrackedEntityAttributeValue.uid]
  static final uid = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[27].properties[3]);

  /// see [D2TrackedEntityAttributeValue.displayName]
  static final displayName = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[27].properties[4]);

  /// see [D2TrackedEntityAttributeValue.code]
  static final code = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[27].properties[5]);

  /// see [D2TrackedEntityAttributeValue.value]
  static final value = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[27].properties[6]);

  /// see [D2TrackedEntityAttributeValue.valueType]
  static final valueType = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[27].properties[7]);
}

/// [D2DataValue] entity fields to define ObjectBox queries.
class D2DataValue_ {
  /// see [D2DataValue.id]
  static final id =
      QueryIntegerProperty<D2DataValue>(_entities[28].properties[0]);

  /// see [D2DataValue.created]
  static final created =
      QueryIntegerProperty<D2DataValue>(_entities[28].properties[1]);

  /// see [D2DataValue.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2DataValue>(_entities[28].properties[2]);

  /// see [D2DataValue.uid]
  static final uid =
      QueryStringProperty<D2DataValue>(_entities[28].properties[3]);

  /// see [D2DataValue.value]
  static final value =
      QueryStringProperty<D2DataValue>(_entities[28].properties[4]);

  /// see [D2DataValue.providedElsewhere]
  static final providedElsewhere =
      QueryBooleanProperty<D2DataValue>(_entities[28].properties[5]);
}

/// [D2Enrollment] entity fields to define ObjectBox queries.
class D2Enrollment_ {
  /// see [D2Enrollment.id]
  static final id =
      QueryIntegerProperty<D2Enrollment>(_entities[29].properties[0]);

  /// see [D2Enrollment.created]
  static final created =
      QueryIntegerProperty<D2Enrollment>(_entities[29].properties[1]);

  /// see [D2Enrollment.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2Enrollment>(_entities[29].properties[2]);

  /// see [D2Enrollment.createdAtClient]
  static final createdAtClient =
      QueryIntegerProperty<D2Enrollment>(_entities[29].properties[3]);

  /// see [D2Enrollment.uid]
  static final uid =
      QueryStringProperty<D2Enrollment>(_entities[29].properties[4]);

  /// see [D2Enrollment.program]
  static final program =
      QueryStringProperty<D2Enrollment>(_entities[29].properties[5]);

  /// see [D2Enrollment.trackedEntityInstance]
  static final trackedEntityInstance =
      QueryStringProperty<D2Enrollment>(_entities[29].properties[6]);

  /// see [D2Enrollment.trackedEntityType]
  static final trackedEntityType =
      QueryStringProperty<D2Enrollment>(_entities[29].properties[7]);

  /// see [D2Enrollment.orgUnit]
  static final orgUnit =
      QueryStringProperty<D2Enrollment>(_entities[29].properties[8]);

  /// see [D2Enrollment.orgUnitName]
  static final orgUnitName =
      QueryStringProperty<D2Enrollment>(_entities[29].properties[9]);

  /// see [D2Enrollment.enrollmentDate]
  static final enrollmentDate =
      QueryIntegerProperty<D2Enrollment>(_entities[29].properties[10]);

  /// see [D2Enrollment.deleted]
  static final deleted =
      QueryBooleanProperty<D2Enrollment>(_entities[29].properties[11]);

  /// see [D2Enrollment.followup]
  static final followup =
      QueryBooleanProperty<D2Enrollment>(_entities[29].properties[12]);

  /// see [D2Enrollment.incidentDate]
  static final incidentDate =
      QueryIntegerProperty<D2Enrollment>(_entities[29].properties[13]);

  /// see [D2Enrollment.status]
  static final status =
      QueryStringProperty<D2Enrollment>(_entities[29].properties[14]);

  /// see [D2Enrollment.notes]
  static final notes =
      QueryStringVectorProperty<D2Enrollment>(_entities[29].properties[15]);

  /// see [D2Enrollment.events]
  static final events =
      QueryRelationToMany<D2Enrollment, D2Event>(_entities[29].relations[0]);

  /// see [D2Enrollment.relationships]
  static final relationships = QueryRelationToMany<D2Enrollment, Relationship>(
      _entities[29].relations[1]);

  /// see [D2Enrollment.attributes]
  static final attributes =
      QueryRelationToMany<D2Enrollment, D2TrackedEntityAttributeValue>(
          _entities[29].relations[2]);
}

/// [D2Event] entity fields to define ObjectBox queries.
class D2Event_ {
  /// see [D2Event.id]
  static final id = QueryIntegerProperty<D2Event>(_entities[30].properties[0]);

  /// see [D2Event.created]
  static final created =
      QueryIntegerProperty<D2Event>(_entities[30].properties[1]);

  /// see [D2Event.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2Event>(_entities[30].properties[2]);

  /// see [D2Event.createdAtClient]
  static final createdAtClient =
      QueryIntegerProperty<D2Event>(_entities[30].properties[3]);

  /// see [D2Event.uid]
  static final uid = QueryStringProperty<D2Event>(_entities[30].properties[4]);

  /// see [D2Event.dueDate]
  static final dueDate =
      QueryIntegerProperty<D2Event>(_entities[30].properties[5]);

  /// see [D2Event.program]
  static final program =
      QueryStringProperty<D2Event>(_entities[30].properties[6]);

  /// see [D2Event.programStage]
  static final programStage =
      QueryStringProperty<D2Event>(_entities[30].properties[7]);

  /// see [D2Event.orgUnit]
  static final orgUnit =
      QueryStringProperty<D2Event>(_entities[30].properties[8]);

  /// see [D2Event.enrollment]
  static final enrollment =
      QueryStringProperty<D2Event>(_entities[30].properties[9]);

  /// see [D2Event.trackedEntityInstance]
  static final trackedEntityInstance =
      QueryStringProperty<D2Event>(_entities[30].properties[10]);

  /// see [D2Event.enrollmentStatus]
  static final enrollmentStatus =
      QueryStringProperty<D2Event>(_entities[30].properties[11]);

  /// see [D2Event.eventDate]
  static final eventDate =
      QueryIntegerProperty<D2Event>(_entities[30].properties[12]);

  /// see [D2Event.orgUnitName]
  static final orgUnitName =
      QueryStringProperty<D2Event>(_entities[30].properties[13]);

  /// see [D2Event.status]
  static final status =
      QueryStringProperty<D2Event>(_entities[30].properties[14]);

  /// see [D2Event.attributeCategoryOptions]
  static final attributeCategoryOptions =
      QueryStringProperty<D2Event>(_entities[30].properties[15]);

  /// see [D2Event.deleted]
  static final deleted =
      QueryBooleanProperty<D2Event>(_entities[30].properties[16]);

  /// see [D2Event.followup]
  static final followup =
      QueryBooleanProperty<D2Event>(_entities[30].properties[17]);

  /// see [D2Event.attributeOptionCombo]
  static final attributeOptionCombo =
      QueryStringProperty<D2Event>(_entities[30].properties[18]);

  /// see [D2Event.notes]
  static final notes =
      QueryStringVectorProperty<D2Event>(_entities[30].properties[19]);

  /// see [D2Event.relationships]
  static final relationships =
      QueryRelationToMany<D2Event, Relationship>(_entities[30].relations[0]);

  /// see [D2Event.dataValues]
  static final dataValues =
      QueryRelationToMany<D2Event, D2DataValue>(_entities[30].relations[1]);
}

/// [TrackedEntity] entity fields to define ObjectBox queries.
class TrackedEntity_ {
  /// see [TrackedEntity.id]
  static final id =
      QueryIntegerProperty<TrackedEntity>(_entities[31].properties[0]);

  /// see [TrackedEntity.created]
  static final created =
      QueryIntegerProperty<TrackedEntity>(_entities[31].properties[1]);

  /// see [TrackedEntity.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<TrackedEntity>(_entities[31].properties[2]);

  /// see [TrackedEntity.uid]
  static final uid =
      QueryStringProperty<TrackedEntity>(_entities[31].properties[3]);

  /// see [TrackedEntity.trackedEntityType]
  static final trackedEntityType =
      QueryStringProperty<TrackedEntity>(_entities[31].properties[4]);

  /// see [TrackedEntity.featureType]
  static final featureType =
      QueryStringProperty<TrackedEntity>(_entities[31].properties[5]);

  /// see [TrackedEntity.orgUnit]
  static final orgUnit =
      QueryStringProperty<TrackedEntity>(_entities[31].properties[6]);

  /// see [TrackedEntity.createdAtClient]
  static final createdAtClient =
      QueryIntegerProperty<TrackedEntity>(_entities[31].properties[7]);

  /// see [TrackedEntity.potentialDuplicate]
  static final potentialDuplicate =
      QueryBooleanProperty<TrackedEntity>(_entities[31].properties[8]);

  /// see [TrackedEntity.deleted]
  static final deleted =
      QueryBooleanProperty<TrackedEntity>(_entities[31].properties[9]);

  /// see [TrackedEntity.inactive]
  static final inactive =
      QueryBooleanProperty<TrackedEntity>(_entities[31].properties[10]);

  /// see [TrackedEntity.enrollments]
  static final enrollments = QueryRelationToMany<TrackedEntity, D2Enrollment>(
      _entities[31].relations[0]);

  /// see [TrackedEntity.relationships]
  static final relationships = QueryRelationToMany<TrackedEntity, Relationship>(
      _entities[31].relations[1]);

  /// see [TrackedEntity.attributes]
  static final attributes =
      QueryRelationToMany<TrackedEntity, D2TrackedEntityAttributeValue>(
          _entities[31].relations[2]);
}
