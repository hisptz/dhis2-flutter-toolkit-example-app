// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/data/attributeValue.dart';
import 'models/data/dataValue.dart';
import 'models/data/enrollment.dart';
import 'models/data/event.dart';
import 'models/data/fromRelationship.dart';
import 'models/data/relationship.dart';
import 'models/data/toRelationship.dart';
import 'models/data/trackedEntity.dart';
import 'models/data/trackedEntityAttributeValue.dart';
import 'models/metadata/dataElement.dart';
import 'models/metadata/legend.dart';
import 'models/metadata/legendSet.dart';
import 'models/metadata/option.dart';
import 'models/metadata/optionSet.dart';
import 'models/metadata/organisationUnit.dart';
import 'models/metadata/organisationUnitGroup.dart';
import 'models/metadata/organisationUnitLevel.dart';
import 'models/metadata/program.dart';
import 'models/metadata/programRule.dart';
import 'models/metadata/programRuleAction.dart';
import 'models/metadata/programRuleVariable.dart';
import 'models/metadata/programSection.dart';
import 'models/metadata/programStage.dart';
import 'models/metadata/programStageDataElement.dart';
import 'models/metadata/programStageSection.dart';
import 'models/metadata/programTrackedEntityAttribute.dart';
import 'models/metadata/relationshipConstraint.dart';
import 'models/metadata/relationshipType.dart';
import 'models/metadata/systemInfo.dart';
import 'models/metadata/trackedEntityAttributes.dart';
import 'models/metadata/trackedEntityType.dart';
import 'models/metadata/trackedEntityTypeAttribute.dart';
import 'models/metadata/user.dart';
import 'models/metadata/userGroup.dart';
import 'models/metadata/userRole.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4996384481523569324),
      name: 'D2DataElement',
      lastPropertyId: const IdUid(14, 8428784689739404506),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5297670299045905824),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 9098668924804910685),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8598151579189187297),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 1990075135142304672)),
        ModelProperty(
            id: const IdUid(4, 7239033355219494591),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4193746868221392550),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8579107216313713184),
            name: 'formName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5979450138956258944),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9155507135650767559),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3223585999200284313),
            name: 'aggregationType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8610585082551984314),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 229742443841190475),
            name: 'domainType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2254737955307782978),
            name: 'zeroIsSignificant',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5348649966571637973),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 8275883030957677480),
            relationTarget: 'D2OptionSet'),
        ModelProperty(
            id: const IdUid(14, 8428784689739404506),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 2074219000554139298),
            name: 'legendSets',
            targetId: const IdUid(6, 4612771413888599617))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2818465461295038234),
      name: 'D2DataValue',
      lastPropertyId: const IdUid(6, 6611869486495387885),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3314237497077313441),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5953844612291052336),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3622399945621795752),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3467152676698058711),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 155782825212251815)),
        ModelProperty(
            id: const IdUid(5, 2713916107532498838),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6611869486495387885),
            name: 'providedElsewhere',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4358556156533994791),
      name: 'D2Enrollment',
      lastPropertyId: const IdUid(16, 364941861348339128),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7693346698383824687),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3166587583940011091),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 573469295086868404),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 724801828120675124),
            name: 'createdAtClient',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5856302107641571462),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 4907025006478660716)),
        ModelProperty(
            id: const IdUid(6, 8555520008576865937),
            name: 'program',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7178491779644170545),
            name: 'trackedEntityInstance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 30941084534419901),
            name: 'trackedEntityType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7203934877808174550),
            name: 'orgUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 840578767814654838),
            name: 'orgUnitName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2288312498410663842),
            name: 'enrollmentDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1407567091818548410),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8603804736080917930),
            name: 'followup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1140388707615097423),
            name: 'incidentDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3727035912753867557),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 364941861348339128),
            name: 'notes',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 2067566409098678340),
            name: 'events',
            targetId: const IdUid(4, 7165331448940115309)),
        ModelRelation(
            id: const IdUid(3, 2932350912013325451),
            name: 'relationships',
            targetId: const IdUid(33, 3207521084950414969)),
        ModelRelation(
            id: const IdUid(4, 3705836840742314798),
            name: 'attributes',
            targetId: const IdUid(25, 6887185179169171488))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7165331448940115309),
      name: 'D2Event',
      lastPropertyId: const IdUid(20, 618784123777105044),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6181088057086953700),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5231612853129569376),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 693662912348475),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5991187639352366727),
            name: 'createdAtClient',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7743266054823519305),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 2891947995357021711)),
        ModelProperty(
            id: const IdUid(6, 329778449541443108),
            name: 'dueDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 921556304697696783),
            name: 'program',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7596097012718111452),
            name: 'programStage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5636510416336441324),
            name: 'orgUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4736963632527119680),
            name: 'enrollment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 881115925574650048),
            name: 'trackedEntityInstance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2220536175136944157),
            name: 'enrollmentStatus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8220419261475587642),
            name: 'eventDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5331677272120011438),
            name: 'orgUnitName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 528221269195752472),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 618384341711055884),
            name: 'attributeCategoryOptions',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 6650087402986962807),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 4863357923190480623),
            name: 'followup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 6525473267000557615),
            name: 'attributeOptionCombo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 618784123777105044),
            name: 'notes',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 7019744951886897200),
            name: 'relationships',
            targetId: const IdUid(33, 3207521084950414969)),
        ModelRelation(
            id: const IdUid(6, 1538053204286444234),
            name: 'dataValues',
            targetId: const IdUid(2, 2818465461295038234))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 7510714509738792071),
      name: 'D2Legend',
      lastPropertyId: const IdUid(9, 4871832078002487704),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6525733411206252392),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1212111171710251974),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2545755297148489472),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4893030241530819470),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2493222229119506272),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2020351933374446382),
            name: 'startValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1713646399005108447),
            name: 'endValue',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4540865466762786271),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4871832078002487704),
            name: 'displayName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 4612771413888599617),
      name: 'D2LegendSet',
      lastPropertyId: const IdUid(6, 8952695700479093287),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6546609983551323412),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5173515194157441833),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6604782860883550972),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1402958466438117690),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(6, 4972318643877622835)),
        ModelProperty(
            id: const IdUid(5, 8036707351720697027),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8952695700479093287),
            name: 'code',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 7093045042188916428),
            name: 'legends',
            targetId: const IdUid(5, 7510714509738792071))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 2361855310212809538),
      name: 'D2Option',
      lastPropertyId: const IdUid(8, 8582813463518099207),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4053733163967804958),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5903194041833914149),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3669174982973775931),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2138464890395735394),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8266949757656312956),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7960980060045101936),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 551242086622457221),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8582813463518099207),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 1519204409019308743),
            relationTarget: 'D2OptionSet')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 2322210830844557031),
      name: 'D2OptionSet',
      lastPropertyId: const IdUid(7, 4960101330015212898),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5054396055752036982),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6392902572013248384),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6103664306621143329),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8413122336313571723),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2876097297524591070),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7640056259444770720),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4960101330015212898),
            name: 'valueType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 5938969449230690895),
            name: 'options',
            targetId: const IdUid(7, 2361855310212809538))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 3001127331408357555),
      name: 'D2OrganisationUnit',
      lastPropertyId: const IdUid(8, 7873544123852754343),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4874393850206905125),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3881327942264802184),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6842901304142517228),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 629446741305346532),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(8, 7626054812447513463)),
        ModelProperty(
            id: const IdUid(5, 9101067644005608110),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 400901116580482662),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1179495710508368363),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7873544123852754343),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 8686154551822730932),
      name: 'D2OrganisationUnitGroup',
      lastPropertyId: const IdUid(5, 6317847654336091278),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7173857248392353115),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5035990896293706886),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9182209856250305669),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(9, 7821269082820209019)),
        ModelProperty(
            id: const IdUid(4, 448742565684849056),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6317847654336091278),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 8320609554228308212),
            name: 'organisationUnits',
            targetId: const IdUid(9, 3001127331408357555))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 5373184406399584039),
      name: 'D2OrganisationUnitLevel',
      lastPropertyId: const IdUid(6, 6243964609250869455),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6047075912572909231),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7862478274968641335),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1470734387410547559),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(10, 7070834871461111471)),
        ModelProperty(
            id: const IdUid(4, 8792979502007789894),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7750064688886412034),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6243964609250869455),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 8707719792272619354),
      name: 'D2Program',
      lastPropertyId: const IdUid(7, 2524407483699659817),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 32819945647441363),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7099788978654149597),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6224286872095801135),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4942180959036822911),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(11, 6510395717512608978)),
        ModelProperty(
            id: const IdUid(5, 4285127553136534152),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1016097639636453380),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2524407483699659817),
            name: 'accessLevel',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 4351849455497813182),
            name: 'organisationUnits',
            targetId: const IdUid(9, 3001127331408357555)),
        ModelRelation(
            id: const IdUid(11, 6284199107676198012),
            name: 'programStages',
            targetId: const IdUid(17, 8431701541290251775)),
        ModelRelation(
            id: const IdUid(12, 958944608760944783),
            name: 'programSections',
            targetId: const IdUid(16, 6646764261508568245)),
        ModelRelation(
            id: const IdUid(13, 2493371196661015971),
            name: 'programTrackedEntityAttributes',
            targetId: const IdUid(20, 2087063021838415796))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 8122255469626708993),
      name: 'D2ProgramRule',
      lastPropertyId: const IdUid(8, 5163657719629590484),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3366499326191142660),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5709255674784083808),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 124901881192831257),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 569486047516766801),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9186345456659723740),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5088464004972283358),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8096171451766135296),
            name: 'condition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5163657719629590484),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 5209722797412104844),
            relationTarget: 'D2Program')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(14, 6161003793280622931),
            name: 'programRuleActions',
            targetId: const IdUid(14, 4386754900477394254))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 4386754900477394254),
      name: 'D2ProgramRuleAction',
      lastPropertyId: const IdUid(13, 6920422517478100005),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4095988107088933123),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 254043657509432472),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8754324897755153274),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3418592947457653831),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5582821380174886485),
            name: 'programRuleActionType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3860074914806727294),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5769001926518096442),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2724108850251450324),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4144251489321373436),
            name: 'programRuleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 3565960639083739288),
            relationTarget: 'D2ProgramRule'),
        ModelProperty(
            id: const IdUid(10, 8092341875902499730),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 1782575939313067383),
            relationTarget: 'D2DataElement'),
        ModelProperty(
            id: const IdUid(11, 2235315890361379298),
            name: 'programStageSectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 5381325513204990697),
            relationTarget: 'D2ProgramStageSection'),
        ModelProperty(
            id: const IdUid(12, 5396338394642630272),
            name: 'programSectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 2523220008461909697),
            relationTarget: 'D2ProgramSection'),
        ModelProperty(
            id: const IdUid(13, 6920422517478100005),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 7369116369828114644),
            relationTarget: 'D2TrackedEntityAttribute')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 8238616602005599108),
      name: 'D2ProgramRuleVariable',
      lastPropertyId: const IdUid(12, 5829156662830033549),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 20245752835762723),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3088267918811592980),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5405822426057373675),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6986623613081320465),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(18, 6106579298547215281)),
        ModelProperty(
            id: const IdUid(5, 1428543368142257674),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7755344289790610149),
            name: 'programRuleVariableSourceType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5350671098199828687),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2129334121842734833),
            name: 'useCodeForOptionSet',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8381427988233888729),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 6546835759932924459),
            relationTarget: 'D2TrackedEntityAttribute'),
        ModelProperty(
            id: const IdUid(10, 7200636845034880102),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 7983136489428793946),
            relationTarget: 'D2DataElement'),
        ModelProperty(
            id: const IdUid(11, 8474580506861321541),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 3196984573945685319),
            relationTarget: 'D2ProgramStage'),
        ModelProperty(
            id: const IdUid(12, 5829156662830033549),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 6601334475530213687),
            relationTarget: 'D2Program')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 6646764261508568245),
      name: 'D2ProgramSection',
      lastPropertyId: const IdUid(7, 3824160486453369199),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8318127789092962470),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6389784472976259482),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 525399815778611847),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4689742455308403249),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(23, 8850196310686683469)),
        ModelProperty(
            id: const IdUid(5, 296971512502929324),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7137141563193625868),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3824160486453369199),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 5646145336525230955),
            relationTarget: 'D2Program')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(15, 9181335281720917167),
            name: 'trackedEntityAttributes',
            targetId: const IdUid(24, 8446209801327652055))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 8431701541290251775),
      name: 'D2ProgramStage',
      lastPropertyId: const IdUid(11, 7823193167710037217),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 65181769434370223),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7677267528233096384),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6483584258911216964),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2863273437761416996),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(25, 3776207267242501322)),
        ModelProperty(
            id: const IdUid(5, 2931463557781020227),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2007561891166522511),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 743958527296674182),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2405101953122616521),
            name: 'validationStrategy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5836226305552094358),
            name: 'featureType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1095163124923971515),
            name: 'reportDateToUse',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7823193167710037217),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(26, 1910993761315226271),
            relationTarget: 'D2Program')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(16, 2612729088989722664),
            name: 'programStageDataElements',
            targetId: const IdUid(18, 7438864721877385771)),
        ModelRelation(
            id: const IdUid(17, 2873411711297441640),
            name: 'programStageSections',
            targetId: const IdUid(19, 7752675694563143243))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 7438864721877385771),
      name: 'D2ProgramStageDataElement',
      lastPropertyId: const IdUid(8, 7586024145705485208),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5386835044682149341),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 1575169592094680991),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 6425847596135668606),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7085029501872030158),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6756997875337577351),
            name: 'compulsory',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5823468436790553707),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2759759789602747598),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 3127232526406618494),
            relationTarget: 'D2ProgramStage'),
        ModelProperty(
            id: const IdUid(8, 7586024145705485208),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(28, 7458862896257124839),
            relationTarget: 'D2DataElement')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 7752675694563143243),
      name: 'D2ProgramStageSection',
      lastPropertyId: const IdUid(7, 6781203190202171993),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3047263351905726026),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6093437704688439567),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3828237931959436254),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1416166336574581529),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(29, 7468673642526740064)),
        ModelProperty(
            id: const IdUid(5, 772069910106095995),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1505180869958864448),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6781203190202171993),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(30, 5812277183780929288),
            relationTarget: 'D2ProgramStage')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(18, 2549524824840145862),
            name: 'dataElements',
            targetId: const IdUid(1, 4996384481523569324))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 2087063021838415796),
      name: 'D2ProgramTrackedEntityAttribute',
      lastPropertyId: const IdUid(11, 549202325352781960),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7907361326413697289),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 6125283415532302533),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 835544273811865948),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 282174888274136847),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3464315036500170894),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8356351249321501359),
            name: 'displayInList',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3790673542347692866),
            name: 'mandatory',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7011767092537081983),
            name: 'searchable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7845024020339406457),
            name: 'renderOptionAsRadio',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6198497331552533739),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(31, 6716291458216731463),
            relationTarget: 'D2Program'),
        ModelProperty(
            id: const IdUid(11, 549202325352781960),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(32, 7058401120859987448),
            relationTarget: 'D2TrackedEntityAttribute')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 7768556709671492842),
      name: 'D2RelationshipConstraint',
      lastPropertyId: const IdUid(7, 3127586395538690913),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1524995091505424216),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3296848067574522109),
            name: 'relationshipEntity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6841638447313993680),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6471265482666990964),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(33, 8973019949580883789),
            relationTarget: 'D2TrackedEntityType'),
        ModelProperty(
            id: const IdUid(5, 5985436618053436309),
            name: 'relationshipTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(34, 3231391830258827907),
            relationTarget: 'D2RelationshipType'),
        ModelProperty(
            id: const IdUid(6, 5527953193715329339),
            name: 'programId',
            type: 11,
            flags: 520,
            indexId: const IdUid(35, 7394840283090443390),
            relationTarget: 'D2Program'),
        ModelProperty(
            id: const IdUid(7, 3127586395538690913),
            name: 'programStageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(36, 5989213032729054234),
            relationTarget: 'D2ProgramStage')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 2438422224477607311),
      name: 'D2RelationshipType',
      lastPropertyId: const IdUid(12, 1544304845024117870),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5111249242834184326),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4894496518196539541),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8608218283604665054),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5079249726760355790),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(37, 1104286557194986421)),
        ModelProperty(
            id: const IdUid(5, 3694746968044588777),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8431791752690639532),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7144612115866979764),
            name: 'bidirectional',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7213253834909400045),
            name: 'referral',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7868368686713291944),
            name: 'fromToName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3786410621303482193),
            name: 'toFromName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3819304876344703960),
            name: 'fromConstraintId',
            type: 11,
            flags: 520,
            indexId: const IdUid(38, 2583550358432435636),
            relationTarget: 'D2RelationshipConstraint'),
        ModelProperty(
            id: const IdUid(12, 1544304845024117870),
            name: 'toConstraintId',
            type: 11,
            flags: 520,
            indexId: const IdUid(39, 6490639849819806898),
            relationTarget: 'D2RelationshipConstraint')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(23, 4422047277028564735),
      name: 'D2SystemInfo',
      lastPropertyId: const IdUid(8, 647598782072680628),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3326665339488513793),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2334365065823726654),
            name: 'version',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6150018732668189245),
            name: 'revision',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5091388431777867410),
            name: 'calendar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5970279019496966976),
            name: 'dateFormat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8788978282642306784),
            name: 'contextPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 377534011643634529),
            name: 'systemId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(40, 925007876548113821)),
        ModelProperty(
            id: const IdUid(8, 647598782072680628),
            name: 'systemName',
            type: 9,
            flags: 2048,
            indexId: const IdUid(41, 31671054217699922))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(24, 8446209801327652055),
      name: 'D2TrackedEntityAttribute',
      lastPropertyId: const IdUid(13, 2210883550589963183),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6773971145351193231),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8564301972667849495),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6265534673797879089),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3287070258491755763),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(42, 406561396304668829)),
        ModelProperty(
            id: const IdUid(5, 7197202549280830197),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1279520594192537739),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7146967520996534032),
            name: 'formName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5297203162860965298),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6184517567505566296),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4985085200512573953),
            name: 'aggregationType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7088910872807196902),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2813443168641703520),
            name: 'zeroIsSignificant',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2210883550589963183),
            name: 'optionSetId',
            type: 11,
            flags: 520,
            indexId: const IdUid(43, 5811740185509418340),
            relationTarget: 'D2OptionSet')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(19, 4297227528720257709),
            name: 'legendSets',
            targetId: const IdUid(6, 4612771413888599617))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(25, 6887185179169171488),
      name: 'D2TrackedEntityAttributeValue',
      lastPropertyId: const IdUid(8, 3959671928939871275),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9036718193194183843),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5657571737727798357),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1836097778646847314),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7345660972673618587),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(44, 7000966179895823040)),
        ModelProperty(
            id: const IdUid(5, 3939959035775099665),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3331805895124204295),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5277580254236196841),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3959671928939871275),
            name: 'valueType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 2215301421854885263),
      name: 'D2TrackedEntityType',
      lastPropertyId: const IdUid(6, 9052574936047854361),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 618748856435452387),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7772494088923482161),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3800392577804811860),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4570005467693751030),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(45, 4192598968933182029)),
        ModelProperty(
            id: const IdUid(5, 2092794348412590128),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9052574936047854361),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(20, 8430624431960356184),
            name: 'trackedEntityTypeAttributes',
            targetId: const IdUid(27, 3501151667427277233))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(27, 3501151667427277233),
      name: 'D2TrackedEntityTypeAttribute',
      lastPropertyId: const IdUid(10, 7660375145493114310),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7382032868067489394),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9170560825925178276),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3264357934707608244),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8607311370026240464),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4301340764063301889),
            name: 'trackedEntityTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(46, 3727708455786716535),
            relationTarget: 'D2TrackedEntityType'),
        ModelProperty(
            id: const IdUid(6, 8397120162612466139),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(47, 1299214959758258698),
            relationTarget: 'D2TrackedEntityAttribute'),
        ModelProperty(
            id: const IdUid(7, 4329012958867974910),
            name: 'valueType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7411951714052866797),
            name: 'displayName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5706206730728061245),
            name: 'displayShortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7660375145493114310),
            name: 'mandatory',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(28, 5445104684142603491),
      name: 'D2User',
      lastPropertyId: const IdUid(9, 8440895938547624594),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5970412944184837504),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5750227926381880813),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3454401815474567755),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7244988840356562680),
            name: 'surname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6931243906897273558),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9125891739512385894),
            name: 'authorities',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8556970953889140154),
            name: 'programs',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5271654776022108572),
            name: 'organisationUnits',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8440895938547624594),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(48, 2560938629417599903))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(21, 758856160551746716),
            name: 'userRoles',
            targetId: const IdUid(30, 1501289249864503410)),
        ModelRelation(
            id: const IdUid(22, 6747168586177011741),
            name: 'userGroups',
            targetId: const IdUid(29, 6052340257291285112))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(29, 6052340257291285112),
      name: 'D2UserGroup',
      lastPropertyId: const IdUid(5, 5305566704479977322),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3083579828346330753),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 320544036941932164),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(49, 4782452907904169220)),
        ModelProperty(
            id: const IdUid(3, 1959533235461445024),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const IdUid(50, 1644629430050772381)),
        ModelProperty(
            id: const IdUid(4, 7734411620849638723),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5305566704479977322),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(30, 1501289249864503410),
      name: 'D2UserRole',
      lastPropertyId: const IdUid(6, 8984379573589465163),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6548412647224293421),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5798461049053721261),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(51, 7974725041086885003)),
        ModelProperty(
            id: const IdUid(3, 2593737981514273512),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1959751788588005223),
            name: 'authorities',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1481035118636011035),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8984379573589465163),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 7048845787137966351),
      name: 'DHIS2AttributeValue',
      lastPropertyId: const IdUid(3, 5449612347480449013),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2742306931817496259),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 679762593201296632),
            name: 'dataElementId',
            type: 11,
            flags: 520,
            indexId: const IdUid(52, 8310737711137780179),
            relationTarget: 'D2DataElement'),
        ModelProperty(
            id: const IdUid(3, 5449612347480449013),
            name: 'trackedEntityAttributeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(53, 4046424103089548180),
            relationTarget: 'D2TrackedEntityAttribute')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 1120606292133469077),
      name: 'FromRelationship',
      lastPropertyId: const IdUid(2, 246578244518026339),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7567404991998271710),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 246578244518026339),
            name: 'trackedEntityInstanceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(54, 2241343137410463461),
            relationTarget: 'TrackedEntity')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(33, 3207521084950414969),
      name: 'Relationship',
      lastPropertyId: const IdUid(9, 5225830422485182724),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6508887555506669971),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9075016018823016416),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3810217105317528701),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8175499158686782705),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(55, 4139377642013752717)),
        ModelProperty(
            id: const IdUid(5, 132320713468460928),
            name: 'relationshipName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4339759482965936659),
            name: 'bidirectional',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8190020843786986227),
            name: 'relationshipType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4353175043295201545),
            name: 'fromId',
            type: 11,
            flags: 520,
            indexId: const IdUid(56, 5715014004521049361),
            relationTarget: 'FromRelationship'),
        ModelProperty(
            id: const IdUid(9, 5225830422485182724),
            name: 'toId',
            type: 11,
            flags: 520,
            indexId: const IdUid(57, 8572181754378810657),
            relationTarget: 'ToRelationship')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(34, 813767332686430753),
      name: 'ToRelationship',
      lastPropertyId: const IdUid(2, 3499930721096198942),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4526403680246104751),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3499930721096198942),
            name: 'trackedEntityInstanceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(58, 4484534390087255340),
            relationTarget: 'TrackedEntity')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(35, 2197347911285678663),
      name: 'TrackedEntity',
      lastPropertyId: const IdUid(12, 677636759606022278),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4432252366676822069),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2277480709201025486),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7163316557077933105),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5600784999269991740),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(59, 5979493830861462358)),
        ModelProperty(
            id: const IdUid(5, 8758396797207895057),
            name: 'trackedEntityType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1403329823582766128),
            name: 'featureType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5349944230893188825),
            name: 'programOwners',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2160956226780899641),
            name: 'orgUnit',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5162393250351589832),
            name: 'createdAtClient',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8493996537433323933),
            name: 'potentialDuplicate',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6374184598554324518),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 677636759606022278),
            name: 'inactive',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(23, 7319209645285636091),
            name: 'enrollments',
            targetId: const IdUid(3, 4358556156533994791)),
        ModelRelation(
            id: const IdUid(24, 1608563416217585107),
            name: 'relationships',
            targetId: const IdUid(33, 3207521084950414969)),
        ModelRelation(
            id: const IdUid(25, 1007041890444893771),
            name: 'attributes',
            targetId: const IdUid(25, 6887185179169171488))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(35, 2197347911285678663),
      lastIndexId: const IdUid(59, 5979493830861462358),
      lastRelationId: const IdUid(25, 1007041890444893771),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    D2DataElement: EntityDefinition<D2DataElement>(
        model: _entities[0],
        toOneRelations: (D2DataElement object) => [object.optionSet],
        toManyRelations: (D2DataElement object) =>
            {RelInfo<D2DataElement>.toMany(1, object.id): object.legendSets},
        getId: (D2DataElement object) => object.id,
        setId: (D2DataElement object, int id) {
          object.id = id;
        },
        objectToFB: (D2DataElement object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final formNameOffset = object.formName == null
              ? null
              : fbb.writeString(object.formName!);
          final shortNameOffset = fbb.writeString(object.shortName);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final aggregationTypeOffset = fbb.writeString(object.aggregationType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final domainTypeOffset = fbb.writeString(object.domainType);
          fbb.startTable(15);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, codeOffset);
          fbb.addOffset(5, formNameOffset);
          fbb.addOffset(6, shortNameOffset);
          fbb.addOffset(7, descriptionOffset);
          fbb.addOffset(8, aggregationTypeOffset);
          fbb.addOffset(9, valueTypeOffset);
          fbb.addOffset(10, domainTypeOffset);
          fbb.addBool(11, object.zeroIsSignificant);
          fbb.addInt64(12, object.optionSet.targetId);
          fbb.addInt64(13, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final formNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final aggregationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final domainTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final zeroIsSignificantParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final object = D2DataElement(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              formName: formNameParam,
              shortName: shortNameParam,
              description: descriptionParam,
              aggregationType: aggregationTypeParam,
              valueType: valueTypeParam,
              domainType: domainTypeParam,
              zeroIsSignificant: zeroIsSignificantParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.optionSet.attach(store);
          InternalToManyAccess.setRelInfo<D2DataElement>(object.legendSets,
              store, RelInfo<D2DataElement>.toMany(1, object.id));
          return object;
        }),
    D2DataValue: EntityDefinition<D2DataValue>(
        model: _entities[1],
        toOneRelations: (D2DataValue object) => [],
        toManyRelations: (D2DataValue object) => {},
        getId: (D2DataValue object) => object.id,
        setId: (D2DataValue object, int id) {
          object.id = id;
        },
        objectToFB: (D2DataValue object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, valueOffset);
          fbb.addBool(5, object.providedElsewhere);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final providedElsewhereParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = D2DataValue(
              lastUpdated: lastUpdatedParam,
              created: createdParam,
              uid: uidParam,
              value: valueParam,
              providedElsewhere: providedElsewhereParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2Enrollment: EntityDefinition<D2Enrollment>(
        model: _entities[2],
        toOneRelations: (D2Enrollment object) => [],
        toManyRelations: (D2Enrollment object) => {
              RelInfo<D2Enrollment>.toMany(2, object.id): object.events,
              RelInfo<D2Enrollment>.toMany(3, object.id): object.relationships,
              RelInfo<D2Enrollment>.toMany(4, object.id): object.attributes
            },
        getId: (D2Enrollment object) => object.id,
        setId: (D2Enrollment object, int id) {
          object.id = id;
        },
        objectToFB: (D2Enrollment object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final programOffset = fbb.writeString(object.program);
          final trackedEntityInstanceOffset =
              fbb.writeString(object.trackedEntityInstance);
          final trackedEntityTypeOffset =
              fbb.writeString(object.trackedEntityType);
          final orgUnitOffset = fbb.writeString(object.orgUnit);
          final orgUnitNameOffset = fbb.writeString(object.orgUnitName);
          final statusOffset = fbb.writeString(object.status);
          final notesOffset = fbb.writeString(object.notes);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addInt64(3, object.createdAtClient.millisecondsSinceEpoch);
          fbb.addOffset(4, uidOffset);
          fbb.addOffset(5, programOffset);
          fbb.addOffset(6, trackedEntityInstanceOffset);
          fbb.addOffset(7, trackedEntityTypeOffset);
          fbb.addOffset(8, orgUnitOffset);
          fbb.addOffset(9, orgUnitNameOffset);
          fbb.addInt64(10, object.enrollmentDate.millisecondsSinceEpoch);
          fbb.addBool(11, object.deleted);
          fbb.addBool(12, object.followup);
          fbb.addInt64(13, object.incidentDate.millisecondsSinceEpoch);
          fbb.addOffset(14, statusOffset);
          fbb.addOffset(15, notesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final programParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final createdAtClientParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final orgUnitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final orgUnitNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final trackedEntityInstanceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final trackedEntityTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final enrollmentDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final followupParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final incidentDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0));
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final object = D2Enrollment(
              uid: uidParam,
              program: programParam,
              lastUpdated: lastUpdatedParam,
              created: createdParam,
              createdAtClient: createdAtClientParam,
              orgUnit: orgUnitParam,
              orgUnitName: orgUnitNameParam,
              trackedEntityInstance: trackedEntityInstanceParam,
              trackedEntityType: trackedEntityTypeParam,
              enrollmentDate: enrollmentDateParam,
              followup: followupParam,
              deleted: deletedParam,
              incidentDate: incidentDateParam,
              status: statusParam,
              notes: notesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2Enrollment>(
              object.events, store, RelInfo<D2Enrollment>.toMany(2, object.id));
          InternalToManyAccess.setRelInfo<D2Enrollment>(object.relationships,
              store, RelInfo<D2Enrollment>.toMany(3, object.id));
          InternalToManyAccess.setRelInfo<D2Enrollment>(object.attributes,
              store, RelInfo<D2Enrollment>.toMany(4, object.id));
          return object;
        }),
    D2Event: EntityDefinition<D2Event>(
        model: _entities[3],
        toOneRelations: (D2Event object) => [],
        toManyRelations: (D2Event object) => {
              RelInfo<D2Event>.toMany(5, object.id): object.relationships,
              RelInfo<D2Event>.toMany(6, object.id): object.dataValues
            },
        getId: (D2Event object) => object.id,
        setId: (D2Event object, int id) {
          object.id = id;
        },
        objectToFB: (D2Event object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final programOffset = fbb.writeString(object.program);
          final programStageOffset = fbb.writeString(object.programStage);
          final orgUnitOffset = fbb.writeString(object.orgUnit);
          final enrollmentOffset = fbb.writeString(object.enrollment);
          final trackedEntityInstanceOffset =
              fbb.writeString(object.trackedEntityInstance);
          final enrollmentStatusOffset =
              fbb.writeString(object.enrollmentStatus);
          final orgUnitNameOffset = fbb.writeString(object.orgUnitName);
          final statusOffset = fbb.writeString(object.status);
          final attributeCategoryOptionsOffset =
              fbb.writeString(object.attributeCategoryOptions);
          final attributeOptionComboOffset =
              fbb.writeString(object.attributeOptionCombo);
          final notesOffset = fbb.writeString(object.notes);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addInt64(3, object.createdAtClient.millisecondsSinceEpoch);
          fbb.addOffset(4, uidOffset);
          fbb.addInt64(5, object.dueDate.millisecondsSinceEpoch);
          fbb.addOffset(6, programOffset);
          fbb.addOffset(7, programStageOffset);
          fbb.addOffset(8, orgUnitOffset);
          fbb.addOffset(9, enrollmentOffset);
          fbb.addOffset(10, trackedEntityInstanceOffset);
          fbb.addOffset(11, enrollmentStatusOffset);
          fbb.addInt64(12, object.eventDate.millisecondsSinceEpoch);
          fbb.addOffset(13, orgUnitNameOffset);
          fbb.addOffset(14, statusOffset);
          fbb.addOffset(15, attributeCategoryOptionsOffset);
          fbb.addBool(16, object.deleted);
          fbb.addBool(17, object.followup);
          fbb.addOffset(18, attributeOptionComboOffset);
          fbb.addOffset(19, notesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final attributeCategoryOptionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final attributeOptionComboParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, '');
          final enrollmentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final programParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final createdAtClientParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final orgUnitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final orgUnitNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final trackedEntityInstanceParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final followupParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 38, false);
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final dueDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final enrollmentStatusParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final programStageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final eventDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final object = D2Event(
              attributeCategoryOptions: attributeCategoryOptionsParam,
              attributeOptionCombo: attributeOptionComboParam,
              enrollment: enrollmentParam,
              program: programParam,
              lastUpdated: lastUpdatedParam,
              created: createdParam,
              createdAtClient: createdAtClientParam,
              orgUnit: orgUnitParam,
              orgUnitName: orgUnitNameParam,
              trackedEntityInstance: trackedEntityInstanceParam,
              followup: followupParam,
              deleted: deletedParam,
              status: statusParam,
              notes: notesParam,
              dueDate: dueDateParam,
              enrollmentStatus: enrollmentStatusParam,
              uid: uidParam,
              programStage: programStageParam,
              eventDate: eventDateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2Event>(object.relationships, store,
              RelInfo<D2Event>.toMany(5, object.id));
          InternalToManyAccess.setRelInfo<D2Event>(
              object.dataValues, store, RelInfo<D2Event>.toMany(6, object.id));
          return object;
        }),
    D2Legend: EntityDefinition<D2Legend>(
        model: _entities[4],
        toOneRelations: (D2Legend object) => [],
        toManyRelations: (D2Legend object) => {},
        getId: (D2Legend object) => object.id,
        setId: (D2Legend object, int id) {
          object.id = id;
        },
        objectToFB: (D2Legend object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final colorOffset = fbb.writeString(object.color);
          final displayNameOffset = fbb.writeString(object.displayName);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addFloat64(5, object.startValue);
          fbb.addFloat64(6, object.endValue);
          fbb.addOffset(7, colorOffset);
          fbb.addOffset(8, displayNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final startValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final endValueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final object = D2Legend(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              startValue: startValueParam,
              endValue: endValueParam,
              color: colorParam,
              displayName: displayNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2LegendSet: EntityDefinition<D2LegendSet>(
        model: _entities[5],
        toOneRelations: (D2LegendSet object) => [],
        toManyRelations: (D2LegendSet object) =>
            {RelInfo<D2LegendSet>.toMany(7, object.id): object.legends},
        getId: (D2LegendSet object) => object.id,
        setId: (D2LegendSet object, int id) {
          object.id = id;
        },
        objectToFB: (D2LegendSet object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = D2LegendSet(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2LegendSet>(
              object.legends, store, RelInfo<D2LegendSet>.toMany(7, object.id));
          return object;
        }),
    D2Option: EntityDefinition<D2Option>(
        model: _entities[6],
        toOneRelations: (D2Option object) => [object.optionSet],
        toManyRelations: (D2Option object) => {},
        getId: (D2Option object) => object.id,
        setId: (D2Option object, int id) {
          object.id = id;
        },
        objectToFB: (D2Option object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addInt64(6, object.sortOrder);
          fbb.addInt64(7, object.optionSet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = D2Option(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              sortOrder: sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.optionSet.attach(store);
          return object;
        }),
    D2OptionSet: EntityDefinition<D2OptionSet>(
        model: _entities[7],
        toOneRelations: (D2OptionSet object) => [],
        toManyRelations: (D2OptionSet object) =>
            {RelInfo<D2OptionSet>.toMany(8, object.id): object.options},
        getId: (D2OptionSet object) => object.id,
        setId: (D2OptionSet object, int id) {
          object.id = id;
        },
        objectToFB: (D2OptionSet object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, valueTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = D2OptionSet(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              valueType: valueTypeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2OptionSet>(
              object.options, store, RelInfo<D2OptionSet>.toMany(8, object.id));
          return object;
        }),
    D2OrganisationUnit: EntityDefinition<D2OrganisationUnit>(
        model: _entities[8],
        toOneRelations: (D2OrganisationUnit object) => [],
        toManyRelations: (D2OrganisationUnit object) => {},
        getId: (D2OrganisationUnit object) => object.id,
        setId: (D2OrganisationUnit object, int id) {
          object.id = id;
        },
        objectToFB: (D2OrganisationUnit object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final shortNameOffset = fbb.writeString(object.shortName);
          final uidOffset = fbb.writeString(object.uid);
          final pathOffset = fbb.writeString(object.path);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, shortNameOffset);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, pathOffset);
          fbb.addInt64(5, object.level);
          fbb.addInt64(6, object.created.millisecondsSinceEpoch);
          fbb.addInt64(7, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = D2OrganisationUnit(
              name: nameParam,
              uid: uidParam,
              shortName: shortNameParam,
              path: pathParam,
              level: levelParam,
              created: createdParam,
              lastUpdated: lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2OrganisationUnitGroup: EntityDefinition<D2OrganisationUnitGroup>(
        model: _entities[9],
        toOneRelations: (D2OrganisationUnitGroup object) => [],
        toManyRelations: (D2OrganisationUnitGroup object) => {
              RelInfo<D2OrganisationUnitGroup>.toMany(9, object.id):
                  object.organisationUnits
            },
        getId: (D2OrganisationUnitGroup object) => object.id,
        setId: (D2OrganisationUnitGroup object, int id) {
          object.id = id;
        },
        objectToFB: (D2OrganisationUnitGroup object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.created.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = D2OrganisationUnitGroup(
              name: nameParam,
              uid: uidParam,
              created: createdParam,
              lastUpdated: lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2OrganisationUnitGroup>(
              object.organisationUnits,
              store,
              RelInfo<D2OrganisationUnitGroup>.toMany(9, object.id));
          return object;
        }),
    D2OrganisationUnitLevel: EntityDefinition<D2OrganisationUnitLevel>(
        model: _entities[10],
        toOneRelations: (D2OrganisationUnitLevel object) => [],
        toManyRelations: (D2OrganisationUnitLevel object) => {},
        getId: (D2OrganisationUnitLevel object) => object.id,
        setId: (D2OrganisationUnitLevel object, int id) {
          object.id = id;
        },
        objectToFB: (D2OrganisationUnitLevel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.level);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final levelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = D2OrganisationUnitLevel(
              name: nameParam,
              uid: uidParam,
              level: levelParam,
              created: createdParam,
              lastUpdated: lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2Program: EntityDefinition<D2Program>(
        model: _entities[11],
        toOneRelations: (D2Program object) => [],
        toManyRelations: (D2Program object) => {
              RelInfo<D2Program>.toMany(10, object.id):
                  object.organisationUnits,
              RelInfo<D2Program>.toMany(11, object.id): object.programStages,
              RelInfo<D2Program>.toMany(12, object.id): object.programSections,
              RelInfo<D2Program>.toMany(13, object.id):
                  object.programTrackedEntityAttributes
            },
        getId: (D2Program object) => object.id,
        setId: (D2Program object, int id) {
          object.id = id;
        },
        objectToFB: (D2Program object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final shortNameOffset = fbb.writeString(object.shortName);
          final accessLevelOffset = fbb.writeString(object.accessLevel);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, shortNameOffset);
          fbb.addOffset(6, accessLevelOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final accessLevelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = D2Program(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              accessLevel: accessLevelParam,
              name: nameParam,
              shortName: shortNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2Program>(object.organisationUnits,
              store, RelInfo<D2Program>.toMany(10, object.id));
          InternalToManyAccess.setRelInfo<D2Program>(object.programStages,
              store, RelInfo<D2Program>.toMany(11, object.id));
          InternalToManyAccess.setRelInfo<D2Program>(object.programSections,
              store, RelInfo<D2Program>.toMany(12, object.id));
          InternalToManyAccess.setRelInfo<D2Program>(
              object.programTrackedEntityAttributes,
              store,
              RelInfo<D2Program>.toMany(13, object.id));
          return object;
        }),
    D2ProgramRule: EntityDefinition<D2ProgramRule>(
        model: _entities[12],
        toOneRelations: (D2ProgramRule object) => [object.program],
        toManyRelations: (D2ProgramRule object) => {
              RelInfo<D2ProgramRule>.toMany(14, object.id):
                  object.programRuleActions
            },
        getId: (D2ProgramRule object) => object.id,
        setId: (D2ProgramRule object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramRule object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final conditionOffset = fbb.writeString(object.condition);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, conditionOffset);
          fbb.addInt64(7, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final conditionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = D2ProgramRule(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              description: descriptionParam,
              condition: conditionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.program.attach(store);
          InternalToManyAccess.setRelInfo<D2ProgramRule>(
              object.programRuleActions,
              store,
              RelInfo<D2ProgramRule>.toMany(14, object.id));
          return object;
        }),
    D2ProgramRuleAction: EntityDefinition<D2ProgramRuleAction>(
        model: _entities[13],
        toOneRelations: (D2ProgramRuleAction object) => [
              object.programRule,
              object.dataElement,
              object.programStageSection,
              object.programSection,
              object.trackedEntityAttribute
            ],
        toManyRelations: (D2ProgramRuleAction object) => {},
        getId: (D2ProgramRuleAction object) => object.id,
        setId: (D2ProgramRuleAction object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramRuleAction object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final programRuleActionTypeOffset =
              fbb.writeString(object.programRuleActionType);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, programRuleActionTypeOffset);
          fbb.addOffset(5, contentOffset);
          fbb.addOffset(6, dataOffset);
          fbb.addOffset(7, locationOffset);
          fbb.addInt64(8, object.programRule.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addInt64(10, object.programStageSection.targetId);
          fbb.addInt64(11, object.programSection.targetId);
          fbb.addInt64(12, object.trackedEntityAttribute.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final programRuleActionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final dataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = D2ProgramRuleAction(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              programRuleActionType: programRuleActionTypeParam,
              content: contentParam,
              data: dataParam,
              location: locationParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.programRule.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.programRule.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          object.programStageSection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.programStageSection.attach(store);
          object.programSection.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.programSection.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    D2ProgramRuleVariable: EntityDefinition<D2ProgramRuleVariable>(
        model: _entities[14],
        toOneRelations: (D2ProgramRuleVariable object) => [
              object.trackedEntityAttribute,
              object.dataElement,
              object.programStage,
              object.program
            ],
        toManyRelations: (D2ProgramRuleVariable object) => {},
        getId: (D2ProgramRuleVariable object) => object.id,
        setId: (D2ProgramRuleVariable object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramRuleVariable object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final programRuleVariableSourceTypeOffset =
              fbb.writeString(object.programRuleVariableSourceType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, programRuleVariableSourceTypeOffset);
          fbb.addOffset(6, valueTypeOffset);
          fbb.addBool(7, object.useCodeForOptionSet);
          fbb.addInt64(8, object.trackedEntityAttribute.targetId);
          fbb.addInt64(9, object.dataElement.targetId);
          fbb.addInt64(10, object.programStage.targetId);
          fbb.addInt64(11, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final programRuleVariableSourceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final useCodeForOptionSetParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = D2ProgramRuleVariable(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              programRuleVariableSourceType: programRuleVariableSourceTypeParam,
              valueType: valueTypeParam,
              useCodeForOptionSet: useCodeForOptionSetParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.trackedEntityAttribute.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataElement.attach(store);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.programStage.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.program.attach(store);
          return object;
        }),
    D2ProgramSection: EntityDefinition<D2ProgramSection>(
        model: _entities[15],
        toOneRelations: (D2ProgramSection object) => [object.program],
        toManyRelations: (D2ProgramSection object) => {
              RelInfo<D2ProgramSection>.toMany(15, object.id):
                  object.trackedEntityAttributes
            },
        getId: (D2ProgramSection object) => object.id,
        setId: (D2ProgramSection object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramSection object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.sortOrder);
          fbb.addOffset(5, nameOffset);
          fbb.addInt64(6, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = D2ProgramSection(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              sortOrder: sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.program.attach(store);
          InternalToManyAccess.setRelInfo<D2ProgramSection>(
              object.trackedEntityAttributes,
              store,
              RelInfo<D2ProgramSection>.toMany(15, object.id));
          return object;
        }),
    D2ProgramStage: EntityDefinition<D2ProgramStage>(
        model: _entities[16],
        toOneRelations: (D2ProgramStage object) => [object.program],
        toManyRelations: (D2ProgramStage object) => {
              RelInfo<D2ProgramStage>.toMany(16, object.id):
                  object.programStageDataElements,
              RelInfo<D2ProgramStage>.toMany(17, object.id):
                  object.programStageSections
            },
        getId: (D2ProgramStage object) => object.id,
        setId: (D2ProgramStage object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramStage object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final validationStrategyOffset = object.validationStrategy == null
              ? null
              : fbb.writeString(object.validationStrategy!);
          final featureTypeOffset = object.featureType == null
              ? null
              : fbb.writeString(object.featureType!);
          final reportDateToUseOffset = object.reportDateToUse == null
              ? null
              : fbb.writeString(object.reportDateToUse!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.sortOrder);
          fbb.addOffset(7, validationStrategyOffset);
          fbb.addOffset(8, featureTypeOffset);
          fbb.addOffset(9, reportDateToUseOffset);
          fbb.addInt64(10, object.program.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final validationStrategyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final reportDateToUseParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final featureTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = D2ProgramStage(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              sortOrder: sortOrderParam,
              validationStrategy: validationStrategyParam,
              reportDateToUse: reportDateToUseParam,
              featureType: featureTypeParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.program.attach(store);
          InternalToManyAccess.setRelInfo<D2ProgramStage>(
              object.programStageDataElements,
              store,
              RelInfo<D2ProgramStage>.toMany(16, object.id));
          InternalToManyAccess.setRelInfo<D2ProgramStage>(
              object.programStageSections,
              store,
              RelInfo<D2ProgramStage>.toMany(17, object.id));
          return object;
        }),
    D2ProgramStageDataElement: EntityDefinition<D2ProgramStageDataElement>(
        model: _entities[17],
        toOneRelations: (D2ProgramStageDataElement object) =>
            [object.programStage, object.dataElement],
        toManyRelations: (D2ProgramStageDataElement object) => {},
        getId: (D2ProgramStageDataElement object) => object.id,
        setId: (D2ProgramStageDataElement object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramStageDataElement object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(9);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.id);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addBool(4, object.compulsory);
          fbb.addInt64(5, object.sortOrder);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.addInt64(7, object.dataElement.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final compulsoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final sortOrderParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = D2ProgramStageDataElement(createdParam, idParam,
              lastUpdatedParam, uidParam, compulsoryParam, sortOrderParam);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.dataElement.attach(store);
          return object;
        }),
    D2ProgramStageSection: EntityDefinition<D2ProgramStageSection>(
        model: _entities[18],
        toOneRelations: (D2ProgramStageSection object) => [object.programStage],
        toManyRelations: (D2ProgramStageSection object) => {
              RelInfo<D2ProgramStageSection>.toMany(18, object.id):
                  object.dataElements
            },
        getId: (D2ProgramStageSection object) => object.id,
        setId: (D2ProgramStageSection object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramStageSection object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addInt64(5, object.sortOrder);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = D2ProgramStageSection(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              sortOrder: sortOrderParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          InternalToManyAccess.setRelInfo<D2ProgramStageSection>(
              object.dataElements,
              store,
              RelInfo<D2ProgramStageSection>.toMany(18, object.id));
          return object;
        }),
    D2ProgramTrackedEntityAttribute: EntityDefinition<
            D2ProgramTrackedEntityAttribute>(
        model: _entities[19],
        toOneRelations: (D2ProgramTrackedEntityAttribute object) =>
            [object.program, object.trackedEntityAttribute],
        toManyRelations: (D2ProgramTrackedEntityAttribute object) => {},
        getId: (D2ProgramTrackedEntityAttribute object) => object.id,
        setId: (D2ProgramTrackedEntityAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (D2ProgramTrackedEntityAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(12);
          fbb.addInt64(0, object.created.millisecondsSinceEpoch);
          fbb.addInt64(1, object.id);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.sortOrder);
          fbb.addBool(5, object.displayInList);
          fbb.addBool(6, object.mandatory);
          fbb.addBool(7, object.searchable);
          fbb.addBool(8, object.renderOptionAsRadio);
          fbb.addInt64(9, object.program.targetId);
          fbb.addInt64(10, object.trackedEntityAttribute.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final sortOrderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final displayInListParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final mandatoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final searchableParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final renderOptionAsRadioParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final object = D2ProgramTrackedEntityAttribute(
              createdParam,
              idParam,
              lastUpdatedParam,
              uidParam,
              sortOrderParam,
              displayInListParam,
              mandatoryParam,
              searchableParam,
              renderOptionAsRadioParam);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.program.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    D2RelationshipConstraint: EntityDefinition<D2RelationshipConstraint>(
        model: _entities[20],
        toOneRelations: (D2RelationshipConstraint object) => [
              object.trackedEntityType,
              object.relationshipType,
              object.program,
              object.programStage
            ],
        toManyRelations: (D2RelationshipConstraint object) => {},
        getId: (D2RelationshipConstraint object) => object.id,
        setId: (D2RelationshipConstraint object, int id) {
          object.id = id;
        },
        objectToFB: (D2RelationshipConstraint object, fb.Builder fbb) {
          final relationshipEntityOffset =
              fbb.writeString(object.relationshipEntity);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, relationshipEntityOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.trackedEntityType.targetId);
          fbb.addInt64(4, object.relationshipType.targetId);
          fbb.addInt64(5, object.program.targetId);
          fbb.addInt64(6, object.programStage.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final relationshipEntityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = D2RelationshipConstraint(
              relationshipEntity: relationshipEntityParam, name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.trackedEntityType.attach(store);
          object.relationshipType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.relationshipType.attach(store);
          object.program.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.program.attach(store);
          object.programStage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.programStage.attach(store);
          return object;
        }),
    D2RelationshipType: EntityDefinition<D2RelationshipType>(
        model: _entities[21],
        toOneRelations: (D2RelationshipType object) =>
            [object.fromConstraint, object.toConstraint],
        toManyRelations: (D2RelationshipType object) => {},
        getId: (D2RelationshipType object) => object.id,
        setId: (D2RelationshipType object, int id) {
          object.id = id;
        },
        objectToFB: (D2RelationshipType object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset = fbb.writeString(object.code);
          final fromToNameOffset = fbb.writeString(object.fromToName);
          final toFromNameOffset = fbb.writeString(object.toFromName);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addBool(6, object.bidirectional);
          fbb.addBool(7, object.referral);
          fbb.addOffset(8, fromToNameOffset);
          fbb.addOffset(9, toFromNameOffset);
          fbb.addInt64(10, object.fromConstraint.targetId);
          fbb.addInt64(11, object.toConstraint.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final bidirectionalParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final referralParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final fromToNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final toFromNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = D2RelationshipType(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              bidirectional: bidirectionalParam,
              referral: referralParam,
              fromToName: fromToNameParam,
              toFromName: toFromNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.fromConstraint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.fromConstraint.attach(store);
          object.toConstraint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.toConstraint.attach(store);
          return object;
        }),
    D2SystemInfo: EntityDefinition<D2SystemInfo>(
        model: _entities[22],
        toOneRelations: (D2SystemInfo object) => [],
        toManyRelations: (D2SystemInfo object) => {},
        getId: (D2SystemInfo object) => object.id,
        setId: (D2SystemInfo object, int id) {
          object.id = id;
        },
        objectToFB: (D2SystemInfo object, fb.Builder fbb) {
          final versionOffset = fbb.writeString(object.version);
          final revisionOffset = fbb.writeString(object.revision);
          final calendarOffset = fbb.writeString(object.calendar);
          final dateFormatOffset = fbb.writeString(object.dateFormat);
          final contextPathOffset = fbb.writeString(object.contextPath);
          final systemIdOffset = fbb.writeString(object.systemId);
          final systemNameOffset = fbb.writeString(object.systemName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, versionOffset);
          fbb.addOffset(2, revisionOffset);
          fbb.addOffset(3, calendarOffset);
          fbb.addOffset(4, dateFormatOffset);
          fbb.addOffset(5, contextPathOffset);
          fbb.addOffset(6, systemIdOffset);
          fbb.addOffset(7, systemNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final versionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final revisionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final calendarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateFormatParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final contextPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final systemIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final systemNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = D2SystemInfo(
              version: versionParam,
              revision: revisionParam,
              calendar: calendarParam,
              dateFormat: dateFormatParam,
              contextPath: contextPathParam,
              systemId: systemIdParam,
              systemName: systemNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2TrackedEntityAttribute: EntityDefinition<D2TrackedEntityAttribute>(
        model: _entities[23],
        toOneRelations: (D2TrackedEntityAttribute object) => [object.optionSet],
        toManyRelations: (D2TrackedEntityAttribute object) => {
              RelInfo<D2TrackedEntityAttribute>.toMany(19, object.id):
                  object.legendSets
            },
        getId: (D2TrackedEntityAttribute object) => object.id,
        setId: (D2TrackedEntityAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (D2TrackedEntityAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final codeOffset =
              object.code == null ? null : fbb.writeString(object.code!);
          final formNameOffset = object.formName == null
              ? null
              : fbb.writeString(object.formName!);
          final shortNameOffset = fbb.writeString(object.shortName);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final aggregationTypeOffset = fbb.writeString(object.aggregationType);
          final valueTypeOffset = fbb.writeString(object.valueType);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, codeOffset);
          fbb.addOffset(6, formNameOffset);
          fbb.addOffset(7, shortNameOffset);
          fbb.addOffset(8, descriptionOffset);
          fbb.addOffset(9, aggregationTypeOffset);
          fbb.addOffset(10, valueTypeOffset);
          fbb.addBool(11, object.zeroIsSignificant);
          fbb.addInt64(12, object.optionSet.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final formNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final shortNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final aggregationTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final zeroIsSignificantParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);
          final object = D2TrackedEntityAttribute(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              code: codeParam,
              formName: formNameParam,
              shortName: shortNameParam,
              description: descriptionParam,
              aggregationType: aggregationTypeParam,
              valueType: valueTypeParam,
              zeroIsSignificant: zeroIsSignificantParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.optionSet.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.optionSet.attach(store);
          InternalToManyAccess.setRelInfo<D2TrackedEntityAttribute>(
              object.legendSets,
              store,
              RelInfo<D2TrackedEntityAttribute>.toMany(19, object.id));
          return object;
        }),
    D2TrackedEntityAttributeValue:
        EntityDefinition<D2TrackedEntityAttributeValue>(
            model: _entities[24],
            toOneRelations: (D2TrackedEntityAttributeValue object) => [],
            toManyRelations: (D2TrackedEntityAttributeValue object) => {},
            getId: (D2TrackedEntityAttributeValue object) => object.id,
            setId: (D2TrackedEntityAttributeValue object, int id) {
              object.id = id;
            },
            objectToFB: (D2TrackedEntityAttributeValue object, fb.Builder fbb) {
              final uidOffset = fbb.writeString(object.uid);
              final displayNameOffset = fbb.writeString(object.displayName);
              final codeOffset = fbb.writeString(object.code);
              final valueOffset = fbb.writeString(object.value);
              final valueTypeOffset = fbb.writeString(object.valueType);
              fbb.startTable(9);
              fbb.addInt64(0, object.id);
              fbb.addInt64(1, object.created.millisecondsSinceEpoch);
              fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
              fbb.addOffset(3, uidOffset);
              fbb.addOffset(4, displayNameOffset);
              fbb.addOffset(5, codeOffset);
              fbb.addOffset(6, valueOffset);
              fbb.addOffset(7, valueTypeOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final createdParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
              final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
              final uidParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
              final displayNameParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 12, '');
              final codeParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
              final valueParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
              final valueTypeParam =
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 18, '');
              final object = D2TrackedEntityAttributeValue(
                  created: createdParam,
                  lastUpdated: lastUpdatedParam,
                  uid: uidParam,
                  displayName: displayNameParam,
                  code: codeParam,
                  value: valueParam,
                  valueType: valueTypeParam)
                ..id =
                    const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

              return object;
            }),
    D2TrackedEntityType: EntityDefinition<D2TrackedEntityType>(
        model: _entities[25],
        toOneRelations: (D2TrackedEntityType object) => [],
        toManyRelations: (D2TrackedEntityType object) => {
              RelInfo<D2TrackedEntityType>.toMany(20, object.id):
                  object.trackedEntityTypeAttributes
            },
        getId: (D2TrackedEntityType object) => object.id,
        setId: (D2TrackedEntityType object, int id) {
          object.id = id;
        },
        objectToFB: (D2TrackedEntityType object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = D2TrackedEntityType(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              name: nameParam,
              description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2TrackedEntityType>(
              object.trackedEntityTypeAttributes,
              store,
              RelInfo<D2TrackedEntityType>.toMany(20, object.id));
          return object;
        }),
    D2TrackedEntityTypeAttribute: EntityDefinition<
            D2TrackedEntityTypeAttribute>(
        model: _entities[26],
        toOneRelations: (D2TrackedEntityTypeAttribute object) =>
            [object.trackedEntityType, object.trackedEntityAttribute],
        toManyRelations: (D2TrackedEntityTypeAttribute object) => {},
        getId: (D2TrackedEntityTypeAttribute object) => object.id,
        setId: (D2TrackedEntityTypeAttribute object, int id) {
          object.id = id;
        },
        objectToFB: (D2TrackedEntityTypeAttribute object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final valueTypeOffset = fbb.writeString(object.valueType);
          final displayNameOffset = fbb.writeString(object.displayName);
          final displayShortNameOffset =
              fbb.writeString(object.displayShortName);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addInt64(4, object.trackedEntityType.targetId);
          fbb.addInt64(5, object.trackedEntityAttribute.targetId);
          fbb.addOffset(6, valueTypeOffset);
          fbb.addOffset(7, displayNameOffset);
          fbb.addOffset(8, displayShortNameOffset);
          fbb.addBool(9, object.mandatory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final valueTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final displayShortNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final mandatoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final object = D2TrackedEntityTypeAttribute(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              valueType: valueTypeParam,
              displayName: displayNameParam,
              displayShortName: displayShortNameParam,
              mandatory: mandatoryParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.trackedEntityType.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    D2User: EntityDefinition<D2User>(
        model: _entities[27],
        toOneRelations: (D2User object) => [],
        toManyRelations: (D2User object) => {
              RelInfo<D2User>.toMany(21, object.id): object.userRoles,
              RelInfo<D2User>.toMany(22, object.id): object.userGroups
            },
        getId: (D2User object) => object.id,
        setId: (D2User object, int id) {
          object.id = id;
        },
        objectToFB: (D2User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final firstNameOffset = fbb.writeString(object.firstName);
          final surnameOffset = fbb.writeString(object.surname);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final authoritiesOffset = fbb.writeList(
              object.authorities.map(fbb.writeString).toList(growable: false));
          final programsOffset = fbb.writeList(
              object.programs.map(fbb.writeString).toList(growable: false));
          final organisationUnitsOffset = fbb.writeList(object.organisationUnits
              .map(fbb.writeString)
              .toList(growable: false));
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, surnameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, authoritiesOffset);
          fbb.addOffset(6, programsOffset);
          fbb.addOffset(7, organisationUnitsOffset);
          fbb.addOffset(8, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final surnameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final authoritiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final programsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final organisationUnitsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 18, []);
          final object = D2User(
              username: usernameParam,
              firstName: firstNameParam,
              surname: surnameParam,
              email: emailParam,
              authorities: authoritiesParam,
              uid: uidParam,
              programs: programsParam,
              organisationUnits: organisationUnitsParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<D2User>(
              object.userRoles, store, RelInfo<D2User>.toMany(21, object.id));
          InternalToManyAccess.setRelInfo<D2User>(
              object.userGroups, store, RelInfo<D2User>.toMany(22, object.id));
          return object;
        }),
    D2UserGroup: EntityDefinition<D2UserGroup>(
        model: _entities[28],
        toOneRelations: (D2UserGroup object) => [],
        toManyRelations: (D2UserGroup object) => {},
        getId: (D2UserGroup object) => object.id,
        setId: (D2UserGroup object, int id) {
          object.id = id;
        },
        objectToFB: (D2UserGroup object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.created.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = D2UserGroup(
              uidParam, nameParam, createdParam, lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    D2UserRole: EntityDefinition<D2UserRole>(
        model: _entities[29],
        toOneRelations: (D2UserRole object) => [],
        toManyRelations: (D2UserRole object) => {},
        getId: (D2UserRole object) => object.id,
        setId: (D2UserRole object, int id) {
          object.id = id;
        },
        objectToFB: (D2UserRole object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final authoritiesOffset = fbb.writeList(
              object.authorities.map(fbb.writeString).toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, authoritiesOffset);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final authoritiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = D2UserRole(uidParam, nameParam, authoritiesParam,
              createdParam, lastUpdatedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DHIS2AttributeValue: EntityDefinition<DHIS2AttributeValue>(
        model: _entities[30],
        toOneRelations: (DHIS2AttributeValue object) =>
            [object.dataElement, object.trackedEntityAttribute],
        toManyRelations: (DHIS2AttributeValue object) => {},
        getId: (DHIS2AttributeValue object) => object.id,
        setId: (DHIS2AttributeValue object, int id) {
          object.id = id;
        },
        objectToFB: (DHIS2AttributeValue object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataElement.targetId);
          fbb.addInt64(2, object.trackedEntityAttribute.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DHIS2AttributeValue()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.dataElement.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dataElement.attach(store);
          object.trackedEntityAttribute.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.trackedEntityAttribute.attach(store);
          return object;
        }),
    FromRelationship: EntityDefinition<FromRelationship>(
        model: _entities[31],
        toOneRelations: (FromRelationship object) =>
            [object.trackedEntityInstance],
        toManyRelations: (FromRelationship object) => {},
        getId: (FromRelationship object) => object.id,
        setId: (FromRelationship object, int id) {
          object.id = id;
        },
        objectToFB: (FromRelationship object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.trackedEntityInstance.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FromRelationship()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityInstance.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.trackedEntityInstance.attach(store);
          return object;
        }),
    Relationship: EntityDefinition<Relationship>(
        model: _entities[32],
        toOneRelations: (Relationship object) => [object.from, object.to],
        toManyRelations: (Relationship object) => {},
        getId: (Relationship object) => object.id,
        setId: (Relationship object, int id) {
          object.id = id;
        },
        objectToFB: (Relationship object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final relationshipNameOffset =
              fbb.writeString(object.relationshipName);
          final relationshipTypeOffset =
              fbb.writeString(object.relationshipType);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, relationshipNameOffset);
          fbb.addBool(5, object.bidirectional);
          fbb.addOffset(6, relationshipTypeOffset);
          fbb.addInt64(7, object.from.targetId);
          fbb.addInt64(8, object.to.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final relationshipNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final relationshipTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final bidirectionalParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = Relationship(
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              uid: uidParam,
              relationshipName: relationshipNameParam,
              relationshipType: relationshipTypeParam,
              bidirectional: bidirectionalParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.from.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.from.attach(store);
          object.to.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.to.attach(store);
          return object;
        }),
    ToRelationship: EntityDefinition<ToRelationship>(
        model: _entities[33],
        toOneRelations: (ToRelationship object) =>
            [object.trackedEntityInstance],
        toManyRelations: (ToRelationship object) => {},
        getId: (ToRelationship object) => object.id,
        setId: (ToRelationship object, int id) {
          object.id = id;
        },
        objectToFB: (ToRelationship object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.trackedEntityInstance.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ToRelationship()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.trackedEntityInstance.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.trackedEntityInstance.attach(store);
          return object;
        }),
    TrackedEntity: EntityDefinition<TrackedEntity>(
        model: _entities[34],
        toOneRelations: (TrackedEntity object) => [],
        toManyRelations: (TrackedEntity object) => {
              RelInfo<TrackedEntity>.toMany(23, object.id): object.enrollments,
              RelInfo<TrackedEntity>.toMany(24, object.id):
                  object.relationships,
              RelInfo<TrackedEntity>.toMany(25, object.id): object.attributes
            },
        getId: (TrackedEntity object) => object.id,
        setId: (TrackedEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TrackedEntity object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final trackedEntityTypeOffset =
              fbb.writeString(object.trackedEntityType);
          final featureTypeOffset = fbb.writeString(object.featureType);
          final programOwnersOffset = fbb.writeString(object.programOwners);
          final orgUnitOffset = fbb.writeString(object.orgUnit);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.created.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, uidOffset);
          fbb.addOffset(4, trackedEntityTypeOffset);
          fbb.addOffset(5, featureTypeOffset);
          fbb.addOffset(6, programOwnersOffset);
          fbb.addOffset(7, orgUnitOffset);
          fbb.addInt64(8, object.createdAtClient.millisecondsSinceEpoch);
          fbb.addBool(9, object.potentialDuplicate);
          fbb.addBool(10, object.deleted);
          fbb.addBool(11, object.inactive);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final trackedEntityTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final orgUnitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final createdAtClientParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final createdParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final deletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final potentialDuplicateParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final featureTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final inactiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final programOwnersParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final object = TrackedEntity(
              uid: uidParam,
              trackedEntityType: trackedEntityTypeParam,
              orgUnit: orgUnitParam,
              createdAtClient: createdAtClientParam,
              created: createdParam,
              lastUpdated: lastUpdatedParam,
              deleted: deletedParam,
              potentialDuplicate: potentialDuplicateParam,
              featureType: featureTypeParam,
              inactive: inactiveParam,
              programOwners: programOwnersParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<TrackedEntity>(object.enrollments,
              store, RelInfo<TrackedEntity>.toMany(23, object.id));
          InternalToManyAccess.setRelInfo<TrackedEntity>(object.relationships,
              store, RelInfo<TrackedEntity>.toMany(24, object.id));
          InternalToManyAccess.setRelInfo<TrackedEntity>(object.attributes,
              store, RelInfo<TrackedEntity>.toMany(25, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [D2DataElement] entity fields to define ObjectBox queries.
class D2DataElement_ {
  /// see [D2DataElement.created]
  static final created =
      QueryIntegerProperty<D2DataElement>(_entities[0].properties[0]);

  /// see [D2DataElement.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2DataElement>(_entities[0].properties[1]);

  /// see [D2DataElement.uid]
  static final uid =
      QueryStringProperty<D2DataElement>(_entities[0].properties[2]);

  /// see [D2DataElement.name]
  static final name =
      QueryStringProperty<D2DataElement>(_entities[0].properties[3]);

  /// see [D2DataElement.code]
  static final code =
      QueryStringProperty<D2DataElement>(_entities[0].properties[4]);

  /// see [D2DataElement.formName]
  static final formName =
      QueryStringProperty<D2DataElement>(_entities[0].properties[5]);

  /// see [D2DataElement.shortName]
  static final shortName =
      QueryStringProperty<D2DataElement>(_entities[0].properties[6]);

  /// see [D2DataElement.description]
  static final description =
      QueryStringProperty<D2DataElement>(_entities[0].properties[7]);

  /// see [D2DataElement.aggregationType]
  static final aggregationType =
      QueryStringProperty<D2DataElement>(_entities[0].properties[8]);

  /// see [D2DataElement.valueType]
  static final valueType =
      QueryStringProperty<D2DataElement>(_entities[0].properties[9]);

  /// see [D2DataElement.domainType]
  static final domainType =
      QueryStringProperty<D2DataElement>(_entities[0].properties[10]);

  /// see [D2DataElement.zeroIsSignificant]
  static final zeroIsSignificant =
      QueryBooleanProperty<D2DataElement>(_entities[0].properties[11]);

  /// see [D2DataElement.optionSet]
  static final optionSet = QueryRelationToOne<D2DataElement, D2OptionSet>(
      _entities[0].properties[12]);

  /// see [D2DataElement.id]
  static final id =
      QueryIntegerProperty<D2DataElement>(_entities[0].properties[13]);

  /// see [D2DataElement.legendSets]
  static final legendSets = QueryRelationToMany<D2DataElement, D2LegendSet>(
      _entities[0].relations[0]);
}

/// [D2DataValue] entity fields to define ObjectBox queries.
class D2DataValue_ {
  /// see [D2DataValue.id]
  static final id =
      QueryIntegerProperty<D2DataValue>(_entities[1].properties[0]);

  /// see [D2DataValue.created]
  static final created =
      QueryIntegerProperty<D2DataValue>(_entities[1].properties[1]);

  /// see [D2DataValue.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2DataValue>(_entities[1].properties[2]);

  /// see [D2DataValue.uid]
  static final uid =
      QueryStringProperty<D2DataValue>(_entities[1].properties[3]);

  /// see [D2DataValue.value]
  static final value =
      QueryStringProperty<D2DataValue>(_entities[1].properties[4]);

  /// see [D2DataValue.providedElsewhere]
  static final providedElsewhere =
      QueryBooleanProperty<D2DataValue>(_entities[1].properties[5]);
}

/// [D2Enrollment] entity fields to define ObjectBox queries.
class D2Enrollment_ {
  /// see [D2Enrollment.id]
  static final id =
      QueryIntegerProperty<D2Enrollment>(_entities[2].properties[0]);

  /// see [D2Enrollment.created]
  static final created =
      QueryIntegerProperty<D2Enrollment>(_entities[2].properties[1]);

  /// see [D2Enrollment.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2Enrollment>(_entities[2].properties[2]);

  /// see [D2Enrollment.createdAtClient]
  static final createdAtClient =
      QueryIntegerProperty<D2Enrollment>(_entities[2].properties[3]);

  /// see [D2Enrollment.uid]
  static final uid =
      QueryStringProperty<D2Enrollment>(_entities[2].properties[4]);

  /// see [D2Enrollment.program]
  static final program =
      QueryStringProperty<D2Enrollment>(_entities[2].properties[5]);

  /// see [D2Enrollment.trackedEntityInstance]
  static final trackedEntityInstance =
      QueryStringProperty<D2Enrollment>(_entities[2].properties[6]);

  /// see [D2Enrollment.trackedEntityType]
  static final trackedEntityType =
      QueryStringProperty<D2Enrollment>(_entities[2].properties[7]);

  /// see [D2Enrollment.orgUnit]
  static final orgUnit =
      QueryStringProperty<D2Enrollment>(_entities[2].properties[8]);

  /// see [D2Enrollment.orgUnitName]
  static final orgUnitName =
      QueryStringProperty<D2Enrollment>(_entities[2].properties[9]);

  /// see [D2Enrollment.enrollmentDate]
  static final enrollmentDate =
      QueryIntegerProperty<D2Enrollment>(_entities[2].properties[10]);

  /// see [D2Enrollment.deleted]
  static final deleted =
      QueryBooleanProperty<D2Enrollment>(_entities[2].properties[11]);

  /// see [D2Enrollment.followup]
  static final followup =
      QueryBooleanProperty<D2Enrollment>(_entities[2].properties[12]);

  /// see [D2Enrollment.incidentDate]
  static final incidentDate =
      QueryIntegerProperty<D2Enrollment>(_entities[2].properties[13]);

  /// see [D2Enrollment.status]
  static final status =
      QueryStringProperty<D2Enrollment>(_entities[2].properties[14]);

  /// see [D2Enrollment.notes]
  static final notes =
      QueryStringProperty<D2Enrollment>(_entities[2].properties[15]);

  /// see [D2Enrollment.events]
  static final events =
      QueryRelationToMany<D2Enrollment, D2Event>(_entities[2].relations[0]);

  /// see [D2Enrollment.relationships]
  static final relationships = QueryRelationToMany<D2Enrollment, Relationship>(
      _entities[2].relations[1]);

  /// see [D2Enrollment.attributes]
  static final attributes =
      QueryRelationToMany<D2Enrollment, D2TrackedEntityAttributeValue>(
          _entities[2].relations[2]);
}

/// [D2Event] entity fields to define ObjectBox queries.
class D2Event_ {
  /// see [D2Event.id]
  static final id = QueryIntegerProperty<D2Event>(_entities[3].properties[0]);

  /// see [D2Event.created]
  static final created =
      QueryIntegerProperty<D2Event>(_entities[3].properties[1]);

  /// see [D2Event.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2Event>(_entities[3].properties[2]);

  /// see [D2Event.createdAtClient]
  static final createdAtClient =
      QueryIntegerProperty<D2Event>(_entities[3].properties[3]);

  /// see [D2Event.uid]
  static final uid = QueryStringProperty<D2Event>(_entities[3].properties[4]);

  /// see [D2Event.dueDate]
  static final dueDate =
      QueryIntegerProperty<D2Event>(_entities[3].properties[5]);

  /// see [D2Event.program]
  static final program =
      QueryStringProperty<D2Event>(_entities[3].properties[6]);

  /// see [D2Event.programStage]
  static final programStage =
      QueryStringProperty<D2Event>(_entities[3].properties[7]);

  /// see [D2Event.orgUnit]
  static final orgUnit =
      QueryStringProperty<D2Event>(_entities[3].properties[8]);

  /// see [D2Event.enrollment]
  static final enrollment =
      QueryStringProperty<D2Event>(_entities[3].properties[9]);

  /// see [D2Event.trackedEntityInstance]
  static final trackedEntityInstance =
      QueryStringProperty<D2Event>(_entities[3].properties[10]);

  /// see [D2Event.enrollmentStatus]
  static final enrollmentStatus =
      QueryStringProperty<D2Event>(_entities[3].properties[11]);

  /// see [D2Event.eventDate]
  static final eventDate =
      QueryIntegerProperty<D2Event>(_entities[3].properties[12]);

  /// see [D2Event.orgUnitName]
  static final orgUnitName =
      QueryStringProperty<D2Event>(_entities[3].properties[13]);

  /// see [D2Event.status]
  static final status =
      QueryStringProperty<D2Event>(_entities[3].properties[14]);

  /// see [D2Event.attributeCategoryOptions]
  static final attributeCategoryOptions =
      QueryStringProperty<D2Event>(_entities[3].properties[15]);

  /// see [D2Event.deleted]
  static final deleted =
      QueryBooleanProperty<D2Event>(_entities[3].properties[16]);

  /// see [D2Event.followup]
  static final followup =
      QueryBooleanProperty<D2Event>(_entities[3].properties[17]);

  /// see [D2Event.attributeOptionCombo]
  static final attributeOptionCombo =
      QueryStringProperty<D2Event>(_entities[3].properties[18]);

  /// see [D2Event.notes]
  static final notes =
      QueryStringProperty<D2Event>(_entities[3].properties[19]);

  /// see [D2Event.relationships]
  static final relationships =
      QueryRelationToMany<D2Event, Relationship>(_entities[3].relations[0]);

  /// see [D2Event.dataValues]
  static final dataValues =
      QueryRelationToMany<D2Event, D2DataValue>(_entities[3].relations[1]);
}

/// [D2Legend] entity fields to define ObjectBox queries.
class D2Legend_ {
  /// see [D2Legend.id]
  static final id = QueryIntegerProperty<D2Legend>(_entities[4].properties[0]);

  /// see [D2Legend.created]
  static final created =
      QueryIntegerProperty<D2Legend>(_entities[4].properties[1]);

  /// see [D2Legend.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2Legend>(_entities[4].properties[2]);

  /// see [D2Legend.uid]
  static final uid = QueryStringProperty<D2Legend>(_entities[4].properties[3]);

  /// see [D2Legend.name]
  static final name = QueryStringProperty<D2Legend>(_entities[4].properties[4]);

  /// see [D2Legend.startValue]
  static final startValue =
      QueryDoubleProperty<D2Legend>(_entities[4].properties[5]);

  /// see [D2Legend.endValue]
  static final endValue =
      QueryDoubleProperty<D2Legend>(_entities[4].properties[6]);

  /// see [D2Legend.color]
  static final color =
      QueryStringProperty<D2Legend>(_entities[4].properties[7]);

  /// see [D2Legend.displayName]
  static final displayName =
      QueryStringProperty<D2Legend>(_entities[4].properties[8]);
}

/// [D2LegendSet] entity fields to define ObjectBox queries.
class D2LegendSet_ {
  /// see [D2LegendSet.id]
  static final id =
      QueryIntegerProperty<D2LegendSet>(_entities[5].properties[0]);

  /// see [D2LegendSet.created]
  static final created =
      QueryIntegerProperty<D2LegendSet>(_entities[5].properties[1]);

  /// see [D2LegendSet.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2LegendSet>(_entities[5].properties[2]);

  /// see [D2LegendSet.uid]
  static final uid =
      QueryStringProperty<D2LegendSet>(_entities[5].properties[3]);

  /// see [D2LegendSet.name]
  static final name =
      QueryStringProperty<D2LegendSet>(_entities[5].properties[4]);

  /// see [D2LegendSet.code]
  static final code =
      QueryStringProperty<D2LegendSet>(_entities[5].properties[5]);

  /// see [D2LegendSet.legends]
  static final legends =
      QueryRelationToMany<D2LegendSet, D2Legend>(_entities[5].relations[0]);
}

/// [D2Option] entity fields to define ObjectBox queries.
class D2Option_ {
  /// see [D2Option.id]
  static final id = QueryIntegerProperty<D2Option>(_entities[6].properties[0]);

  /// see [D2Option.created]
  static final created =
      QueryIntegerProperty<D2Option>(_entities[6].properties[1]);

  /// see [D2Option.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2Option>(_entities[6].properties[2]);

  /// see [D2Option.uid]
  static final uid = QueryStringProperty<D2Option>(_entities[6].properties[3]);

  /// see [D2Option.name]
  static final name = QueryStringProperty<D2Option>(_entities[6].properties[4]);

  /// see [D2Option.code]
  static final code = QueryStringProperty<D2Option>(_entities[6].properties[5]);

  /// see [D2Option.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<D2Option>(_entities[6].properties[6]);

  /// see [D2Option.optionSet]
  static final optionSet =
      QueryRelationToOne<D2Option, D2OptionSet>(_entities[6].properties[7]);
}

/// [D2OptionSet] entity fields to define ObjectBox queries.
class D2OptionSet_ {
  /// see [D2OptionSet.id]
  static final id =
      QueryIntegerProperty<D2OptionSet>(_entities[7].properties[0]);

  /// see [D2OptionSet.created]
  static final created =
      QueryIntegerProperty<D2OptionSet>(_entities[7].properties[1]);

  /// see [D2OptionSet.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2OptionSet>(_entities[7].properties[2]);

  /// see [D2OptionSet.uid]
  static final uid =
      QueryStringProperty<D2OptionSet>(_entities[7].properties[3]);

  /// see [D2OptionSet.name]
  static final name =
      QueryStringProperty<D2OptionSet>(_entities[7].properties[4]);

  /// see [D2OptionSet.code]
  static final code =
      QueryStringProperty<D2OptionSet>(_entities[7].properties[5]);

  /// see [D2OptionSet.valueType]
  static final valueType =
      QueryStringProperty<D2OptionSet>(_entities[7].properties[6]);

  /// see [D2OptionSet.options]
  static final options =
      QueryRelationToMany<D2OptionSet, D2Option>(_entities[7].relations[0]);
}

/// [D2OrganisationUnit] entity fields to define ObjectBox queries.
class D2OrganisationUnit_ {
  /// see [D2OrganisationUnit.id]
  static final id =
      QueryIntegerProperty<D2OrganisationUnit>(_entities[8].properties[0]);

  /// see [D2OrganisationUnit.name]
  static final name =
      QueryStringProperty<D2OrganisationUnit>(_entities[8].properties[1]);

  /// see [D2OrganisationUnit.shortName]
  static final shortName =
      QueryStringProperty<D2OrganisationUnit>(_entities[8].properties[2]);

  /// see [D2OrganisationUnit.uid]
  static final uid =
      QueryStringProperty<D2OrganisationUnit>(_entities[8].properties[3]);

  /// see [D2OrganisationUnit.path]
  static final path =
      QueryStringProperty<D2OrganisationUnit>(_entities[8].properties[4]);

  /// see [D2OrganisationUnit.level]
  static final level =
      QueryIntegerProperty<D2OrganisationUnit>(_entities[8].properties[5]);

  /// see [D2OrganisationUnit.created]
  static final created =
      QueryIntegerProperty<D2OrganisationUnit>(_entities[8].properties[6]);

  /// see [D2OrganisationUnit.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2OrganisationUnit>(_entities[8].properties[7]);
}

/// [D2OrganisationUnitGroup] entity fields to define ObjectBox queries.
class D2OrganisationUnitGroup_ {
  /// see [D2OrganisationUnitGroup.id]
  static final id =
      QueryIntegerProperty<D2OrganisationUnitGroup>(_entities[9].properties[0]);

  /// see [D2OrganisationUnitGroup.name]
  static final name =
      QueryStringProperty<D2OrganisationUnitGroup>(_entities[9].properties[1]);

  /// see [D2OrganisationUnitGroup.uid]
  static final uid =
      QueryStringProperty<D2OrganisationUnitGroup>(_entities[9].properties[2]);

  /// see [D2OrganisationUnitGroup.created]
  static final created =
      QueryIntegerProperty<D2OrganisationUnitGroup>(_entities[9].properties[3]);

  /// see [D2OrganisationUnitGroup.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2OrganisationUnitGroup>(_entities[9].properties[4]);

  /// see [D2OrganisationUnitGroup.organisationUnits]
  static final organisationUnits =
      QueryRelationToMany<D2OrganisationUnitGroup, D2OrganisationUnit>(
          _entities[9].relations[0]);
}

/// [D2OrganisationUnitLevel] entity fields to define ObjectBox queries.
class D2OrganisationUnitLevel_ {
  /// see [D2OrganisationUnitLevel.id]
  static final id = QueryIntegerProperty<D2OrganisationUnitLevel>(
      _entities[10].properties[0]);

  /// see [D2OrganisationUnitLevel.name]
  static final name =
      QueryStringProperty<D2OrganisationUnitLevel>(_entities[10].properties[1]);

  /// see [D2OrganisationUnitLevel.uid]
  static final uid =
      QueryStringProperty<D2OrganisationUnitLevel>(_entities[10].properties[2]);

  /// see [D2OrganisationUnitLevel.level]
  static final level = QueryIntegerProperty<D2OrganisationUnitLevel>(
      _entities[10].properties[3]);

  /// see [D2OrganisationUnitLevel.created]
  static final created = QueryIntegerProperty<D2OrganisationUnitLevel>(
      _entities[10].properties[4]);

  /// see [D2OrganisationUnitLevel.lastUpdated]
  static final lastUpdated = QueryIntegerProperty<D2OrganisationUnitLevel>(
      _entities[10].properties[5]);
}

/// [D2Program] entity fields to define ObjectBox queries.
class D2Program_ {
  /// see [D2Program.id]
  static final id =
      QueryIntegerProperty<D2Program>(_entities[11].properties[0]);

  /// see [D2Program.created]
  static final created =
      QueryIntegerProperty<D2Program>(_entities[11].properties[1]);

  /// see [D2Program.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2Program>(_entities[11].properties[2]);

  /// see [D2Program.uid]
  static final uid =
      QueryStringProperty<D2Program>(_entities[11].properties[3]);

  /// see [D2Program.name]
  static final name =
      QueryStringProperty<D2Program>(_entities[11].properties[4]);

  /// see [D2Program.shortName]
  static final shortName =
      QueryStringProperty<D2Program>(_entities[11].properties[5]);

  /// see [D2Program.accessLevel]
  static final accessLevel =
      QueryStringProperty<D2Program>(_entities[11].properties[6]);

  /// see [D2Program.organisationUnits]
  static final organisationUnits =
      QueryRelationToMany<D2Program, D2OrganisationUnit>(
          _entities[11].relations[0]);

  /// see [D2Program.programStages]
  static final programStages = QueryRelationToMany<D2Program, D2ProgramStage>(
      _entities[11].relations[1]);

  /// see [D2Program.programSections]
  static final programSections =
      QueryRelationToMany<D2Program, D2ProgramSection>(
          _entities[11].relations[2]);

  /// see [D2Program.programTrackedEntityAttributes]
  static final programTrackedEntityAttributes =
      QueryRelationToMany<D2Program, D2ProgramTrackedEntityAttribute>(
          _entities[11].relations[3]);
}

/// [D2ProgramRule] entity fields to define ObjectBox queries.
class D2ProgramRule_ {
  /// see [D2ProgramRule.id]
  static final id =
      QueryIntegerProperty<D2ProgramRule>(_entities[12].properties[0]);

  /// see [D2ProgramRule.created]
  static final created =
      QueryIntegerProperty<D2ProgramRule>(_entities[12].properties[1]);

  /// see [D2ProgramRule.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2ProgramRule>(_entities[12].properties[2]);

  /// see [D2ProgramRule.uid]
  static final uid =
      QueryStringProperty<D2ProgramRule>(_entities[12].properties[3]);

  /// see [D2ProgramRule.name]
  static final name =
      QueryStringProperty<D2ProgramRule>(_entities[12].properties[4]);

  /// see [D2ProgramRule.description]
  static final description =
      QueryStringProperty<D2ProgramRule>(_entities[12].properties[5]);

  /// see [D2ProgramRule.condition]
  static final condition =
      QueryStringProperty<D2ProgramRule>(_entities[12].properties[6]);

  /// see [D2ProgramRule.program]
  static final program =
      QueryRelationToOne<D2ProgramRule, D2Program>(_entities[12].properties[7]);

  /// see [D2ProgramRule.programRuleActions]
  static final programRuleActions =
      QueryRelationToMany<D2ProgramRule, D2ProgramRuleAction>(
          _entities[12].relations[0]);
}

/// [D2ProgramRuleAction] entity fields to define ObjectBox queries.
class D2ProgramRuleAction_ {
  /// see [D2ProgramRuleAction.id]
  static final id =
      QueryIntegerProperty<D2ProgramRuleAction>(_entities[13].properties[0]);

  /// see [D2ProgramRuleAction.created]
  static final created =
      QueryIntegerProperty<D2ProgramRuleAction>(_entities[13].properties[1]);

  /// see [D2ProgramRuleAction.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2ProgramRuleAction>(_entities[13].properties[2]);

  /// see [D2ProgramRuleAction.uid]
  static final uid =
      QueryStringProperty<D2ProgramRuleAction>(_entities[13].properties[3]);

  /// see [D2ProgramRuleAction.programRuleActionType]
  static final programRuleActionType =
      QueryStringProperty<D2ProgramRuleAction>(_entities[13].properties[4]);

  /// see [D2ProgramRuleAction.content]
  static final content =
      QueryStringProperty<D2ProgramRuleAction>(_entities[13].properties[5]);

  /// see [D2ProgramRuleAction.data]
  static final data =
      QueryStringProperty<D2ProgramRuleAction>(_entities[13].properties[6]);

  /// see [D2ProgramRuleAction.location]
  static final location =
      QueryStringProperty<D2ProgramRuleAction>(_entities[13].properties[7]);

  /// see [D2ProgramRuleAction.programRule]
  static final programRule =
      QueryRelationToOne<D2ProgramRuleAction, D2ProgramRule>(
          _entities[13].properties[8]);

  /// see [D2ProgramRuleAction.dataElement]
  static final dataElement =
      QueryRelationToOne<D2ProgramRuleAction, D2DataElement>(
          _entities[13].properties[9]);

  /// see [D2ProgramRuleAction.programStageSection]
  static final programStageSection =
      QueryRelationToOne<D2ProgramRuleAction, D2ProgramStageSection>(
          _entities[13].properties[10]);

  /// see [D2ProgramRuleAction.programSection]
  static final programSection =
      QueryRelationToOne<D2ProgramRuleAction, D2ProgramSection>(
          _entities[13].properties[11]);

  /// see [D2ProgramRuleAction.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<D2ProgramRuleAction, D2TrackedEntityAttribute>(
          _entities[13].properties[12]);
}

/// [D2ProgramRuleVariable] entity fields to define ObjectBox queries.
class D2ProgramRuleVariable_ {
  /// see [D2ProgramRuleVariable.id]
  static final id =
      QueryIntegerProperty<D2ProgramRuleVariable>(_entities[14].properties[0]);

  /// see [D2ProgramRuleVariable.created]
  static final created =
      QueryIntegerProperty<D2ProgramRuleVariable>(_entities[14].properties[1]);

  /// see [D2ProgramRuleVariable.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2ProgramRuleVariable>(_entities[14].properties[2]);

  /// see [D2ProgramRuleVariable.uid]
  static final uid =
      QueryStringProperty<D2ProgramRuleVariable>(_entities[14].properties[3]);

  /// see [D2ProgramRuleVariable.name]
  static final name =
      QueryStringProperty<D2ProgramRuleVariable>(_entities[14].properties[4]);

  /// see [D2ProgramRuleVariable.programRuleVariableSourceType]
  static final programRuleVariableSourceType =
      QueryStringProperty<D2ProgramRuleVariable>(_entities[14].properties[5]);

  /// see [D2ProgramRuleVariable.valueType]
  static final valueType =
      QueryStringProperty<D2ProgramRuleVariable>(_entities[14].properties[6]);

  /// see [D2ProgramRuleVariable.useCodeForOptionSet]
  static final useCodeForOptionSet =
      QueryBooleanProperty<D2ProgramRuleVariable>(_entities[14].properties[7]);

  /// see [D2ProgramRuleVariable.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<D2ProgramRuleVariable, D2TrackedEntityAttribute>(
          _entities[14].properties[8]);

  /// see [D2ProgramRuleVariable.dataElement]
  static final dataElement =
      QueryRelationToOne<D2ProgramRuleVariable, D2DataElement>(
          _entities[14].properties[9]);

  /// see [D2ProgramRuleVariable.programStage]
  static final programStage =
      QueryRelationToOne<D2ProgramRuleVariable, D2ProgramStage>(
          _entities[14].properties[10]);

  /// see [D2ProgramRuleVariable.program]
  static final program = QueryRelationToOne<D2ProgramRuleVariable, D2Program>(
      _entities[14].properties[11]);
}

/// [D2ProgramSection] entity fields to define ObjectBox queries.
class D2ProgramSection_ {
  /// see [D2ProgramSection.id]
  static final id =
      QueryIntegerProperty<D2ProgramSection>(_entities[15].properties[0]);

  /// see [D2ProgramSection.created]
  static final created =
      QueryIntegerProperty<D2ProgramSection>(_entities[15].properties[1]);

  /// see [D2ProgramSection.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2ProgramSection>(_entities[15].properties[2]);

  /// see [D2ProgramSection.uid]
  static final uid =
      QueryStringProperty<D2ProgramSection>(_entities[15].properties[3]);

  /// see [D2ProgramSection.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<D2ProgramSection>(_entities[15].properties[4]);

  /// see [D2ProgramSection.name]
  static final name =
      QueryStringProperty<D2ProgramSection>(_entities[15].properties[5]);

  /// see [D2ProgramSection.program]
  static final program = QueryRelationToOne<D2ProgramSection, D2Program>(
      _entities[15].properties[6]);

  /// see [D2ProgramSection.trackedEntityAttributes]
  static final trackedEntityAttributes =
      QueryRelationToMany<D2ProgramSection, D2TrackedEntityAttribute>(
          _entities[15].relations[0]);
}

/// [D2ProgramStage] entity fields to define ObjectBox queries.
class D2ProgramStage_ {
  /// see [D2ProgramStage.id]
  static final id =
      QueryIntegerProperty<D2ProgramStage>(_entities[16].properties[0]);

  /// see [D2ProgramStage.created]
  static final created =
      QueryIntegerProperty<D2ProgramStage>(_entities[16].properties[1]);

  /// see [D2ProgramStage.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2ProgramStage>(_entities[16].properties[2]);

  /// see [D2ProgramStage.uid]
  static final uid =
      QueryStringProperty<D2ProgramStage>(_entities[16].properties[3]);

  /// see [D2ProgramStage.name]
  static final name =
      QueryStringProperty<D2ProgramStage>(_entities[16].properties[4]);

  /// see [D2ProgramStage.description]
  static final description =
      QueryStringProperty<D2ProgramStage>(_entities[16].properties[5]);

  /// see [D2ProgramStage.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<D2ProgramStage>(_entities[16].properties[6]);

  /// see [D2ProgramStage.validationStrategy]
  static final validationStrategy =
      QueryStringProperty<D2ProgramStage>(_entities[16].properties[7]);

  /// see [D2ProgramStage.featureType]
  static final featureType =
      QueryStringProperty<D2ProgramStage>(_entities[16].properties[8]);

  /// see [D2ProgramStage.reportDateToUse]
  static final reportDateToUse =
      QueryStringProperty<D2ProgramStage>(_entities[16].properties[9]);

  /// see [D2ProgramStage.program]
  static final program = QueryRelationToOne<D2ProgramStage, D2Program>(
      _entities[16].properties[10]);

  /// see [D2ProgramStage.programStageDataElements]
  static final programStageDataElements =
      QueryRelationToMany<D2ProgramStage, D2ProgramStageDataElement>(
          _entities[16].relations[0]);

  /// see [D2ProgramStage.programStageSections]
  static final programStageSections =
      QueryRelationToMany<D2ProgramStage, D2ProgramStageSection>(
          _entities[16].relations[1]);
}

/// [D2ProgramStageDataElement] entity fields to define ObjectBox queries.
class D2ProgramStageDataElement_ {
  /// see [D2ProgramStageDataElement.created]
  static final created = QueryIntegerProperty<D2ProgramStageDataElement>(
      _entities[17].properties[0]);

  /// see [D2ProgramStageDataElement.id]
  static final id = QueryIntegerProperty<D2ProgramStageDataElement>(
      _entities[17].properties[1]);

  /// see [D2ProgramStageDataElement.lastUpdated]
  static final lastUpdated = QueryIntegerProperty<D2ProgramStageDataElement>(
      _entities[17].properties[2]);

  /// see [D2ProgramStageDataElement.uid]
  static final uid = QueryStringProperty<D2ProgramStageDataElement>(
      _entities[17].properties[3]);

  /// see [D2ProgramStageDataElement.compulsory]
  static final compulsory = QueryBooleanProperty<D2ProgramStageDataElement>(
      _entities[17].properties[4]);

  /// see [D2ProgramStageDataElement.sortOrder]
  static final sortOrder = QueryIntegerProperty<D2ProgramStageDataElement>(
      _entities[17].properties[5]);

  /// see [D2ProgramStageDataElement.programStage]
  static final programStage =
      QueryRelationToOne<D2ProgramStageDataElement, D2ProgramStage>(
          _entities[17].properties[6]);

  /// see [D2ProgramStageDataElement.dataElement]
  static final dataElement =
      QueryRelationToOne<D2ProgramStageDataElement, D2DataElement>(
          _entities[17].properties[7]);
}

/// [D2ProgramStageSection] entity fields to define ObjectBox queries.
class D2ProgramStageSection_ {
  /// see [D2ProgramStageSection.id]
  static final id =
      QueryIntegerProperty<D2ProgramStageSection>(_entities[18].properties[0]);

  /// see [D2ProgramStageSection.created]
  static final created =
      QueryIntegerProperty<D2ProgramStageSection>(_entities[18].properties[1]);

  /// see [D2ProgramStageSection.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2ProgramStageSection>(_entities[18].properties[2]);

  /// see [D2ProgramStageSection.uid]
  static final uid =
      QueryStringProperty<D2ProgramStageSection>(_entities[18].properties[3]);

  /// see [D2ProgramStageSection.name]
  static final name =
      QueryStringProperty<D2ProgramStageSection>(_entities[18].properties[4]);

  /// see [D2ProgramStageSection.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<D2ProgramStageSection>(_entities[18].properties[5]);

  /// see [D2ProgramStageSection.programStage]
  static final programStage =
      QueryRelationToOne<D2ProgramStageSection, D2ProgramStage>(
          _entities[18].properties[6]);

  /// see [D2ProgramStageSection.dataElements]
  static final dataElements =
      QueryRelationToMany<D2ProgramStageSection, D2DataElement>(
          _entities[18].relations[0]);
}

/// [D2ProgramTrackedEntityAttribute] entity fields to define ObjectBox queries.
class D2ProgramTrackedEntityAttribute_ {
  /// see [D2ProgramTrackedEntityAttribute.created]
  static final created = QueryIntegerProperty<D2ProgramTrackedEntityAttribute>(
      _entities[19].properties[0]);

  /// see [D2ProgramTrackedEntityAttribute.id]
  static final id = QueryIntegerProperty<D2ProgramTrackedEntityAttribute>(
      _entities[19].properties[1]);

  /// see [D2ProgramTrackedEntityAttribute.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2ProgramTrackedEntityAttribute>(
          _entities[19].properties[2]);

  /// see [D2ProgramTrackedEntityAttribute.uid]
  static final uid = QueryStringProperty<D2ProgramTrackedEntityAttribute>(
      _entities[19].properties[3]);

  /// see [D2ProgramTrackedEntityAttribute.sortOrder]
  static final sortOrder =
      QueryIntegerProperty<D2ProgramTrackedEntityAttribute>(
          _entities[19].properties[4]);

  /// see [D2ProgramTrackedEntityAttribute.displayInList]
  static final displayInList =
      QueryBooleanProperty<D2ProgramTrackedEntityAttribute>(
          _entities[19].properties[5]);

  /// see [D2ProgramTrackedEntityAttribute.mandatory]
  static final mandatory =
      QueryBooleanProperty<D2ProgramTrackedEntityAttribute>(
          _entities[19].properties[6]);

  /// see [D2ProgramTrackedEntityAttribute.searchable]
  static final searchable =
      QueryBooleanProperty<D2ProgramTrackedEntityAttribute>(
          _entities[19].properties[7]);

  /// see [D2ProgramTrackedEntityAttribute.renderOptionAsRadio]
  static final renderOptionAsRadio =
      QueryBooleanProperty<D2ProgramTrackedEntityAttribute>(
          _entities[19].properties[8]);

  /// see [D2ProgramTrackedEntityAttribute.program]
  static final program =
      QueryRelationToOne<D2ProgramTrackedEntityAttribute, D2Program>(
          _entities[19].properties[9]);

  /// see [D2ProgramTrackedEntityAttribute.trackedEntityAttribute]
  static final trackedEntityAttribute = QueryRelationToOne<
      D2ProgramTrackedEntityAttribute,
      D2TrackedEntityAttribute>(_entities[19].properties[10]);
}

/// [D2RelationshipConstraint] entity fields to define ObjectBox queries.
class D2RelationshipConstraint_ {
  /// see [D2RelationshipConstraint.id]
  static final id = QueryIntegerProperty<D2RelationshipConstraint>(
      _entities[20].properties[0]);

  /// see [D2RelationshipConstraint.relationshipEntity]
  static final relationshipEntity =
      QueryStringProperty<D2RelationshipConstraint>(
          _entities[20].properties[1]);

  /// see [D2RelationshipConstraint.name]
  static final name = QueryStringProperty<D2RelationshipConstraint>(
      _entities[20].properties[2]);

  /// see [D2RelationshipConstraint.trackedEntityType]
  static final trackedEntityType =
      QueryRelationToOne<D2RelationshipConstraint, D2TrackedEntityType>(
          _entities[20].properties[3]);

  /// see [D2RelationshipConstraint.relationshipType]
  static final relationshipType =
      QueryRelationToOne<D2RelationshipConstraint, D2RelationshipType>(
          _entities[20].properties[4]);

  /// see [D2RelationshipConstraint.program]
  static final program =
      QueryRelationToOne<D2RelationshipConstraint, D2Program>(
          _entities[20].properties[5]);

  /// see [D2RelationshipConstraint.programStage]
  static final programStage =
      QueryRelationToOne<D2RelationshipConstraint, D2ProgramStage>(
          _entities[20].properties[6]);
}

/// [D2RelationshipType] entity fields to define ObjectBox queries.
class D2RelationshipType_ {
  /// see [D2RelationshipType.id]
  static final id =
      QueryIntegerProperty<D2RelationshipType>(_entities[21].properties[0]);

  /// see [D2RelationshipType.created]
  static final created =
      QueryIntegerProperty<D2RelationshipType>(_entities[21].properties[1]);

  /// see [D2RelationshipType.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2RelationshipType>(_entities[21].properties[2]);

  /// see [D2RelationshipType.uid]
  static final uid =
      QueryStringProperty<D2RelationshipType>(_entities[21].properties[3]);

  /// see [D2RelationshipType.name]
  static final name =
      QueryStringProperty<D2RelationshipType>(_entities[21].properties[4]);

  /// see [D2RelationshipType.code]
  static final code =
      QueryStringProperty<D2RelationshipType>(_entities[21].properties[5]);

  /// see [D2RelationshipType.bidirectional]
  static final bidirectional =
      QueryBooleanProperty<D2RelationshipType>(_entities[21].properties[6]);

  /// see [D2RelationshipType.referral]
  static final referral =
      QueryBooleanProperty<D2RelationshipType>(_entities[21].properties[7]);

  /// see [D2RelationshipType.fromToName]
  static final fromToName =
      QueryStringProperty<D2RelationshipType>(_entities[21].properties[8]);

  /// see [D2RelationshipType.toFromName]
  static final toFromName =
      QueryStringProperty<D2RelationshipType>(_entities[21].properties[9]);

  /// see [D2RelationshipType.fromConstraint]
  static final fromConstraint =
      QueryRelationToOne<D2RelationshipType, D2RelationshipConstraint>(
          _entities[21].properties[10]);

  /// see [D2RelationshipType.toConstraint]
  static final toConstraint =
      QueryRelationToOne<D2RelationshipType, D2RelationshipConstraint>(
          _entities[21].properties[11]);
}

/// [D2SystemInfo] entity fields to define ObjectBox queries.
class D2SystemInfo_ {
  /// see [D2SystemInfo.id]
  static final id =
      QueryIntegerProperty<D2SystemInfo>(_entities[22].properties[0]);

  /// see [D2SystemInfo.version]
  static final version =
      QueryStringProperty<D2SystemInfo>(_entities[22].properties[1]);

  /// see [D2SystemInfo.revision]
  static final revision =
      QueryStringProperty<D2SystemInfo>(_entities[22].properties[2]);

  /// see [D2SystemInfo.calendar]
  static final calendar =
      QueryStringProperty<D2SystemInfo>(_entities[22].properties[3]);

  /// see [D2SystemInfo.dateFormat]
  static final dateFormat =
      QueryStringProperty<D2SystemInfo>(_entities[22].properties[4]);

  /// see [D2SystemInfo.contextPath]
  static final contextPath =
      QueryStringProperty<D2SystemInfo>(_entities[22].properties[5]);

  /// see [D2SystemInfo.systemId]
  static final systemId =
      QueryStringProperty<D2SystemInfo>(_entities[22].properties[6]);

  /// see [D2SystemInfo.systemName]
  static final systemName =
      QueryStringProperty<D2SystemInfo>(_entities[22].properties[7]);
}

/// [D2TrackedEntityAttribute] entity fields to define ObjectBox queries.
class D2TrackedEntityAttribute_ {
  /// see [D2TrackedEntityAttribute.id]
  static final id = QueryIntegerProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[0]);

  /// see [D2TrackedEntityAttribute.created]
  static final created = QueryIntegerProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[1]);

  /// see [D2TrackedEntityAttribute.lastUpdated]
  static final lastUpdated = QueryIntegerProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[2]);

  /// see [D2TrackedEntityAttribute.uid]
  static final uid = QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[3]);

  /// see [D2TrackedEntityAttribute.name]
  static final name = QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[4]);

  /// see [D2TrackedEntityAttribute.code]
  static final code = QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[5]);

  /// see [D2TrackedEntityAttribute.formName]
  static final formName = QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[6]);

  /// see [D2TrackedEntityAttribute.shortName]
  static final shortName = QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[7]);

  /// see [D2TrackedEntityAttribute.description]
  static final description = QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[8]);

  /// see [D2TrackedEntityAttribute.aggregationType]
  static final aggregationType = QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[9]);

  /// see [D2TrackedEntityAttribute.valueType]
  static final valueType = QueryStringProperty<D2TrackedEntityAttribute>(
      _entities[23].properties[10]);

  /// see [D2TrackedEntityAttribute.zeroIsSignificant]
  static final zeroIsSignificant =
      QueryBooleanProperty<D2TrackedEntityAttribute>(
          _entities[23].properties[11]);

  /// see [D2TrackedEntityAttribute.optionSet]
  static final optionSet =
      QueryRelationToOne<D2TrackedEntityAttribute, D2OptionSet>(
          _entities[23].properties[12]);

  /// see [D2TrackedEntityAttribute.legendSets]
  static final legendSets =
      QueryRelationToMany<D2TrackedEntityAttribute, D2LegendSet>(
          _entities[23].relations[0]);
}

/// [D2TrackedEntityAttributeValue] entity fields to define ObjectBox queries.
class D2TrackedEntityAttributeValue_ {
  /// see [D2TrackedEntityAttributeValue.id]
  static final id = QueryIntegerProperty<D2TrackedEntityAttributeValue>(
      _entities[24].properties[0]);

  /// see [D2TrackedEntityAttributeValue.created]
  static final created = QueryIntegerProperty<D2TrackedEntityAttributeValue>(
      _entities[24].properties[1]);

  /// see [D2TrackedEntityAttributeValue.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2TrackedEntityAttributeValue>(
          _entities[24].properties[2]);

  /// see [D2TrackedEntityAttributeValue.uid]
  static final uid = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[24].properties[3]);

  /// see [D2TrackedEntityAttributeValue.displayName]
  static final displayName = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[24].properties[4]);

  /// see [D2TrackedEntityAttributeValue.code]
  static final code = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[24].properties[5]);

  /// see [D2TrackedEntityAttributeValue.value]
  static final value = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[24].properties[6]);

  /// see [D2TrackedEntityAttributeValue.valueType]
  static final valueType = QueryStringProperty<D2TrackedEntityAttributeValue>(
      _entities[24].properties[7]);
}

/// [D2TrackedEntityType] entity fields to define ObjectBox queries.
class D2TrackedEntityType_ {
  /// see [D2TrackedEntityType.id]
  static final id =
      QueryIntegerProperty<D2TrackedEntityType>(_entities[25].properties[0]);

  /// see [D2TrackedEntityType.created]
  static final created =
      QueryIntegerProperty<D2TrackedEntityType>(_entities[25].properties[1]);

  /// see [D2TrackedEntityType.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2TrackedEntityType>(_entities[25].properties[2]);

  /// see [D2TrackedEntityType.uid]
  static final uid =
      QueryStringProperty<D2TrackedEntityType>(_entities[25].properties[3]);

  /// see [D2TrackedEntityType.name]
  static final name =
      QueryStringProperty<D2TrackedEntityType>(_entities[25].properties[4]);

  /// see [D2TrackedEntityType.description]
  static final description =
      QueryStringProperty<D2TrackedEntityType>(_entities[25].properties[5]);

  /// see [D2TrackedEntityType.trackedEntityTypeAttributes]
  static final trackedEntityTypeAttributes =
      QueryRelationToMany<D2TrackedEntityType, D2TrackedEntityTypeAttribute>(
          _entities[25].relations[0]);
}

/// [D2TrackedEntityTypeAttribute] entity fields to define ObjectBox queries.
class D2TrackedEntityTypeAttribute_ {
  /// see [D2TrackedEntityTypeAttribute.id]
  static final id = QueryIntegerProperty<D2TrackedEntityTypeAttribute>(
      _entities[26].properties[0]);

  /// see [D2TrackedEntityTypeAttribute.created]
  static final created = QueryIntegerProperty<D2TrackedEntityTypeAttribute>(
      _entities[26].properties[1]);

  /// see [D2TrackedEntityTypeAttribute.lastUpdated]
  static final lastUpdated = QueryIntegerProperty<D2TrackedEntityTypeAttribute>(
      _entities[26].properties[2]);

  /// see [D2TrackedEntityTypeAttribute.uid]
  static final uid = QueryStringProperty<D2TrackedEntityTypeAttribute>(
      _entities[26].properties[3]);

  /// see [D2TrackedEntityTypeAttribute.trackedEntityType]
  static final trackedEntityType =
      QueryRelationToOne<D2TrackedEntityTypeAttribute, D2TrackedEntityType>(
          _entities[26].properties[4]);

  /// see [D2TrackedEntityTypeAttribute.trackedEntityAttribute]
  static final trackedEntityAttribute = QueryRelationToOne<
      D2TrackedEntityTypeAttribute,
      D2TrackedEntityAttribute>(_entities[26].properties[5]);

  /// see [D2TrackedEntityTypeAttribute.valueType]
  static final valueType = QueryStringProperty<D2TrackedEntityTypeAttribute>(
      _entities[26].properties[6]);

  /// see [D2TrackedEntityTypeAttribute.displayName]
  static final displayName = QueryStringProperty<D2TrackedEntityTypeAttribute>(
      _entities[26].properties[7]);

  /// see [D2TrackedEntityTypeAttribute.displayShortName]
  static final displayShortName =
      QueryStringProperty<D2TrackedEntityTypeAttribute>(
          _entities[26].properties[8]);

  /// see [D2TrackedEntityTypeAttribute.mandatory]
  static final mandatory = QueryBooleanProperty<D2TrackedEntityTypeAttribute>(
      _entities[26].properties[9]);
}

/// [D2User] entity fields to define ObjectBox queries.
class D2User_ {
  /// see [D2User.id]
  static final id = QueryIntegerProperty<D2User>(_entities[27].properties[0]);

  /// see [D2User.username]
  static final username =
      QueryStringProperty<D2User>(_entities[27].properties[1]);

  /// see [D2User.firstName]
  static final firstName =
      QueryStringProperty<D2User>(_entities[27].properties[2]);

  /// see [D2User.surname]
  static final surname =
      QueryStringProperty<D2User>(_entities[27].properties[3]);

  /// see [D2User.email]
  static final email = QueryStringProperty<D2User>(_entities[27].properties[4]);

  /// see [D2User.authorities]
  static final authorities =
      QueryStringVectorProperty<D2User>(_entities[27].properties[5]);

  /// see [D2User.programs]
  static final programs =
      QueryStringVectorProperty<D2User>(_entities[27].properties[6]);

  /// see [D2User.organisationUnits]
  static final organisationUnits =
      QueryStringVectorProperty<D2User>(_entities[27].properties[7]);

  /// see [D2User.uid]
  static final uid = QueryStringProperty<D2User>(_entities[27].properties[8]);

  /// see [D2User.userRoles]
  static final userRoles =
      QueryRelationToMany<D2User, D2UserRole>(_entities[27].relations[0]);

  /// see [D2User.userGroups]
  static final userGroups =
      QueryRelationToMany<D2User, D2UserGroup>(_entities[27].relations[1]);
}

/// [D2UserGroup] entity fields to define ObjectBox queries.
class D2UserGroup_ {
  /// see [D2UserGroup.id]
  static final id =
      QueryIntegerProperty<D2UserGroup>(_entities[28].properties[0]);

  /// see [D2UserGroup.uid]
  static final uid =
      QueryStringProperty<D2UserGroup>(_entities[28].properties[1]);

  /// see [D2UserGroup.name]
  static final name =
      QueryStringProperty<D2UserGroup>(_entities[28].properties[2]);

  /// see [D2UserGroup.created]
  static final created =
      QueryIntegerProperty<D2UserGroup>(_entities[28].properties[3]);

  /// see [D2UserGroup.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2UserGroup>(_entities[28].properties[4]);
}

/// [D2UserRole] entity fields to define ObjectBox queries.
class D2UserRole_ {
  /// see [D2UserRole.id]
  static final id =
      QueryIntegerProperty<D2UserRole>(_entities[29].properties[0]);

  /// see [D2UserRole.uid]
  static final uid =
      QueryStringProperty<D2UserRole>(_entities[29].properties[1]);

  /// see [D2UserRole.name]
  static final name =
      QueryStringProperty<D2UserRole>(_entities[29].properties[2]);

  /// see [D2UserRole.authorities]
  static final authorities =
      QueryStringVectorProperty<D2UserRole>(_entities[29].properties[3]);

  /// see [D2UserRole.created]
  static final created =
      QueryIntegerProperty<D2UserRole>(_entities[29].properties[4]);

  /// see [D2UserRole.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<D2UserRole>(_entities[29].properties[5]);
}

/// [DHIS2AttributeValue] entity fields to define ObjectBox queries.
class DHIS2AttributeValue_ {
  /// see [DHIS2AttributeValue.id]
  static final id =
      QueryIntegerProperty<DHIS2AttributeValue>(_entities[30].properties[0]);

  /// see [DHIS2AttributeValue.dataElement]
  static final dataElement =
      QueryRelationToOne<DHIS2AttributeValue, D2DataElement>(
          _entities[30].properties[1]);

  /// see [DHIS2AttributeValue.trackedEntityAttribute]
  static final trackedEntityAttribute =
      QueryRelationToOne<DHIS2AttributeValue, D2TrackedEntityAttribute>(
          _entities[30].properties[2]);
}

/// [FromRelationship] entity fields to define ObjectBox queries.
class FromRelationship_ {
  /// see [FromRelationship.id]
  static final id =
      QueryIntegerProperty<FromRelationship>(_entities[31].properties[0]);

  /// see [FromRelationship.trackedEntityInstance]
  static final trackedEntityInstance =
      QueryRelationToOne<FromRelationship, TrackedEntity>(
          _entities[31].properties[1]);
}

/// [Relationship] entity fields to define ObjectBox queries.
class Relationship_ {
  /// see [Relationship.id]
  static final id =
      QueryIntegerProperty<Relationship>(_entities[32].properties[0]);

  /// see [Relationship.created]
  static final created =
      QueryIntegerProperty<Relationship>(_entities[32].properties[1]);

  /// see [Relationship.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<Relationship>(_entities[32].properties[2]);

  /// see [Relationship.uid]
  static final uid =
      QueryStringProperty<Relationship>(_entities[32].properties[3]);

  /// see [Relationship.relationshipName]
  static final relationshipName =
      QueryStringProperty<Relationship>(_entities[32].properties[4]);

  /// see [Relationship.bidirectional]
  static final bidirectional =
      QueryBooleanProperty<Relationship>(_entities[32].properties[5]);

  /// see [Relationship.relationshipType]
  static final relationshipType =
      QueryStringProperty<Relationship>(_entities[32].properties[6]);

  /// see [Relationship.from]
  static final from = QueryRelationToOne<Relationship, FromRelationship>(
      _entities[32].properties[7]);

  /// see [Relationship.to]
  static final to = QueryRelationToOne<Relationship, ToRelationship>(
      _entities[32].properties[8]);
}

/// [ToRelationship] entity fields to define ObjectBox queries.
class ToRelationship_ {
  /// see [ToRelationship.id]
  static final id =
      QueryIntegerProperty<ToRelationship>(_entities[33].properties[0]);

  /// see [ToRelationship.trackedEntityInstance]
  static final trackedEntityInstance =
      QueryRelationToOne<ToRelationship, TrackedEntity>(
          _entities[33].properties[1]);
}

/// [TrackedEntity] entity fields to define ObjectBox queries.
class TrackedEntity_ {
  /// see [TrackedEntity.id]
  static final id =
      QueryIntegerProperty<TrackedEntity>(_entities[34].properties[0]);

  /// see [TrackedEntity.created]
  static final created =
      QueryIntegerProperty<TrackedEntity>(_entities[34].properties[1]);

  /// see [TrackedEntity.lastUpdated]
  static final lastUpdated =
      QueryIntegerProperty<TrackedEntity>(_entities[34].properties[2]);

  /// see [TrackedEntity.uid]
  static final uid =
      QueryStringProperty<TrackedEntity>(_entities[34].properties[3]);

  /// see [TrackedEntity.trackedEntityType]
  static final trackedEntityType =
      QueryStringProperty<TrackedEntity>(_entities[34].properties[4]);

  /// see [TrackedEntity.featureType]
  static final featureType =
      QueryStringProperty<TrackedEntity>(_entities[34].properties[5]);

  /// see [TrackedEntity.programOwners]
  static final programOwners =
      QueryStringProperty<TrackedEntity>(_entities[34].properties[6]);

  /// see [TrackedEntity.orgUnit]
  static final orgUnit =
      QueryStringProperty<TrackedEntity>(_entities[34].properties[7]);

  /// see [TrackedEntity.createdAtClient]
  static final createdAtClient =
      QueryIntegerProperty<TrackedEntity>(_entities[34].properties[8]);

  /// see [TrackedEntity.potentialDuplicate]
  static final potentialDuplicate =
      QueryBooleanProperty<TrackedEntity>(_entities[34].properties[9]);

  /// see [TrackedEntity.deleted]
  static final deleted =
      QueryBooleanProperty<TrackedEntity>(_entities[34].properties[10]);

  /// see [TrackedEntity.inactive]
  static final inactive =
      QueryBooleanProperty<TrackedEntity>(_entities[34].properties[11]);

  /// see [TrackedEntity.enrollments]
  static final enrollments = QueryRelationToMany<TrackedEntity, D2Enrollment>(
      _entities[34].relations[0]);

  /// see [TrackedEntity.relationships]
  static final relationships = QueryRelationToMany<TrackedEntity, Relationship>(
      _entities[34].relations[1]);

  /// see [TrackedEntity.attributes]
  static final attributes =
      QueryRelationToMany<TrackedEntity, D2TrackedEntityAttributeValue>(
          _entities[34].relations[2]);
}
